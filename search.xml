<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>static</title>
      <link href="blog/static/"/>
      <url>blog/static/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="静态成员变量"><a href="#静态成员变量" class="headerlink" title="静态成员变量"></a>静态成员变量</h2><p>在成员变量前，加上<strong>static</strong>关键字，那么它就会变成了静态成员变量，就<strong>不再属于栈上某个对象</strong>上的数据。而是存放静态常量区当中</p><blockquote><p>当我们创建多个对象时，每个对象都会在内存中创建相应的成员变量</p><p>而非静态成员变量只有一份，并且不在对象的内存中创建</p></blockquote><img src="/blog/static/image-20220503101214836.png" class="" title="image-20220503101214836"><h2 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h2><p>在成员函数前，加上static关键字。它就变成了静态成员函数。</p><blockquote><p>成员函数和静态成员函数都不在对象的内存中创建，不会因为创建多个对象而创建多个函数</p><p>静态成员函数没有this指针，所以不能访问对象上的非静态成员变量</p></blockquote><img src="/blog/static/image-20220503101132364.png" class="" title="image-20220503101132364"><ul><li>通过<strong>类名</strong>直接调用静态成员函数</li><li>通过<strong>对象</strong>调用</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++面向对象_侯捷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this指针总结</title>
      <link href="blog/this%E6%8C%87%E9%92%88/"/>
      <url>blog/this%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(<span class="keyword">int</span> a, <span class="keyword">char</span> b) :m_age(a), m_sex(b) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAge</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> m_age&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSex</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> m_sex&#125;;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_age;</span><br><span class="line">    <span class="keyword">char</span> m_sex</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>,<span class="string">&#x27;男&#x27;</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test01();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="什么是this指针"><a href="#什么是this指针" class="headerlink" title="什么是this指针"></a>什么是this指针</h2><p>this指针是一种代称，它<strong>隐含</strong>在每个<strong>非静态成员函数</strong>内，它指向的是<strong>被调用成员函数所在的对象内存空间</strong></p><ul><li>this指针不需要定义，也不能定义，它能在成员函数中<strong>直接使用</strong></li></ul><blockquote><p>比如，在上述代码中构造函数 Person(int a, char b)，实际上是<strong>Person(this,int a, char b)</strong></p><p>也就是创建了一块名为p1的内存，然后this指向p1的起始位置，并且分配了4个字节的空间给m_age，1个字节的空间给m_sex</p><p>所以即使当形参与成员变量同名，也能清除的区分</p></blockquote><img src="/blog/this%E6%8C%87%E9%92%88/image-20220501211752269.png" class=""><h2 id="this指针的作用"><a href="#this指针的作用" class="headerlink" title="this指针的作用"></a>this指针的作用</h2><p>对象和成员函数之间，就是通过this指针连接的</p><img src="/blog/this%E6%8C%87%E9%92%88/image-20220503094001878.png" class="" title="image-20220503094001878"><blockquote><p>c1.real() 实际上是 complex::real(&amp;c1)</p><p>该过程就是因为成员函数中隐含了this指针，而c1又将地址放入了this指针当中。</p><p>所以，通过对象传入的地址不同，成员函数能够通过this指针，准确的调用其中的数据</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 深入理解C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈、堆以及内存管理</title>
      <link href="blog/%E6%A0%88%E3%80%81%E5%A0%86%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>blog/%E6%A0%88%E3%80%81%E5%A0%86%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="栈-stack"><a href="#栈-stack" class="headerlink" title="栈(stack)"></a>栈(stack)</h2><p><strong>定义</strong>：</p><p>存在于某个<strong>作用域</strong>中的一块内存空间，一般<strong>定义的程序块</strong>运行时才存在</p><ul><li><strong>局部变量</strong></li><li><strong>函数参数</strong></li><li><strong>非static对象</strong></li></ul><p><strong>生命周期：</strong></p><p>栈的生命周期在<strong>作用域内</strong>，<strong>离开作用域</strong>后栈内的空间就会被<strong>自动清理</strong></p><blockquote><p>在对象前加上 static，就能将该对象的作用域提升到全局，这样它只有在程序结束时才会被清理</p></blockquote><hr><h2 id="什么是堆-Heap"><a href="#什么是堆-Heap" class="headerlink" title="什么是堆(Heap)"></a>什么是堆(Heap)</h2><p><strong>定义：</strong></p><p>由<strong>操作系统提供</strong>的一块内存空间，堆内的对象是<strong>动态分配</strong>的，而且要<strong>手动销毁</strong></p><ul><li>利用 <strong>new</strong> 创建对象。<strong>delete</strong> 销毁对象</li></ul><p><strong>生命周期：</strong></p><p>堆的生命周期和程序相同，若不及时用delete 清理堆中的内容，就会造成内存泄漏</p><blockquote><p><strong>内存泄漏</strong>：就是对该块内存失去控制</p><p>假设：void test(){Complex* p = new Complex；}</p><p>当作用域结束后，p所指的堆中的对象仍然存在，但指针p的生命周期却结束了</p><p>那就再也没有机会清理堆中的对象了</p><p>所以：指针p被清理之前，先delete堆中的对象</p></blockquote><hr><h2 id="new的内部操作"><a href="#new的内部操作" class="headerlink" title="new的内部操作"></a>new的内部操作</h2><p>当我们使用new 去创建任何一个对象的时候，都会<strong>先分配空间</strong>，再<strong>调用指针</strong>。编译器会将new分解成三个步骤</p><ol><li><strong>分配内存</strong>。通过调用<strong>operator new</strong> 在堆中分配一块内存空间，该函数在内部实际上会调用<strong>malloc()</strong></li><li>转型。将<strong>void指针</strong>类型<strong>转换</strong>为<strong>类指针</strong>类型</li><li><strong>构造函数</strong>。通过指针调用构造函数</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设：</span></span><br><span class="line">Complex* pc = <span class="keyword">new</span> Complex(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译器会将new分解成三个步骤</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、分配内存。</span></span><br><span class="line"><span class="keyword">void</span>* mem = <span class="keyword">operator</span> <span class="keyword">new</span>( <span class="keyword">sizeof</span>(Complex) );</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、转型</span></span><br><span class="line">pc = <span class="keyword">static_cast</span>&lt;Complex*&gt;(men);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、构造函数</span></span><br><span class="line">pc-&gt;Complex::Complex(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/blog/%E6%A0%88%E3%80%81%E5%A0%86%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/image-20220501170621562.png" class=""><blockquote><p>Complex* pc = new Complex(1,2)</p><p>就是在堆中开辟一个空间</p><p>然后用指针pc在空间中进行构造函数</p></blockquote><h2 id="delete的内部操作"><a href="#delete的内部操作" class="headerlink" title="delete的内部操作"></a>delete的内部操作</h2><p>使用delete时，它会<strong>先调用析构函数</strong>，然后<strong>再释放内存</strong></p><ol><li><strong>调用析构函数</strong>。<strong>删除对象内存中指针所指的数据</strong></li><li><strong>释放内存</strong>。通过调用<strong>operator delete()</strong> 函数，它内部会调用<strong>free()</strong>函数去<strong>删除对象本身</strong></li></ol><blockquote><p>注意：</p><p>析构函数清理的是对象内存中指针所指的数据，并不会清理对象本身</p><p>而operator delete 才是释放对象本身的内存</p></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> pc;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译器会转换为下面的步骤</span></span><br><span class="line">Complex::~Complex(pc);<span class="comment">//析构函数</span></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pc)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="new-一定要搭配-delete"><a href="#new-一定要搭配-delete" class="headerlink" title="new[] 一定要搭配 delete[]"></a>new[] 一定要搭配 delete[]</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String* p = <span class="keyword">new</span> String[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><blockquote><p>因为String类型中存放的是一个指针，若此时只用delete，就会造成内存泄漏</p><p>若使用的是delete，那么系统就不知道内存中有一个数组，它只会调用一次析构函数去删除String中的数据。之后调用operator delete()函数清理堆中内存时，还有其它的String没有析构，所以就会造成内存泄漏。</p><p>但若使用的是delete[],它就会调用多次析构函数。此时再清理堆中的内存，就不会造成内存泄漏</p></blockquote><img src="/blog/%E6%A0%88%E3%80%81%E5%A0%86%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/image-20220502224104827.png" class="" title="image-20220502224104827"><p><strong>总结：</strong></p><ul><li>如果通过new[ ]创建的对象内有<strong>指针</strong>，那就必须使用delete[]</li><li>若不使用delete[]，那么泄漏的内存不是堆中内存的对象本身，而是<strong>对象中指针所指的数据</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++面向对象_侯捷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp-三大函数-侯捷</title>
      <link href="blog/Cpp-%E4%B8%89%E5%A4%A7%E5%87%BD%E6%95%B0-%E4%BE%AF%E6%8D%B7/"/>
      <url>blog/Cpp-%E4%B8%89%E5%A4%A7%E5%87%BD%E6%95%B0-%E4%BE%AF%E6%8D%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="三大函数：拷贝构造、拷贝赋值、析构"><a href="#三大函数：拷贝构造、拷贝赋值、析构" class="headerlink" title="三大函数：拷贝构造、拷贝赋值、析构"></a>三大函数：拷贝构造、拷贝赋值、析构</h2><p>字符串的本质：</p><blockquote><p>一般来说，字符串内只有一个<strong>指针</strong></p><p>当<strong>字符串初始化</strong>时，才会<strong>创建一个变量来存放字符本身</strong>，然后指针指向该变量。</p></blockquote><p><strong>手写String示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    String(<span class="keyword">const</span> <span class="keyword">char</span>* cstr = <span class="number">0</span>);<span class="comment">//String的默认构造函数</span></span><br><span class="line">    String(<span class="keyword">const</span> String&amp; str);<span class="comment">//拷贝构造，接收String对象</span></span><br><span class="line"><span class="built_in">string</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> String&amp; str);<span class="comment">//拷贝赋值</span></span><br><span class="line">    ~String();<span class="comment">//析构</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">char</span>* <span class="title">get_c_str</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> m_data;&#125;<span class="comment">//函数体内不改变data，函数名后面加const</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* m_data;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//构造函数声明在类外</span></span><br><span class="line"><span class="keyword">inline</span></span><br><span class="line">String:: String(<span class="keyword">const</span> <span class="keyword">char</span>* cstr = <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cstr)&#123;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(cstr)+<span class="number">1</span>];<span class="comment">//strlen()获取传入字符的长度</span></span><br><span class="line">        <span class="built_in">strcpy</span>(m_data,cstr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//字符串未指定初值，为空字符串</span></span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1</span>];</span><br><span class="line">        *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line"><span class="keyword">inline</span></span><br><span class="line">String::String(<span class="keyword">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">m_data = <span class="keyword">new</span> <span class="keyword">char</span>[ <span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span> ];<span class="comment">//在堆中申请空间</span></span><br><span class="line"><span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝赋值</span></span><br><span class="line"><span class="keyword">inline</span></span><br><span class="line">String&amp; String::<span class="keyword">operator</span>=(<span class="keyword">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;str)<span class="comment">//检测自我赋值，</span></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">delete</span>[] m_data;</span><br><span class="line">m_data = <span class="keyword">new</span> <span class="keyword">char</span>[ <span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span> ];</span><br><span class="line"><span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span></span><br><span class="line">String:: ~String()&#123;</span><br><span class="line">    <span class="keyword">delete</span>[] m_data; <span class="comment">//删除存放字符的变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">String <span class="title">s1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">s2</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">s3</span><span class="params">(s2)</span></span>;<span class="comment">//调用拷贝构造函数</span></span><br><span class="line">    String s3 = s2;<span class="comment">//调用拷贝赋值函数</span></span><br><span class="line">    </span><br><span class="line">    String* p = <span class="keyword">new</span> String(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="拷贝构造"><a href="#拷贝构造" class="headerlink" title="拷贝构造"></a>拷贝构造</h3><p>当类的成员中<strong>包含指针</strong>，那么就必须<strong>重写拷贝构造函数</strong>，在堆区申请空间。否则就会产生<strong>两个指针指向同一块内存区域</strong>的问题，这也就是<strong>深浅拷贝</strong>问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span></span><br><span class="line">String::String(<span class="keyword">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">m_data = <span class="keyword">new</span> <span class="keyword">char</span>[ <span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span> ];<span class="comment">//在堆中申请空间</span></span><br><span class="line"><span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>浅拷贝</strong>：编译器调用了默认的拷贝构造函数</p><ul><li>首先 浅拷贝只是拷贝了一个<strong>指针</strong>，并<strong>没有新开辟一块地址</strong></li><li>所以 就导致了新对象拷贝过来的指针和原对象的指针<strong>指向同一块地址</strong></li><li>最后 就会造成<strong>资源重复释放的错误</strong></li></ul><p><strong>深拷贝</strong>：<strong>重写拷贝构造函数</strong>，在<strong>堆区申请空间</strong></p><ul><li>而深拷贝则是在<strong>堆区新开辟了一个内容空间</strong>，让新对象的<strong>指针指向新开辟的空间</strong></li><li>这样即使原对象被析构掉，也不会影响到新对象所得到的值</li></ul><h3 id="拷贝赋值"><a href="#拷贝赋值" class="headerlink" title="拷贝赋值"></a>拷贝赋值</h3><p>若存在a = b，则会调用拷贝赋值操作</p><ul><li>首先 清理a的内存空间</li><li>然后 根据b的内存空间大小，给a分配相同的空间</li><li>最后 将b中的数据拷贝到a中</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span></span><br><span class="line">String&amp; String::<span class="keyword">operator</span>=(<span class="keyword">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;str)<span class="comment">//检测自我赋值</span></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">delete</span>[] m_data;</span><br><span class="line">m_data = <span class="keyword">new</span> <span class="keyword">char</span>[ <span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span> ];</span><br><span class="line"><span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>检测自我赋值很关键，若真的存在两个对象的指针指向同一块内存，那么就直接返回</p><p>否则后续将会产生不确定性</p></blockquote><img src="/blog/Cpp-%E4%B8%89%E5%A4%A7%E5%87%BD%E6%95%B0-%E4%BE%AF%E6%8D%B7/image-20220429145226508.png" class="" title="image-20220429145226508">]]></content>
      
      
      <categories>
          
          <category> C++面向对象_侯捷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>games101笔记</title>
      <link href="blog/games101/"/>
      <url>blog/games101/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数学基础"><a href="#数学基础" class="headerlink" title="数学基础"></a>数学基础</h2><h3 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h3><p><img src="games101./image-20220304211010236.png" alt="image-20220304211010236"></p><p><strong>单位向量的计算方法</strong>：</p><p>向量/向量的模长</p><p><img src="games101./image-20220304212202619.png" alt="image-20220304212202619"></p><p><strong>向量求和</strong></p><p><img src="games101./image-20220304212302182.png" alt="image-20220304212302182"></p><p><strong>使用直角坐标描述向量</strong></p><p>认为向量永远从原点(0,0)开始，然后沿着X轴，有一些单位向量往右走，以及一些单位向量沿着Y轴，向上走</p><p>那么就可以用几个X加上几个Y来表示这个向量</p><p><img src="games101./image-20220304213002693.png" alt="image-20220304213002693"></p><p>注意：在图形学上，向量默认是往下写，是列向量</p><h4 id="向量的点乘"><a href="#向量的点乘" class="headerlink" title="向量的点乘"></a><strong>向量的点乘</strong></h4><ul><li>向量的点乘最终得到的结果是一个<strong>数</strong></li></ul><p><img src="games101./image-20220304213523423.png" alt=""></p><ul><li>点乘可以快速得到两个向量的<strong>夹角</strong></li></ul><p><img src="games101./image-20220304214115299.png" alt="image-20220304214115299"></p><ul><li>尤其是当两个向量都为<strong>方向向量</strong>时最为方便</li></ul><p><img src="games101./image-20220304214148791.png" alt="image-20220304214148791"></p><p>在<strong>直角坐标系</strong>中，两个向量进行<strong>点乘</strong>更为方便</p><p><img src="games101./image-20220304214430433.png" alt="image-20220304214430433"></p><p><strong>投影</strong></p><p><img src="games101./image-20220304215313954.png" alt="image-20220304215313954"></p><p><strong>a</strong>,<strong>b</strong>是两个向量，当有一束光垂直着向量<strong>a</strong>照射过来，那么向量<strong>b</strong>将会投出一个阴影在向量<strong>a</strong>上。</p><p>而投出阴影的这一段，就被称为向量<strong>b</strong>在向量<strong>a</strong>上的投影</p><ul><li>由于向量<strong>b</strong>投影在向量<strong>a</strong>上，那么该<strong>投影一定是沿着向量a方向</strong>。</li></ul><p><img src="games101./image-20220304215849895.png" alt="image-20220304215849895"></p><ul><li>所以只要求出k的值，就能得到向量<strong>b</strong>的投影</li></ul><p><img src="games101./image-20220304220034056.png" alt="image-20220304220034056"></p><ul><li>算出投影后 可以把该向量进行<strong>垂直与平行的分解</strong></li></ul><p><img src="games101./image-20220304220935323.png" alt="image-20220304220935323"></p><p><strong>判断两个向量的方向和接近程度</strong></p><ul><li><p>如果两个向量的点乘结果是<strong>正数</strong>，那么他们的方向<strong>基本一致</strong>，结果越接近1，就离得越近</p></li><li><p>如果两个向量的点乘结果是<strong>0</strong>，那么他们<strong>互相垂直</strong></p></li><li><p>如果两个向量的点乘结果是<strong>负数</strong>，那么他们的方向<strong>基本相反</strong>，结果越接近-1，就离得越远</p></li></ul><p><img src="games101./image-20220304222701553.png" alt="image-20220304222701553"></p><p><strong>总结</strong>：</p><ul><li>点乘最大的作用可以<strong>获得两个向量的夹角</strong></li><li>可以获取<strong>一个向量投影到另一个向量上的情况</strong></li><li><strong>判断两个向量的方向和接近程度</strong></li></ul><h4 id="向量的叉乘"><a href="#向量的叉乘" class="headerlink" title="向量的叉乘"></a>向量的叉乘</h4><p>概念：两个不同的向量叉乘后，会得出另一个<strong>向量</strong>，而这个向量必须垂直于原本的两个向量</p><blockquote><p>就是说两个向量叉乘后，得到了一个垂直于这两个向量的新向量</p></blockquote><ul><li>新向量一定是处于另一个平面</li></ul><p>通过右手螺旋定则判断新向量的方向</p><p><img src="games101./image-20220304224117776.png" alt="image-20220304224117776"></p><ul><li><strong>a</strong>叉乘<strong>b</strong>，就是从<strong>a</strong>旋转到<strong>b</strong>方向，拇指对应的方向就是新向量的方向</li><li>而<strong>b</strong>叉乘<strong>a</strong>，就是从<strong>b</strong>旋转到<strong>a</strong>方向，所以叉乘并不满足交换律</li></ul><p>作用：</p><p>可以用叉乘建立一个三维空间直角坐标系</p><p><img src="games101./image-20220304224441816.png" alt="image-20220304224441816"></p><p>在笛卡尔坐标系下的向量叉乘</p><p><img src="games101./image-20220305230223210.png" alt="image-20220305230223210"></p><p>也可以把叉乘表示成矩阵形式</p><p>把向量<strong>a</strong>写成对应的一个矩阵，再去乘以对应的向量<strong>b</strong></p><p><img src="games101./image-20220305230855071.png" alt="image-20220305230855071"></p><p><strong>作用</strong>：</p><p>1、<strong>判断一个向量在另一个向量的左或者右侧</strong></p><p>假设有两个向量<strong>a</strong>，<strong>b</strong>，通过两个向量的点乘就能判断向量<strong>b</strong>在<strong>a</strong>的左侧还是右侧</p><p><img src="games101./image-20220305232620455.png" alt="image-20220305232620455"></p><ul><li>如果向量<strong>a</strong>乘以向量<strong>b</strong>，得到的<strong>z是正数</strong>，就说明<strong>b在a的左侧</strong>。反之，若z是负数，说明<strong>b在a的右侧</strong></li></ul><p>2、判断一个点，是否在三角形内部</p><p>假设有A,B,C三个点构成的向量，由逆时针排列</p><p><img src="games101./image-20220305234450395.png" alt="image-20220305234450395"></p><ol><li>先看向量<strong>AB</strong>和<strong>AP</strong>，其叉乘结果向外，所以<strong>P点在AB的左侧</strong></li><li>做上述相同操作，用<strong>BC</strong>叉乘<strong>BP</strong>，得到<strong>P点仍在BC左侧</strong></li><li>最后用<strong>CA</strong>叉乘<strong>CP</strong>,得到<strong>P</strong>点依然在<strong>CA左侧</strong></li></ol><p>结论：</p><p>只要<strong>P点在三角形内部</strong>。就一定会在三条边的<strong>左边</strong>或者<strong>右边</strong></p><p>定义3D坐标系</p><p><img src="games101./image-20220306000024580.png" alt="image-20220306000024580"></p><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><p>用来表示位置的变换</p><h4 id="矩阵计算"><a href="#矩阵计算" class="headerlink" title="矩阵计算"></a><strong>矩阵计算</strong></h4><p><img src="games101./image-20220420223016770.png" alt="image-20220420222957423"></p><blockquote><ol><li>3×2的矩阵 乘以 2×4的矩阵，最后得到3×4的矩阵</li><li>如何确定矩阵中的元素，如新矩阵中的2行4列的值26。其实就是将第一个矩阵中的第2行和第二个矩阵中的第四列进行一个点积，就能得到新矩阵的值</li></ol></blockquote><p>总结：需要计算第几行第几列的值，就去找旧矩阵中的第几行和第几列，将两者的向量进行点积，得到的结果就是新矩阵中的值</p><h4 id="矩阵性质"><a href="#矩阵性质" class="headerlink" title="矩阵性质"></a><strong>矩阵性质</strong></h4><ul><li><p>矩阵的乘积不具备交换律</p><p><img src="games101./image-20220420224631934.png" alt="image-20220420224631934"></p></li><li><p>但具备结合律和分配律</p><p><img src="games101./image-20220420224655015.png" alt="image-20220420224655015"></p></li></ul><p><strong>矩阵和向量相乘</strong></p><p>向量可以看成(m×1)的矩阵，只要改矩阵为(? × m)，就可以实现矩阵和向量相乘</p><p><img src="games101./image-20220420225138992.png" alt="image-20220420225138992"></p><p>通过该矩阵乘以(x,y)向量，就能按y轴进行对称操作</p><p><strong>矩阵的转置</strong></p><p>就是将矩阵原本的行列进行互换</p><p><img src="games101./image-20220420225604441.png" alt="image-20220420225604441"></p><p>注意：</p><p><img src="games101./image-20220420225742688.png" alt="image-20220420225742688"></p><blockquote><p>如果要对两个相乘的矩阵进行转置，就相当于先对后一个矩阵转置，再乘以前一个矩阵转置</p></blockquote><p><strong>单位矩阵</strong></p><p><img src="games101./image-20220420225932456.png" alt="image-20220420225932456"></p><blockquote><p>单位矩阵，只有对角线上有非零元素</p></blockquote><p><img src="games101./image-20220420230138801.png" alt="image-20220420230138801"></p><blockquote><p>若两个矩阵相乘，得到一个单位矩阵，说明两个矩阵互逆</p></blockquote><hr><h4 id="向量点乘和叉乘写成矩阵形式"><a href="#向量点乘和叉乘写成矩阵形式" class="headerlink" title="向量点乘和叉乘写成矩阵形式"></a><strong>向量点乘和叉乘写成矩阵形式</strong></h4><p>点乘写成矩阵</p><p><img src="games101./image-20220420230656135.png" alt="image-20220420230656135"></p><blockquote><p>a向量乘b向量，可以写成a转置乘b。即若a原本为列向量，转置后变为行向量。1行3列乘3行一列，就能得到一行一列，也就是一个数</p></blockquote><p>叉乘写成矩阵</p><p><img src="games101./image-20220420231250963.png" alt="image-20220420231250963"></p><h2 id="Transformation-变换"><a href="#Transformation-变换" class="headerlink" title="Transformation(变换)"></a>Transformation(变换)</h2>]]></content>
      
      
      <categories>
          
          <category> 图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="blog/%E7%AE%97%E6%B3%95/"/>
      <url>blog/%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><img src="/blog/%E7%AE%97%E6%B3%95/image-20220429164520442.png" class="" title="image-20220429164520442"><blockquote><p>head-&gt;next 是<strong>根据head指针域的地址访问下一个节点</strong></p><p>也就能通过 head-&gt;next-&gt;val 访问下一个节点的数据</p><p>还能通过 head-&gt;next-&gt;next 根据下一个节点的指针域地址访问下下个节点</p></blockquote><h2 id="基本技能"><a href="#基本技能" class="headerlink" title="基本技能"></a>基本技能</h2><p>链表相关的核心点。遇到链表相关题型，最好能够画出来</p><ul><li>dummy node 虚拟节点</li></ul><blockquote><p>当涉及到头节点可能被删除的问题，就需要引入一个虚拟节点，作为整个链表的虚拟头结点</p></blockquote><ul><li>快慢指针</li><li>插入一个节点到排序链表</li><li>从链表中移除一个节点</li><li>反转链表</li></ul><blockquote><p>元素位置不变，完成链表指向的反转</p></blockquote><ul><li>合并两个链表</li><li>找到链表的中间节点</li></ul><h2 id="常见题型"><a href="#常见题型" class="headerlink" title="常见题型"></a>常见题型</h2><h4 id="83-删除排序链表中的重复元素"><a href="#83-删除排序链表中的重复元素" class="headerlink" title="83. 删除排序链表中的重复元素"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">83. 删除排序链表中的重复元素</a></h4><p>给定一个已排序的链表的头 <code>head</code> ，删除所有重复的元素，使每个元素只能出现一次，返回已经排序的链表</p><blockquote><p>思路：</p><p>由于链表已经排好序，所以可以比较两个相邻的节点，然后指向相同节点的后一个节点。</p><p>这样就能保证在删除重复元素时，还能使每个元素出现一次</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span><span class="comment">//定义链表节点的结构体</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span>)&#123;<span class="comment">//链表为空</span></span><br><span class="line">            <span class="keyword">return</span> head;    <span class="comment">//直接返回空表</span></span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;val == cur-&gt;next-&gt;val)&#123;</span><br><span class="line">                ListNode* temp = cur-&gt;next;</span><br><span class="line">                cur-&gt;next = cur-&gt;next-&gt;next;<span class="comment">//删除节点后，伴随着指针下一个节点的变化</span></span><br><span class="line">                <span class="keyword">delete</span> temp;<span class="comment">//手动删除内存</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cur = cur-&gt;next;<span class="comment">//遍历链表</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="82-删除排序链表中的重复元素-II"><a href="#82-删除排序链表中的重复元素-II" class="headerlink" title="82. 删除排序链表中的重复元素 II"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/">82. 删除排序链表中的重复元素 II</a></h4><p>给定一个已排序的链表的头 <code>head</code> ， <em>删除原始链表中所有重复数字的节点，只留下不同的数字</em> 。返回 <em>已排序的链表</em> 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span><span class="comment">//定义链表节点的结构体</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//当链表的节点个数小于2，就不会发生删除节点的操作，所以直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);<span class="comment">//虚拟节点</span></span><br><span class="line">        dummyHead-&gt;next = head;<span class="comment">//虚拟节点指向头结点，充当虚拟头节点</span></span><br><span class="line">        ListNode* cur = dummyHead;<span class="comment">//指向虚拟头结点的头指针</span></span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next &amp;&amp; cur-&gt;next-&gt;next)&#123;<span class="comment">//存在两个相邻的节点</span></span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;next-&gt;val == cur-&gt;next-&gt;next-&gt;val)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = cur-&gt;next-&gt;val;<span class="comment">//记录链表中出现的重复数字</span></span><br><span class="line">                <span class="keyword">while</span>(cur-&gt;next &amp;&amp; cur-&gt;next-&gt;val ==x)&#123; <span class="comment">//当头指针的下一个节点存在并且该值是重复数字</span></span><br><span class="line">                    ListNode* temp = cur-&gt;next;</span><br><span class="line">                    cur-&gt;next = cur-&gt;next-&gt;next;<span class="comment">//删除该链表</span></span><br><span class="line">                    <span class="keyword">delete</span> temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cur = cur-&gt;next;<span class="comment">//b</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        head = dummyHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dummyHead;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a><a href="https://leetcode-cn.com/problems/reverse-linked-list/">206. 反转链表</a></h4><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><blockquote><p>思路：</p><p>通过修改节点的指向操作，来达到反转链表的目标。图片如下</p></blockquote><img src="/blog/%E7%AE%97%E6%B3%95/image-20220503230847048.png" class="" title="image-20220503230847048"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span><span class="comment">//定义链表节点的结构体</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//双指针        </span></span><br><span class="line">        ListNode* cur = <span class="literal">NULL</span>;<span class="comment">//存放上一个节点的指针</span></span><br><span class="line">        ListNode* pre = head;<span class="comment">//定义遍历指针，用来结束遍历</span></span><br><span class="line">        <span class="keyword">while</span>(pre != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            ListNode* temp = pre-&gt;next;<span class="comment">//存放下一个节点的指针，以免找不到后续链表</span></span><br><span class="line">            pre-&gt;next = cur;<span class="comment">//当前指针指向上一个节点</span></span><br><span class="line">            cur = pre;<span class="comment">//移动上一个节点指针，更新需要被连接的上一个节点地址</span></span><br><span class="line">            pre = temp;         <span class="comment">//移动当前指针，更新当前节点的地址</span></span><br><span class="line">        &#125;</span><br><span class="line">        head = cur;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="92-反转链表-II"><a href="#92-反转链表-II" class="headerlink" title="92. 反转链表 II"></a><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">92. 反转链表 II</a></h4><p>给你单链表的头指针 head 和两个整数 left 和 right ，其中 left &lt;= right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 。</p><blockquote><p>思路：</p><p>1、由于是反转链表子区间，所以必须要记录该区间的<strong>前驱节点</strong>和<strong>后继节点</strong></p><p>2、链表子区间从链表中移除，就变成了反转整个子区间链表问题。所以还要记录<strong>left</strong>和<strong>righ</strong>节点</p><p>3、最后用前驱节点指向left节点，right节点指向后继节点</p></blockquote><img src="/blog/%E7%AE%97%E6%B3%95/image-20220506160317656.png" class="" title="image-20220506160317656"><img src="/blog/%E7%AE%97%E6%B3%95/image-20220506161151458.png" class="" title="image-20220506161151458"><img src="/blog/%E7%AE%97%E6%B3%95/image-20220506161202698.png" class="" title="image-20220506161202698"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span><span class="comment">//定义链表节点的结构体</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left == right)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、头节点可能改变，添加虚拟头节点</span></span><br><span class="line">        ListNode* dummyNode = <span class="keyword">new</span> ListNode(<span class="number">0</span>);        </span><br><span class="line">        dummyNode-&gt;next = head;</span><br><span class="line">        <span class="keyword">auto</span> pre = dummyNode;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2、找到left的前驱节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; left - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            pre = pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> leftNode = pre-&gt;next;<span class="comment">//得到left节点</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3、找到right的后继节点</span></span><br><span class="line">        <span class="keyword">auto</span> rightNode = pre;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; right - left + <span class="number">1</span>;i++)&#123;</span><br><span class="line">            rightNode = rightNode-&gt;next;<span class="comment">//得到了right节点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> cur = rightNode-&gt;next;<span class="comment">//得到right的后继节点</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4、切断需要反转的链表</span></span><br><span class="line">        pre-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        rightNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5、同206题，反转链表的子区间</span></span><br><span class="line">        ListNode* h = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* leftPtr = leftNode;</span><br><span class="line">        <span class="keyword">while</span>(leftPtr != <span class="literal">NULL</span> )&#123;          </span><br><span class="line">            <span class="keyword">auto</span> temp = leftPtr-&gt;next;</span><br><span class="line">           leftPtr-&gt;next = h;</span><br><span class="line">            h = leftPtr;</span><br><span class="line">            leftPtr = temp;           </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//6、连接已经完成反转的链表子区间</span></span><br><span class="line">        pre-&gt;next = rightNode;</span><br><span class="line">        leftNode-&gt;next = cur;                </span><br><span class="line">        <span class="keyword">return</span> dummyNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21. 合并两个有序链表"></a><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">21. 合并两个有序链表</a></h4><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp_操作符重载_侯捷</title>
      <link href="blog/Cpp-%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD-%E4%BE%AF%E6%8D%B7/"/>
      <url>blog/Cpp-%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD-%E4%BE%AF%E6%8D%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="课程回顾"><a href="#课程回顾" class="headerlink" title="课程回顾"></a>课程回顾</h2><p>在编写C++程序中，尽量要遵循以下规范</p><ul><li>对于构造函数，应使用<strong>初始化列表</strong>的形式进行初始化。该方法<strong>效率更高，速度更快</strong></li><li>数据都应该以Private的形式进行存储</li><li>若成员函数的作用，仅用于返回作用，那么<strong>函数名后面加上const</strong></li><li>当<strong>返回值不是局部变量</strong>时，可以用<strong>引用</strong>来接收函数的返回值</li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">complex</span> (<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>): re (r), im (i) &#123; &#125;<span class="comment">//用初始化列表构造函数</span></span><br><span class="line"><span class="built_in">complex</span>&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="built_in">complex</span>&amp;);</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">real</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> re; &#125;<span class="comment">//不希望成员函数的返回值修改</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">imag</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> im; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> re, im;</span><br><span class="line"><span class="keyword">friend</span> <span class="built_in">complex</span>&amp; __doapl (<span class="built_in">complex</span>*, <span class="keyword">const</span> <span class="built_in">complex</span>&amp;); <span class="comment">//友元函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="值类型和引用类型的使用场景"><a href="#值类型和引用类型的使用场景" class="headerlink" title="值类型和引用类型的使用场景"></a><strong>值类型和引用类型的使用场景</strong></h3><ul><li>在<strong>传参</strong>时，若仅为了追求<strong>效率</strong>，我们都尽可能的以<strong>引用的方式传递</strong>。</li></ul><blockquote><p>并且我们还需要明确规范一点</p><p>若该参数我们不希望修改，即该参数在函数中仅用于赋值，那么我们就应该在引用前加上const。</p><p>若该参数我们希望修改，即通过函数修改参数内容，那么就不用在引用前加const</p><p>好处：这样就能通过const，初步判断该引用在进行传参时，是否会发生改变</p></blockquote><ul><li>引用是可以作为<strong>函数的返回值</strong></li></ul><blockquote><p>但是返回的对象不能是局部变量，因为局部变量在出函数之后就会被释放，这样对其引用就会报错</p></blockquote><hr><h2 id="操作符重载与临时对象"><a href="#操作符重载与临时对象" class="headerlink" title="操作符重载与临时对象"></a>操作符重载与临时对象</h2><p>编译器在遇到操作符后</p><p>会判断左边的变量是否对该操作符进行了定义</p><p>若定义，则该行式子就会被编译成定义过的函数</p><h3 id="成员函数中的运算符重载"><a href="#成员函数中的运算符重载" class="headerlink" title="成员函数中的运算符重载"></a>成员函数中的运算符重载</h3><p>成员函数中有this指针，所以运算符重载的<strong>返回值类型可以为引用</strong></p><p><strong>示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="built_in">complex</span>&amp;<span class="comment">//运算符重载函数返回值用引用类型，速度快，效率高</span></span><br><span class="line">__doapl(<span class="built_in">complex</span>* ths, <span class="keyword">const</span> <span class="built_in">complex</span>&amp; r)</span><br><span class="line">&#123;</span><br><span class="line">ths-&gt;re += r.re;<span class="comment">//c2的实部</span></span><br><span class="line">ths-&gt;im += r.im;<span class="comment">//c2的虚部</span></span><br><span class="line"><span class="keyword">return</span> *ths;<span class="comment">//返回c2指针所指的对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//c2在操作符左边，传入函数的this指针中，不显示</span></span><br><span class="line"><span class="comment">//c1在操作符右边，传入函数的 const complex&amp; r 参数中</span></span><br><span class="line"><span class="keyword">inline</span> <span class="built_in">complex</span>&amp;</span><br><span class="line"><span class="built_in">complex</span>::<span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="built_in">complex</span>&amp; r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> __doapl (<span class="keyword">this</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="built_in">complex</span> <span class="title">c1</span><span class="params">(<span class="number">2</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">complex</span> <span class="title">c2</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">c2 += c1;<span class="comment">//+= 被定义，所以会编译complex::operator += ()函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>运算符重载函数的返回值类型，最好使用引用类型，速度快，效率高</li></ul><blockquote><p>若出现连续赋值的情况，则运算符重载的返回值类型不能为void</p></blockquote><h3 id="非成员函数中的运算符重载"><a href="#非成员函数中的运算符重载" class="headerlink" title="非成员函数中的运算符重载"></a>非成员函数中的运算符重载</h3><p>非成员函数中没有this指针，所得的数据只能放在typename()所创建的<strong>临时变量</strong>中</p><p>当函数return后，该临时变量就会被销毁，所以该运算符重载函数的返回值类型不能为引用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="built_in">complex</span></span><br><span class="line"><span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="built_in">complex</span>&amp; x, <span class="keyword">const</span> <span class="built_in">complex</span>&amp; y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">complex</span> (real (x) + real (y), imag (x) + imag (y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="built_in">complex</span></span><br><span class="line"><span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="built_in">complex</span>&amp; x, <span class="keyword">double</span> y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">complex</span> (real (x) + y, imag (x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="built_in">complex</span></span><br><span class="line"><span class="keyword">operator</span> + (<span class="keyword">double</span> x, <span class="keyword">const</span> <span class="built_in">complex</span>&amp; y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">complex</span> (x + real (y), imag (y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++面向对象_侯捷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp_Primer要点总结</title>
      <link href="blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[TOC]</p><h1 id="第1章：开始"><a href="#第1章：开始" class="headerlink" title="第1章：开始"></a>第1章：开始</h1><h3 id="1-1-编写一个简单的C-程序"><a href="#1-1-编写一个简单的C-程序" class="headerlink" title="1.1 编写一个简单的C++程序"></a>1.1 编写一个简单的C++程序</h3><ul><li>每个C++程序必须包含<strong>一个</strong>或<strong>多个</strong>函数，其中一个必须命名为<strong>main</strong>，操作系统通过调用main来运行C++程序。</li><li>一个函数定义包括四个部分，<strong>返回值类型</strong>，<strong>函数名</strong>，<strong>形参列表</strong>，以及<strong>函数体</strong></li><li>main函数的返回类型必须是<strong>int</strong>。</li><li>main的返回值通常被用来指示状态，<strong>返回值0表示成功</strong>，非0的含义由系统定义，通常用来指出错误类型</li></ul><p><strong>程序源文件命名约定</strong></p><ul><li>不同编译器使用不同的后缀命名约定</li></ul><hr><h3 id="1-2-初识输入输出"><a href="#1-2-初识输入输出" class="headerlink" title="1.2 初识输入输出"></a>1.2 初识输入输出</h3><ul><li><p>C++并未定义任何输入输出语句，而是包含了一个全面的<strong>标准库</strong>来提供IO机制</p></li><li><p>iostream库包含了两个基础类型<strong>istream</strong>和<strong>ostream</strong>，分别表示<strong>输入流</strong>和<strong>输出流</strong></p></li></ul><p><strong>标准输入输出对象</strong></p><ul><li><strong>cin</strong>，将程序从窗口读入</li><li><strong>cout</strong>，将数据写入窗口</li><li><strong>cerr</strong>，在窗口输出警告和错误信息</li><li><strong>clog</strong>，在窗口输出程序运行日志</li></ul><p><strong>一个使用IO库的程序</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Enter two numbers:&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> v1 = <span class="number">0</span>, v2 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; v1 &gt;&gt; v2;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;This sum of&quot;</span> &lt;&lt; v1 &lt;&lt; <span class="string">&quot;and&quot;</span> &lt;&lt; v2 &lt;&lt; <span class="string">&quot;is&quot;</span> &lt;&lt; v1 + v2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>iostream是一个头文件，使用标准库的程序都必须包含头文件</li></ul><p><strong>向流写入数据</strong></p><p><code>std::cout &lt;&lt; &quot;Enter two numbers:&quot; &lt;&lt; std::endl;</code></p><ul><li><p><strong>输出运算符</strong>(<strong>&lt;&lt;</strong>)左侧对象必须是<strong>ostream对象</strong>，它会将右侧的值<strong>写入</strong>左侧ostream中，并且计算结果为<strong>写入值的ostream对象</strong></p></li><li><p><strong>endl</strong>被称为<strong>操纵符</strong>，其效果是<strong>结束当前行</strong>，并将<strong>缓冲区中的内容刷到设备中</strong></p></li></ul><p><strong>使用标准库中的名字</strong></p><ul><li>标准库定义的<strong>所有名字</strong>都在命名空间中</li><li>命名空间可以<strong>避免库中相同名字导致的冲突</strong></li></ul><p><strong>从流读取数据</strong></p><p><code>std::cin &gt;&gt; v1 &gt;&gt; v2;</code></p><ul><li><strong>输入运算符</strong>(<strong>&gt;&gt;</strong>)通过左侧的istream对象，将读入的数据存入右侧的对象中</li></ul><hr><h1 id="第2章：变量和基本数据类型"><a href="#第2章：变量和基本数据类型" class="headerlink" title="第2章：变量和基本数据类型"></a>第2章：变量和基本数据类型</h1><h2 id="2-1-基本内置数据类型"><a href="#2-1-基本内置数据类型" class="headerlink" title="2.1 基本内置数据类型"></a>2.1 基本内置数据类型</h2><p>C++的内置数据类型包括了<strong>算数类型</strong>和<strong>空类型</strong></p><h3 id="2-1-1-算术类型"><a href="#2-1-1-算术类型" class="headerlink" title="2.1.1 算术类型"></a>2.1.1 算术类型</h3><p>算数数据有两类：</p><ul><li><strong>整形</strong>（这里面包括了字符型(char)和布尔类型(T or F)）</li><li>浮点型(单精度float，双精度double)</li></ul><p>其中char占一个字节，int占四个字节</p><p><strong>注意</strong>：当使用浮点数运算时一般用<strong>double</strong>，因为float通常精度不够，而两者实际的计算代价相差无几</p><h3 id="2-1-2-类型转换"><a href="#2-1-2-类型转换" class="headerlink" title="2.1.2 类型转换"></a>2.1.2 类型转换</h3><p> 当我们将两种不同的数据类型进行运算时，程序会自动的进行类型转换</p><p>这种类型转换被称为<strong>强制类型转换</strong></p><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/QQ%E6%88%AA%E5%9B%BE20220221212915.png" class="" title="QQ截图20220221212915"><h3 id="2-1-3-字面值常量"><a href="#2-1-3-字面值常量" class="headerlink" title="2.1.3 字面值常量"></a>2.1.3 字面值常量</h3><p>字面值常量的<strong>形式和值</strong>决定了它的数据类型，我们可以通过它一眼看出值的类型</p><p>比如：看到42就知道整形，4.2是浮点型</p><p><strong>字符和字符串字面值</strong></p><p>而<strong>字符</strong>型的字面值则是由<strong>单引号</strong>括起来，如  <strong>‘a’</strong></p><p><strong>字符串</strong>的字面值则是由<strong>双引号</strong>括起来，如 <strong>“abcd”</strong></p><p><strong>注意</strong>：</p><ul><li>字符串实际上是由<strong>常量字符构成的数组</strong></li><li>编译器会在字符串的<strong>结尾添加一个空字符</strong>(‘\0’)，因此字符串的<strong>实际长度要比所含字符多一个长度</strong></li></ul><p>如：(字符串)<strong>“A”</strong> ,实际上所占两个字符，分别为本身的字符 <strong>‘A’</strong>和编译器添加的 <strong>‘\0’</strong></p><p>而字符 <strong>‘A’</strong>,实际上所占就是本身一个字符 </p><p><strong>转义序列</strong></p><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/QQ%E6%88%AA%E5%9B%BE20220221214913.png" class="" title="QQ截图20220221214913"><h2 id="2-2-变量"><a href="#2-2-变量" class="headerlink" title="2.2 变量"></a>2.2 变量</h2><p>变量的本质是一个<strong>拥有名字</strong>，可以<strong>操作</strong>的<strong>存储空间</strong>。</p><blockquote><p>可以将它理解为大型商场里的一排排<strong>”储物柜“</strong>，变量<strong>存储空间的大小</strong>就相当于<strong>”储物柜“的大小</strong>，<strong>不同的数据类型的变量</strong>就相当于<strong>不同种类的”储物柜“</strong>。</p><p>而对象则更像是一种<strong>特殊的变量</strong>，因为对象的定义就是<strong>具有某种数据类型的内存空间</strong>。</p></blockquote><h3 id="2-2-1-变量定义"><a href="#2-2-1-变量定义" class="headerlink" title="2.2.1 变量定义"></a>2.2.1 变量定义</h3><p><strong>定义与声明的区别</strong></p><p>定义语法：<code>数据类型 变量名</code></p><p>声明语法：<code>extern 数据类型 变量名</code></p><p>在C++中定义与声明是有所<strong>区别</strong></p><ul><li><p><strong>定义</strong>变量时，系统会<strong>开辟一块存储空间</strong>，然后还有一串16进制的数字来表示空间地址，我们就通过<strong>变量名</strong>代替这串数字来访问这块空间。</p><blockquote><p>可以简单理解为 我们新开了一个<strong>”储物柜“</strong>，并有着与其对应编号的钥匙。而<strong>变量名</strong>就是这个<strong>带编号的钥匙</strong>，我们可以根据钥匙的编号，找到对应的储物柜，对其进行操作</p></blockquote></li><li><p><strong>声明</strong>变量时，系统并不会开辟新空间，而是告诉编译器，这个变量已经存在了，接下来可以直接使用</p></li></ul><blockquote><p>声明变量并不是新开一个”储物柜“，而是提醒编译器，在之前已经有一个一样的”储物柜“了</p></blockquote><p>声明的作用，为了实现多个文件中的代码共享，<strong>仅定义一次变量后</strong>，可以通过<strong>多次声明在不同的文件中使用</strong></p><p>所以，我们在<strong>声明</strong>变量的时候<strong>不会为其显示初始化</strong>，因为这样就变成了<strong>定义</strong>，而失去了<strong>声明</strong>原本的意义</p><p><strong>初始值</strong></p><p>当<strong>定义变量</strong>的时候<strong>获得一个特定值</strong>，它就被<strong>初始化</strong>了</p><ul><li>初始化的值不一定要求数值型，也<strong>可以是任意复杂的表达式</strong></li><li>如果我们<strong>不显式的给出初始值</strong>，<strong>内置的数据类型</strong>变量会根据<strong>定义的位置</strong>决定<ul><li>定义在<strong>函数外</strong>的变量都会被<strong>初始化为0</strong></li><li>定义在函数内则<strong>不初始化</strong></li></ul></li></ul><p>如：<code>double price=109.99,discount=price*0.16</code></p><p><strong>初始化和赋值的区别</strong></p><p>在C++中，初始化和赋值是两种不同的操作</p><p><code>int a=1; //定义变量的时候得到了一个初值1，这是初始化</code></p><p><code>int b;//根据位置，可能初始化，也可能不初始化</code></p><p><code>b=2;//擦去原有的值，用2代替，这就是赋值</code></p><ul><li>初始化是在<strong>创建变量时给其一个初始值</strong></li><li>赋值是把<strong>当前变量的值擦除</strong>，而用一个<strong>新值代替</strong></li></ul><blockquote><p>这里要注意的是，<strong>赋值并不是把一个“柜子”里的物品移动到另外一个“柜子”</strong>,而是单独拿一份一模一样的物品<strong>拷贝</strong>过去。</p></blockquote><h3 id="2-2-2-标识符"><a href="#2-2-2-标识符" class="headerlink" title="2.2.2 标识符"></a>2.2.2 标识符</h3><p>C++标识符由<strong>字母，数字</strong>以及<strong>下划线</strong>组成，其中必须以<strong>字母或下划线</strong>开头</p><p>不能使用关键字作为标识符</p><hr><h2 id="2-3-复合类型"><a href="#2-3-复合类型" class="headerlink" title="2.3 复合类型"></a>2.3 复合类型</h2><p>一条语句是由<strong>基本数据类型</strong>和<strong>一个或多个声明</strong>符组成</p><p>基于其他类型定义的类型，<strong>指针和引用</strong>就是复合类型。<strong>引用的本质是指针常量，占用4个字节的空间</strong></p><h3 id="2-3-1-引用"><a href="#2-3-1-引用" class="headerlink" title="2.3.1 引用"></a>2.3.1 引用</h3><p>引用是为变量起<strong>另一个名字</strong>。</p><p>当我们把<strong>变量</strong>当成一个<strong>”储物柜“</strong>，<strong>变量名</strong>就是<strong>”带编号的钥匙“</strong>，而定义引用就相当于给<strong>“储物柜”</strong>再设置一个<strong>备用钥匙</strong>。</p><blockquote><p>比如：“储物柜”原本的编号是01，现在我们再给“储物柜”贴上一个“one”的标签，然后制作一个编号为“one”的钥匙，这样就可以通过两个钥匙找到同一个储物柜了</p></blockquote><p><strong>语法</strong>：</p><p><code>int a=10;</code></p><p><code>int &amp;A=a;    //A是a的另一个名字</code></p><p><code>int &amp;A;    //错误，引用必须初始化</code></p><ul><li>为引用赋值，实际上是把值赋给了<strong>与引用绑定的对象</strong></li></ul><blockquote><p>这里的意思是，我们通过<strong>备用钥匙</strong>来操作”储物柜”的存取等功能，实际对象还是<strong>原本的”储物柜“</strong></p></blockquote><p><strong>定义：</strong></p><p><strong>大部分引用</strong>的<strong>数据类型</strong>要和所绑定的变量<strong>严格匹配</strong>，并且<strong>只能绑定在变量</strong>上，不能绑定字面量等。</p><p><strong>注意</strong>：</p><ul><li>当我们<strong>定义引用</strong>时，引用的初始值就与变量<strong>绑定</strong>在一起，就<strong>不能</strong>将引用<strong>重新绑定</strong>在其他变量上。</li></ul><blockquote><p>就是说，当我们给一个<strong>“储物柜”</strong>设置一个<strong>“备用钥匙”</strong>之后，该<strong>“备用钥匙”</strong>作用于当前<strong>“储物柜”</strong>使用</p></blockquote><ul><li><strong>引用定义时就必须为其初始化</strong></li></ul><blockquote><p>我们在配置备用钥匙的时候，必须要有原本的钥匙才行</p></blockquote><ul><li><strong>强调：引用并非变量，而是将已有的变量起另外一个名字</strong></li></ul><blockquote><p>引用只是备用钥匙，而不是柜子</p></blockquote><h3 id="2-3-2-指针"><a href="#2-3-2-指针" class="headerlink" title="2.3.2 指针"></a>2.3.2 指针</h3><p><strong>指针本身就是一个变量</strong>，存放的其他变量的<strong>地址</strong>，允许对指针<strong>赋值</strong>和<strong>拷贝</strong>，可以先后指向不同变量。</p><blockquote><p>所以指针本身也是一个小柜子。只不过内部只存放其他变量的地址，也就是“柜子”的“钥匙”</p></blockquote><p><strong>获取对象地址</strong></p><p>指针存放着某个变量的<strong>地址</strong>，使用<strong>取地址符</strong>（<strong>&amp;</strong>）获取地址。</p><p><strong>语法</strong>：</p><p><code>int a=10;</code></p><p><code>int *p;</code></p><p><code>int *p=&amp;a;</code></p><p>上述这段话的意思，可以将其理解为，<strong>“将a柜子的钥匙，放到p柜子里”</strong></p><p><strong>注意</strong>：</p><ul><li>大部分指针类型要和它指向的变量类型严格匹配</li></ul><p><strong>指针值</strong></p><p>指针的值(地址)应属于下列4种状态</p><ol><li>指向一个对象（放着柜子的钥匙）</li><li>指向紧邻对象所占空间的下一个位置(放着不知道哪的钥匙)</li><li>空指针(没钥匙)</li><li>无效指针，上述之外的情况</li></ol><p>注意：</p><ul><li>尽管2，3种形式的指针有效，但它们并没有指向任何具体对象，所以此类指针<strong>不能被访问</strong></li></ul><p><strong>利用指针访问对象</strong></p><p>如果指针指向了一个对象，则运行用<strong>解引用符</strong>（<strong>*</strong>）来访问该对象</p><p><code>int a=42;</code></p><p><code>int *p=&amp;a;</code></p><p><code>cout&lt;&lt;*p //输出 42</code></p><p><strong>注意</strong>：</p><p><strong>&amp;</strong>和<strong>*</strong>的多重含义</p><p><code>int i=10;</code></p><ul><li><p>如果<strong>&amp;</strong> 跟着类型名出现，是引用    <code>int &amp;r=i;</code></p></li><li><p>如果<strong>*</strong> 跟着类型名出现，是指针    <code>int *p;</code></p></li><li><p>如果<strong>&amp;</strong> 出现在表达式中，就是取地址符    <code>p=&amp;i;</code></p></li><li><p>如果<strong>*</strong> 出现在表达式中，就是解引用符    <code>*p=i;</code></p></li></ul><p>解引用仅适用于确实指向某个对象的<strong>有效指针</strong></p><p><strong>空指针</strong></p><p>空指针不指向任何对象，在试图使用一个指针代码之前，先检查其是否为空</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p1=<span class="literal">nullptr</span>;<span class="comment">//等价于int *p1=0;</span></span><br><span class="line"><span class="keyword">int</span> *p2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *p3=<span class="literal">NULL</span>;<span class="comment">//等价于int *p1=0;</span></span><br></pre></td></tr></table></figure><p>注意：<strong>初始化所有指针</strong></p><p>如果使用了未初始化的指针，则它当前所占内存空间将被看作一个地址值，去访问一个本不存在的对象</p><p><strong>赋值和指针</strong></p><ul><li><p><strong>赋值永远改变的是等号左侧的对象</strong></p></li><li><p><strong>指针里面只能存放地址</strong></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="comment">//int *p=a;//错误 指针里面只能存放地址</span></span><br><span class="line"><span class="keyword">int</span> *p=&amp;a;<span class="comment">//正确，指针p的初始值改变，现在指向a的地址</span></span><br><span class="line">*p=<span class="number">20</span>;<span class="comment">//正确, 指针p解引用，实际改变a的值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-3-理解复合类型的声明"><a href="#2-3-3-理解复合类型的声明" class="headerlink" title="2.3.3 理解复合类型的声明"></a>2.3.3 理解复合类型的声明</h3><p><strong>指向指针的指针</strong></p><p>通过<strong>*</strong>的个数，可以区分指针的级别，<strong>**</strong>表示<strong>指向指针的指针</strong></p><blockquote><p>就是将<strong>“钥匙”</strong>到第一个指针内，然后将第一个指针的<strong>“钥匙”</strong>放到第二个指针内</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> *pi=&amp;a;<span class="comment">//将a的钥匙放入p内</span></span><br><span class="line"><span class="keyword">int</span> **ppi=&amp;pi<span class="comment">//将pi的钥匙放入ppi内</span></span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>面对复杂的语句，从<strong>右到左</strong>阅读是最简单的方法，离<strong>变量名最近的声明符对变量的类型影响最大</strong></p><hr><h2 id="2-4-const限定符"><a href="#2-4-const限定符" class="headerlink" title="2.4 const限定符"></a>2.4 const限定符</h2><p>使用关键字<strong>const</strong>对变量的类型修饰后，该变量的<strong>值不能被改变</strong>，所以<strong>const对象必须初始化</strong></p><p><strong>初始化和const</strong></p><p>注意：</p><p>上面指的值不能被改变，指的是const对象<strong>不能被赋值</strong>，它还是<strong>可以初始化</strong>和<strong>访问</strong>的。</p><blockquote><p>实际上，常量是在内存四区中的代码区，我们可以将其简单的理解为，被const修饰之后，该对象就会被到另一片区域展览，我们只有查看的权力，而不能做出修改</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">42</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci=i;<span class="comment">//正确；const初始化,将i的值拷贝给了ci(将物品i放入ci柜子后，再拿去展览)</span></span><br><span class="line"><span class="keyword">int</span> j=ci<span class="comment">//正确；将ci的值拷贝给j，并没有对ci的值进行操作(查看ci柜子的物品，将它照搬一份到j柜子，并没有对ci柜子进行操作)</span></span><br><span class="line">ci=<span class="number">10</span>；<span class="comment">//错误；因为给ci赋值的过程中，要先把原来的值擦除，但因为加了const限定，不能修改</span></span><br></pre></td></tr></table></figure><h3 id="2-4-1-const的引用"><a href="#2-4-1-const的引用" class="headerlink" title="2.4.1 const的引用"></a>2.4.1 const的引用</h3><p>可以把<strong>引用绑定到const对象</strong>上，我们称之为<strong>对常量的引用</strong></p><p>与普通引用不同的是，const引用绑定对象后就<strong>不能被修改</strong></p><blockquote><p>常量引用的本质是系统自动开辟一个<strong>临时变量</strong>，然后将临时变量<strong>初始化</strong>，最后再限定变量的<strong>值不能被修改</strong>。而常量名字其实就是临时变量的引用</p><p>我们可以常量引用理解为，新开了一个<strong>临时柜子</strong>，然后将其他柜子的物品<strong>拷贝</strong>过来，或者干脆自己放一些物品让它进行<strong>初始化</strong>操作，再给这个柜子设置一个<strong>备用钥匙</strong>，最后再给备用钥匙上贴上<strong>“标签”</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">42</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r1=i;<span class="comment">//正确,拷贝其他柜子物品放到临时柜子中做初始化</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r2=<span class="number">42</span>;<span class="comment">//正确，自己放置物品做初始化</span></span><br><span class="line"><span class="keyword">int</span> &amp;r3=<span class="number">42</span>;<span class="comment">//错误，非常量引用只是“钥匙”,不能放物品</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//系统默认执行操作</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> temp=i;<span class="comment">//系统自动开一个临时的柜子，并用复制其他柜子物品初始化，给&quot;钥匙&quot;temp贴上标签</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r1=temp;<span class="comment">//给柜子设置一个备用钥匙，并给r1钥匙贴上标签</span></span><br></pre></td></tr></table></figure><p>所以由上我们可以知道：</p><ul><li><p>初始化<strong>常量引用</strong>时运行用<strong>任意表达式</strong>作为初始值</p></li><li><p><strong>常量引用</strong>可以引用<strong>非常量的对象</strong></p></li></ul><h3 id="2-4-2-指针和const"><a href="#2-4-2-指针和const" class="headerlink" title="2.4.2 指针和const"></a>2.4.2 指针和const</h3><p><strong>指向常量的指针</strong>，就被称为<strong>常量指针</strong>，书中也叫<strong>底层const</strong>。<strong>常量指针</strong>不能用于改变<strong>其对象</strong>的值。</p><p>想要存放<strong>常量对象的地址</strong>，只能使用<strong>指向常量的指针</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> A=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* p=&amp;A;</span><br><span class="line">*p=<span class="number">20</span>;<span class="comment">//错误，指针柜中的钥匙A被const加以限制，不能对柜子A的数据进行修改</span></span><br><span class="line"> A=<span class="number">20</span>;<span class="comment">//正确，</span></span><br></pre></td></tr></table></figure><blockquote><p>因为常量指针就是为了指向常量所定义的，所以不管该对象是否为常量，都不能通过常量指针去改变对象</p></blockquote><p>注意：</p><ul><li>要想存放<strong>常量对象</strong>的地址，只能使用<strong>常量指针</strong></li><li>指针的类型必须与其所指对象保持一致，但允许<strong>指针常量指向非常量对象</strong>。</li><li><strong>指针常量</strong>仅仅是<strong>不能通过指针改变对象的值</strong>，但用<strong>其他方式改变对象的值</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> *p1=&amp;a;<span class="comment">//错误，非常量指针没有const加以限制，就导致可以对常量进行修改</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p1=&amp;a;<span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p2=&amp;b;<span class="comment">//正确，因为const限制的是指针柜中的钥匙a,而不是钥匙p</span></span><br><span class="line"></span><br><span class="line">*p2=<span class="number">30</span>;<span class="comment">//错误，因为const限制的是指针柜中的钥匙a，并没有限制原本的钥匙a</span></span><br><span class="line">b=<span class="number">20</span>;<span class="comment">//正确</span></span><br></pre></td></tr></table></figure><p><strong>指针常量</strong></p><p>当<strong>指针本身是常量</strong>时，就被称为<strong>指针常量</strong>。那么当前指针的<strong>值就不能改变</strong>，也就是指针<strong>指向的对象的地址不能变</strong>。</p><blockquote><p>也就是说，const这个警告“标签”,是贴在“指针柜”的钥匙上的</p></blockquote><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/%E6%8C%87%E9%92%88%E5%B8%B8%E9%87%8F.png" class="" title="指针常量"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> A=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> p=&amp;A;</span><br><span class="line">*p=<span class="number">20</span>;<span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> B=<span class="number">30</span>；</span><br><span class="line"> p=&amp;B;<span class="comment">//错误，指针柜所对应的钥匙被限制，不能修改指针贵的内容  </span></span><br></pre></td></tr></table></figure><p>总结：如何判断是常量指针，还是指针常量</p><p>从变量名开始，右往左读，判断const 和 * 的位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* p=&amp;a;<span class="comment">//const在前，*在后，就是常量指针</span></span><br><span class="line"><span class="keyword">int</span>* <span class="keyword">const</span> p=&amp;a;<span class="comment">//*在前 ，const在后，就是指针常量</span></span><br></pre></td></tr></table></figure><h2 id="2-5-处理类型"><a href="#2-5-处理类型" class="headerlink" title="2.5 处理类型"></a>2.5 处理类型</h2><h3 id="2-5-1-类型别名"><a href="#2-5-1-类型别名" class="headerlink" title="2.5.1 类型别名"></a>2.5.1 类型别名</h3><p>类型别名是一个名字，它是某种<strong>类型</strong>的同义词</p><p>语法：</p><p><code>typedef</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> wages;<span class="comment">//wages 是 double 的同义词</span></span><br><span class="line">wages a=<span class="number">1.0</span>;</span><br></pre></td></tr></table></figure><p>作用：</p><p>含有typedef的声明语句定义的 不是变量 而<strong>是类型别名</strong></p><p>也可以使用<strong>别名声明</strong>来实现同样的操作</p><p>语法：</p><p><code>using</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> a = <span class="keyword">int</span> ;</span><br><span class="line">a b = <span class="number">10</span>;<span class="comment">//正确，a是int的同义词 b是变量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-5-2-auto-类型说明符"><a href="#2-5-2-auto-类型说明符" class="headerlink" title="2.5.2 auto 类型说明符"></a>2.5.2 auto 类型说明符</h3><p>auto类型说明符，能让编译器通过初始值来<strong>推算变量的类型</strong>，所以auto定义的变量必须有初始值</p><p>因为一条声明语句中只能有<strong>一个基本数据类型</strong>，所以auto能在一条语句中声明<strong>多个变量</strong></p><p><strong>复合类型、常量和auto</strong></p><p>编译器会<strong>适当的改变</strong>auto类型的<strong>结果</strong> 使其更符合初始化</p><p>列如：</p><p>当引用被当作初始值时，真正参与初始化对象的是<strong>引用对象的值</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;r=i;</span><br><span class="line"><span class="keyword">auto</span> b=r;<span class="comment">//auto将推导出整型</span></span><br></pre></td></tr></table></figure><hr><h1 id="第3章：字符串、向量和数组"><a href="#第3章：字符串、向量和数组" class="headerlink" title="第3章：字符串、向量和数组"></a>第3章：字符串、向量和数组</h1><h2 id="3-1-命名空间"><a href="#3-1-命名空间" class="headerlink" title="3.1 命名空间"></a>3.1 命名空间</h2><p>我们所用到的库函数，基本上都属于命名空间std，使用<strong>using声明</strong>后，就可以<strong>直接访问命名空间的名字</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> :: <span class="built_in">std</span>;<span class="comment">//或者using namespace std;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-2-标准库类型string"><a href="#3-2-标准库类型string" class="headerlink" title="3.2 标准库类型string"></a>3.2 标准库类型string</h2><p>string表示<strong>可变长的字符序列</strong>，使用string类型必须包含string头文件(但实际使用VS编程中，不包含似乎也可以？)</p><h3 id="3-2-1-定义和初始化string对象"><a href="#3-2-1-定义和初始化string对象" class="headerlink" title="3.2.1 定义和初始化string对象"></a>3.2.1 定义和初始化string对象</h3><p><strong>string初始化</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1;<span class="comment">//默认初始化，s1是一个空字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s2=s1;<span class="comment">//将s1中的字符拷贝到s2中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s3=<span class="string">&quot;hiya&quot;</span><span class="comment">//将该字面值拷贝到s3中</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">string</span> s4(<span class="number">10</span>,<span class="string">&#x27;c&#x27;</span>)<span class="comment">//s4的内容是cccccccccc</span></span><br></pre></td></tr></table></figure><p><strong>直接初始化和拷贝初始化</strong></p><ul><li><p>如果<strong>使用</strong>等号初始化一个变量，实际上就是执行<strong>拷贝初始化</strong></p></li><li><p>如果<strong>不使用</strong>等号，则执行的直接初始化</p></li></ul><h3 id="3-2-2-string对象上的操作"><a href="#3-2-2-string对象上的操作" class="headerlink" title="3.2.2 string对象上的操作"></a>3.2.2 string对象上的操作</h3><p><strong>读写string对象</strong></p><ul><li>string读写单个对象</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> s1;<span class="comment">//初始化空字符串</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s1;<span class="comment">//从键盘上输入的内容读入s1中</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出s1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当我们输入&quot;   Hello World&quot;时，只会输出&quot;Hello&quot;</span></span><br></pre></td></tr></table></figure><ul><li>string读写多个对象</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> s1;<span class="comment">//初始化空字符串</span></span><br><span class="line"><span class="built_in">string</span> s2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s1&gt;&gt;s2;<span class="comment">//从键盘上输入的内容读入s1中</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt;s2&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//输出s1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当我们输入&quot;   Hello World&quot;时 会输出&quot;HelloWorld&quot; 中间并不会有空格</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：string对象会<strong>忽略开头的空白</strong>，并从<strong>第一个真正的字符</strong>开始读取，直到遇到<strong>下一处空白</strong>为止</p><p><strong>使用getline读取一整行</strong></p><ul><li>getline函数的<strong>参数</strong>是一个<strong>输入流</strong>和一个<strong>string对象</strong></li><li>函数从给定的输入流中读取内容，直到遇见换行符为止(<strong>换行符也读取进来</strong>),然后将内容再存入到string对象中(<strong>不存换行符</strong>)</li><li>getline只要一遇见换行符就结束，如果一开始输入的是换行符，那么就会得到一个空字符</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> line;</span><br><span class="line"><span class="keyword">while</span> (getline(<span class="built_in">cin</span>,line))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; line &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>string 的 empty和size</strong></p><h2 id="3-3-标准库类型-vector"><a href="#3-3-标准库类型-vector" class="headerlink" title="3.3 标准库类型 vector"></a>3.3 标准库类型 vector</h2><p><strong>vector</strong> 表示<strong>类型相同</strong>的对象的<strong>集合</strong>。每个对象都有一个与之对应的<strong>索引</strong>，用于<strong>访问对象</strong></p><p>注意：</p><ul><li>vector是<strong>类模板</strong>，而非类型</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所以由vector生成的类型必须包含vector中元素的类型</span></span><br><span class="line">vector&lt;<span class="built_in">int</span>&gt; a;</span><br></pre></td></tr></table></figure><ul><li>因为引用不是对象，所以vector<strong>不能容纳引用作为对象</strong></li></ul><h3 id="3-3-1-定义和初始化vector对象"><a href="#3-3-1-定义和初始化vector对象" class="headerlink" title="3.3.1 定义和初始化vector对象"></a>3.3.1 定义和初始化vector对象</h3><p><strong>定义vector对象的常用方法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;T&gt; v1;<span class="comment">//定义空的vector，潜在元素是T类型的，执行默认初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;T&gt; <span class="title">v2</span><span class="params">(v1)</span></span>;<span class="comment">//将v1中所有元素拷贝到v2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;T&gt; <span class="title">v3</span><span class="params">(n)</span></span>;<span class="comment">//v3中包含了n个元素</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;T&gt; <span class="title">v4</span><span class="params">(n,<span class="number">4</span>)</span></span>;<span class="comment">//v4中包含n个元素，每个元素的值都为4</span></span><br></pre></td></tr></table></figure><p>作用：</p><ul><li>先定义一个空的vector，然后运行时 再逐一添加元素</li><li>也可以定义vector对象时就指定元素的初始值，但对象的<strong>类型必须相同</strong></li></ul><p><strong>列表初始化vector对象</strong></p><p>用<strong>花括号</strong>括起来的0个或者多个初始元素值将被赋给vector对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v1&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;an&quot;</span>,<span class="string">&quot;the&quot;</span>&#125;;<span class="comment">//列表初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">v2</span><span class="params">(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;an&quot;</span>,<span class="string">&quot;the&quot;</span>)</span></span>;<span class="comment">//错误，是花括号，不是圆括号</span></span><br></pre></td></tr></table></figure><p><strong>值初始化</strong></p><p>概念：</p><p>一般在创建vector对象时，可以<strong>只提供元素数量</strong>，而<strong>不用给其初始化</strong>。</p><p>因为库会根据元素的<strong>类型</strong> 自动进行 <strong>值初始化</strong>操作</p><ul><li>如果是内置的数据类型，如int，那么元素的初始值就为0</li><li>如果是类 类型，如 string，那么元素就由类默认初始化</li></ul><p>列表初始化还是元素数量？</p><ul><li>圆括号：可以说提供的值是用来<strong>构造vector对象</strong>的</li><li>花括号：<strong>优先</strong>进行<strong>列表初始化操作</strong>，只有确认<strong>无法执行</strong>列表初始化后，才尝试<strong>构造对象</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v1</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">//v1有10个元素，每个元素都是0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2&#123;<span class="number">10</span>&#125;;<span class="comment">//v2有1个元素，值为10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;v3&#123;<span class="number">10</span>&#125;;<span class="comment">//v3无法进行初始化列表操作，会尝试构造对象，所以有10个默认构造的元素</span></span><br></pre></td></tr></table></figure><h3 id="3-3-2-向vector对象中添加元素"><a href="#3-3-2-向vector对象中添加元素" class="headerlink" title="3.3.2 向vector对象中添加元素"></a>3.3.2 向vector对象中添加元素</h3><p>对于vector对象来说，直接初始化一般适用于三种情况</p><ol><li>初始值已知且数量少(直接赋值)</li><li>初始值是另一个vector对象的副本(拷贝)</li><li>所有元素的初始值相同(初始化列表)</li></ol><p>其他情况，一般是 创建一个<strong>空vector</strong>，然后再利用成员函数<strong>push_back</strong>向其添加元素</p><p><strong>push_back</strong>：负责把一个<strong>值</strong> 当成vector对象的<strong>尾元素 **</strong>压倒尾端**</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;<span class="comment">//创建空vector对象</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;num)<span class="comment">//读入数据</span></span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(num);<span class="comment">//将数据依次赋予元素并压入栈中</span></span><br><span class="line">sum++;<span class="comment">//计算容器中目前的元素</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sum; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;v1中的值为：&quot;</span> &lt;&lt; v1[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-迭代器"><a href="#3-4-迭代器" class="headerlink" title="3.4 迭代器"></a>3.4 迭代器</h2><p>与指针类似，迭代器提供了对象的<strong>间接</strong>访问。其<strong>对象是</strong>容器中的<strong>元素</strong>或者string对象中的<strong>字符</strong></p><p>作用：</p><p>使用迭代器可以<strong>间接访问某个元素</strong>，也能从<strong>一个元素移动到另外一个元素</strong></p><p>注意：</p><p>迭代器有 有效和无效之分</p><p>有效：</p><ul><li>指向某个元素</li><li>指向容器尾元素的下一个位置</li></ul><p>其余都是无效</p><h3 id="3-4-1-使用迭代器"><a href="#3-4-1-使用迭代器" class="headerlink" title="3.4.1 使用迭代器"></a>3.4.1 使用迭代器</h3><p>和指针不一样，迭代器不适用取地址符。</p><p>而是返回迭代器的<strong>begin</strong>和<strong>end</strong>成员</p><ul><li><strong>begin</strong>成员负责指向第一个元素</li><li><strong>end</strong>成员负责指向尾元素的下一个位置，即end成员如果<strong>返回空</strong>，说明已经处理完<strong>所有元素</strong></li><li>如果 容器为空，那么<strong>begin</strong>和<strong>end</strong>返回<strong>同一个迭代器</strong></li></ul><h2 id="3-5-数组"><a href="#3-5-数组" class="headerlink" title="3.5 数组"></a>3.5 数组</h2><p>数组是存放<strong>类型相同</strong>对象的<strong>容器</strong>，这些对象本身没有名字，需要通过其所在的<strong>位置</strong>访问</p><p>数组的<strong>大小</strong>是确定<strong>不变</strong>，不能随意向数组中增加元素</p><h3 id="3-5-1-定义和初始化内置数组"><a href="#3-5-1-定义和初始化内置数组" class="headerlink" title="3.5.1 定义和初始化内置数组"></a>3.5.1 定义和初始化内置数组</h3><p>数组的声明：<code>a[d]</code></p><ul><li>其中a是数组的名字，d是数组的<strong>个数</strong></li><li><p>数组元素的<strong>个数</strong>在编译时应该是<strong>已知</strong>的</p></li><li><p><strong>定义数组时必须指定它的类型</strong>，并且其元素应为<strong>对象</strong>，所以<strong>不存在引用的数组</strong></p></li></ul><p><strong>显式初始化数组元素</strong></p><ul><li>如果<strong>没有</strong>给定数组<strong>个数</strong>，那么编译器会根据<strong>初始值的数量推测</strong>出来</li><li>如果<strong>给定</strong>了数组个数，那么初始值的总数就<strong>不能超出指定大小</strong></li><li>如果数组个数<strong>大于</strong>初始值总数，那么剩下的元素会被<strong>初始化成默认值</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr1[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;<span class="comment">//编译器会自动推测数组个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr2[<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;<span class="comment">//错误，数组越界</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>arr3[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;<span class="comment">//最后的数组为&#123;1,2,3,0,0&#125;</span></span><br></pre></td></tr></table></figure><p><strong>字符数组的特殊性</strong></p><ul><li>当使用<strong>字符串</strong>对<strong>字符数组</strong>进行<strong>初始化</strong>时，字符串结尾处的<strong>空字符</strong>也会拷贝进去</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> arr1[]=&#123;<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;+&#x27;</span>&#125;;<span class="comment">//正确，列表初始化，没有空字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> arr2[]=&#123;<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;<span class="comment">//正确，列表初始化，含有显示的空字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> arr3[<span class="number">3</span>]=<span class="string">&quot;C++&quot;</span>;<span class="comment">//错误，没有多余的空间存放字符串结尾处的空字符</span></span><br></pre></td></tr></table></figure><p><strong>不允许拷贝和赋值</strong></p><ul><li>不能将数组的内容拷贝给其他数组作为初始值，也不能给其他数组赋值</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr1[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> arr2[]=a;<span class="comment">//错误，不允许将一个数组初始化其他数组</span></span><br><span class="line">arr2=arr1;<span class="comment">//错误</span></span><br></pre></td></tr></table></figure><p><strong>理解复杂的数组声明</strong></p><p>指针数组：存放指针的数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> d = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>* p1 = &amp;a;</span><br><span class="line"><span class="keyword">int</span>* p2 = &amp;b;</span><br><span class="line"><span class="keyword">int</span>* p3= &amp;c;</span><br><span class="line"><span class="keyword">int</span>* p4 = &amp;d;</span><br><span class="line"><span class="keyword">int</span>* ptr[<span class="number">4</span>] = &#123; p1,p2,p3,p4 &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p1 &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//指针所指对象的地址</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ptr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//指针所指对象的地址</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *ptr &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//指针所指对象的地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; &amp;p1 &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//0号位指针本身的地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;*ptr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//解引用0号位指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84.png" class="" title="指针数组"><p><strong>数组指针</strong>：</p><p>指向数组的指针，其<strong>数组名就是指针本身</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">4</span>] = &#123; <span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span> &#125;;<span class="comment">//定义数组</span></span><br><span class="line"><span class="keyword">int</span>(*ptr)[<span class="number">4</span>] = &amp;arr;<span class="comment">//定义指向数组的指针</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>(*ptr)[<span class="number">5</span>]=&amp;arr;<span class="comment">//错误,数组和数组指针的元素个数必须相同</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;* (*ptr) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//通过数组指针解引用访问数组的0号元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88.png" class="" title="数组指针"><p>注意：</p><ul><li><strong>数组</strong>和<strong>数组指针</strong>的元素<strong>个数</strong>必须<strong>相同</strong></li><li>可以通过<strong>数组指针解引用访问数组</strong></li></ul><p><strong>总结</strong>：</p><p>面对复杂的数组声明，应该由<strong>数组名</strong>开始然后<strong>从右往左</strong>读</p><h3 id="3-5-2-访问数组元素"><a href="#3-5-2-访问数组元素" class="headerlink" title="3.5.2 访问数组元素"></a>3.5.2 访问数组元素</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将10学生的成绩存入数组中</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line"><span class="keyword">int</span> grade;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; grade;</span><br><span class="line">arr[i] = grade;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-指针和数组"><a href="#3-5-3-指针和数组" class="headerlink" title="3.5.3 指针和数组"></a>3.5.3 指针和数组</h3><p>在C++中，使用数组的时候，编译器一般会把它<strong>转换成指针</strong></p><p><strong>本质</strong>：</p><ul><li>在使用到<strong>数组名</strong>的地方，编译器会自动的将其<strong>替换</strong>为一个<strong>指向数组首元素</strong>的<strong>指针</strong></li></ul><blockquote><p>所以，在一些情况下，数组的操作实际上是指针的操作</p></blockquote><ul><li>指针也是<strong>迭代器</strong>，vector和string支持的运算，数组的指针也全部支持</li></ul><p>特点：</p><ol><li>当数组作为一个<strong>auto</strong> 变量的初始值时，得到的推断<strong>是指针</strong>，而<strong>不是</strong>数组。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr1[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">arr2</span><span class="params">(arr1)</span></span>;<span class="comment">//arr2 是一个整型指针，指向arr1的第一个元素</span></span><br><span class="line">arr2=<span class="number">4</span>;<span class="comment">//错误，arr2 是指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//编译器内部实际上发生了以下的转换</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">arr2</span><span class="params">(&amp;arr[<span class="number">0</span>])</span></span>;<span class="comment">//所以arr2 是int* 类型</span></span><br></pre></td></tr></table></figure><ol><li>通过指针也能遍历数组中的元素，我们只需要得到数组<strong>第一个元素</strong>的指针和尾元素<strong>下一个位置</strong>的指针</li></ol><blockquote><p>在C++ 11 中引入了begin 和 end 函数，其功能与容器中的两个同名成员函数类似</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>* beg = begin(arr);<span class="comment">//指向arr首元素的指针</span></span><br><span class="line"><span class="keyword">int</span>* last = end(arr);<span class="comment">//指向arr尾元素的下一个位置指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">while</span> (beg != last) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *beg &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">beg++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>给指针加上某个整数，结果仍为指针。</p></li><li><p>两个指针<strong>相减</strong>的结果是他们之间的<strong>距离</strong>。参与运算的两个指针必须指向<strong>同一个数组</strong>当中的元素</p></li></ol><blockquote><p>如果两个指针分别指向不相关的对象，则不能比较他们。</p></blockquote><p><strong>总结</strong>：</p><ul><li>使用<strong>数组类型</strong>的对象，实际上是使用一个<strong>指向</strong>该<strong>数组首元素</strong>的<strong>指针</strong></li><li>指针也是<strong>迭代器</strong>。所以给指针加上某个整数，相当于新指针位移了改整数的位置</li></ul><h1 id="第6章：函数"><a href="#第6章：函数" class="headerlink" title="第6章：函数"></a>第6章：函数</h1><p>函数是一个<strong>有名字的代码块</strong>，我们通过调用函数执行相应代码，函数有<strong>0个</strong>或者<strong>多个</strong>参数，通常产生<strong>一个</strong>结果。</p><h2 id="6-1-函数基础"><a href="#6-1-函数基础" class="headerlink" title="6.1 函数基础"></a>6.1 函数基础</h2><p>一个函数包括以下部分：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;<span class="comment">//返回类型 函数名 0个或多个形参组成的函数体</span></span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">&#125;<span class="comment">//语句块</span></span><br></pre></td></tr></table></figure><p>函数调用完成两项工作：</p><ul><li>用实参初始化对应的形参</li><li>将控制权转移给被调函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=b;</span><br><span class="line">    b=a;</span><br><span class="line">    a=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">5</span>;</span><br><span class="line">    swap(A,B);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行函数时，实参会用<strong>字面值 </strong> <strong>隐式</strong>的定义并初始化它的形参。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">3</span>;<span class="comment">//实参隐式初始化形参</span></span><br><span class="line"><span class="keyword">int</span>b=<span class="number">5</span>;</span><br></pre></td></tr></table></figure><p><strong>形参和实参</strong></p><p>实参是形参的<strong>初始值</strong>。二者因为作用域不同，所以可以同名，但实际上是两个不同的变量</p><ul><li>形参<strong>类型</strong>和<strong>个数</strong>要与形参相匹配。(类型隐式转换也可以)</li></ul><hr><h1 id="第7章：类"><a href="#第7章：类" class="headerlink" title="第7章：类"></a>第7章：类</h1><p>在C++中，我们使用<strong>类</strong> <strong>定义</strong> <strong>自己</strong>的数据类型。通过自定义的数据类型解决更多问题</p><p>类的基本思想是<strong>数据抽象</strong>和<strong>封装</strong></p><ul><li>数据抽象是一种依赖于<strong>接口</strong>和<strong>实现</strong>分离的编程，<strong>封装</strong>实现了该步骤</li><li>封装后的类隐藏了它的实现细节，只能使用接口而无法访问实现部分</li></ul><h2 id="7-1-定义抽象数据类型"><a href="#7-1-定义抽象数据类型" class="headerlink" title="7.1 定义抽象数据类型"></a>7.1 定义抽象数据类型</h2><h3 id="7-1-1-类和对象"><a href="#7-1-1-类和对象" class="headerlink" title="7.1.1 类和对象"></a>7.1.1 类和对象</h3><p><strong>类</strong>是一种<strong>自定义</strong>数据类型的声明，而<strong>对象</strong>是类这种数据类型的一个<strong>变量</strong></p><blockquote><p>可以将类理解为图纸，而对象就是根据图纸建造起来的房间</p></blockquote><p><strong>this 指针</strong></p><blockquote><p>当对象访问成员函数时，函数内部会<strong>隐式</strong>的将 该对象的地址存放在一个名为<strong>this</strong>的<strong>常量</strong>指针内</p></blockquote><ul><li>this指针中存放的是<strong>对象地址</strong></li><li><strong>对象</strong>访问其中的成员<strong>变量</strong>使用<strong>点</strong>运算符(<strong>.</strong>)</li><li>在成员函数<strong>内部</strong>，可以<strong>直接</strong>使用对象的成员，因为任何对类成员的直接访问都被看成<strong>this指针的隐式引用</strong></li><li>this指针是一个<strong>常量</strong>指针，所以不允许改变其中保存的地址</li></ul><h3 id="7-1-4-构造函数"><a href="#7-1-4-构造函数" class="headerlink" title="7.1.4 构造函数"></a>7.1.4 构造函数</h3><p>定义：</p><p>类通过<strong>一个或几个</strong>特殊的成员函数来<strong>控制其对象的初始化</strong>过程</p><p>作用：</p><p>初始化类对象的数据成员，只要类的对象被创建，就会执行构造函数</p><p>特征：</p><ul><li>构造函数的名字和<strong>类名相同</strong></li><li><strong>没有返回值</strong></li><li>构造函数可以有参数，可以发生重载</li><li>一个类可以包含多个构造函数</li><li>构造函数不能被声明成const</li></ul><blockquote><p>const对象在构造函数完成初始化之后，才能真正取得其“常量”属性。所以const对象在初始化的过程中可以修改它的值</p></blockquote><p><strong>默认构造函数</strong></p><p>定义：</p><p>类通过一个特殊的构造函数来控制默认初始化的过程</p><p>作用：</p><p>当我们的类没有显示的定义构造函数时，编译器会隐式的定义默认构造函数</p><p>语法：</p><p>默认构造函数无需任何实参</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span>&#123;</span></span><br><span class="line">    Room()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构造函数初始值列表</strong></p><p>它负责为新创建对象的一个或多个数据成员赋初值</p><p>语法：<code>构造函数():属性1(值1),属性2(值2)...&#123;&#125;</code></p><h3 id="7-1-5-拷贝、赋值和析构"><a href="#7-1-5-拷贝、赋值和析构" class="headerlink" title="7.1.5 拷贝、赋值和析构"></a>7.1.5 拷贝、赋值和析构</h3><hr><h2 id="7-2-访问控制与封装"><a href="#7-2-访问控制与封装" class="headerlink" title="7.2 访问控制与封装"></a>7.2 访问控制与封装</h2><p> 在C++中，使用<strong>访问说明符</strong>加强类的封装性</p><p><strong>访问权限</strong>：</p><ul><li><strong>public</strong>成员定义<strong>类的接口</strong>，使得该说明符之后的成员在<strong>整个程序可以被访问</strong></li><li><strong>private</strong> 部分隐藏了类的实现细节，只有类的成员可以访问，类外不能访问</li></ul><p><strong>class</strong>和<strong>struct</strong>：</p><p>在C++中，class和struct 的唯一区别就是，两者<strong>默认的访问权限不一样</strong></p><ul><li>class 关键字默认访问权限是<strong>private</strong>，在继承时也是<strong>私有继承</strong></li><li>而struct 关键字默认访问权限是<strong>public</strong>，在继承时是<strong>公有继承</strong></li></ul><h3 id="7-2-1-友元"><a href="#7-2-1-友元" class="headerlink" title="7.2.1 友元"></a>7.2.1 友元</h3><p>类可以<strong>允许其它类或者函数访问它的非公有成员</strong>，只需要在该类或该函数前加 <strong>friend</strong> 关键字</p><p><strong>作用</strong>：</p><p><strong>在私有访问权限下，能够访问类中的成员</strong></p><p><strong>特点</strong>：</p><ul><li>友元声明只能出现在<strong>类定义的内部</strong></li><li>友元<strong>不是类成员</strong>，不受类中的访问控制权限的影响</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>封装的好处：</p><ul><li>确保代码不会无意破坏对象的状态</li><li>被封装的类的具体实现细节可以随时改变</li></ul><hr><h2 id="7-3-类的其它特性"><a href="#7-3-类的其它特性" class="headerlink" title="7.3 类的其它特性"></a>7.3 类的其它特性</h2><h3 id="7-3-1-内联函数"><a href="#7-3-1-内联函数" class="headerlink" title="7.3.1 内联函数"></a>7.3.1 内联函数</h3><p>一些<strong>规模较小</strong>的函数适合于被声明成<strong>内联函数</strong>，而类内部的<strong>成员函数</strong>是自动 <strong>inline </strong>的</p><p><strong>作用</strong>：</p><p><strong>加快程序允许时的效率</strong></p><p>特点：</p><ul><li>类内部的<strong>成员函数</strong>默认都是内联函数</li><li>也可以在<strong>类外部</strong>用 <strong>inline</strong> 关键字显示声明内联函数 </li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、将普通函数声明为内联函数</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、</span></span><br></pre></td></tr></table></figure><h1 id="第12章：动态内存"><a href="#第12章：动态内存" class="headerlink" title="第12章：动态内存"></a>第12章：动态内存</h1><p><strong>常量存储区</strong>：特殊的区域，里面存放常量</p><p><strong>静态内存</strong>：static对象在<strong>使用之前分配</strong>，在<strong>程序结束时销毁</strong></p><ol><li><strong>静态变量</strong></li><li><strong>全局变量</strong></li></ol><p><strong>栈内存</strong>：仅在<strong>定义的程序块</strong>运行时才存在</p><ol><li>保存<strong>函数内的非static对象</strong>，一般是局部变量和函数参数等</li></ol><p><strong>堆内存</strong>：堆内的对象是<strong>动态分配</strong>的，必须由程序员手动销毁</p><ol><li>利用 <strong>new</strong> 运算符创建的对象。delete 销毁对象</li></ol><p>总结：</p><ol><li>静态内存和栈内存都是由<strong>编译器自动创建和销毁</strong></li><li><strong>堆内存</strong>由程序<strong>手动创建和手动销毁</strong></li></ol><h2 id="12-1-动态内存与智能指针"><a href="#12-1-动态内存与智能指针" class="headerlink" title="12.1 动态内存与智能指针"></a>12.1 动态内存与智能指针</h2><p>C++中使用 <strong>new</strong> 运算符 在动态内存中<strong>为对象分配空间</strong>，并<strong>返回一个指向该对象的指针</strong></p><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20220324104614405.png" class="" title="image-20220324104614405"><p>使用 <strong>delete</strong> 运算符 <strong>接受一个动态对象的指针</strong>，<strong>销毁该对象</strong>，并<strong>释放与之关联的内存</strong></p><blockquote><p>由于使用动态内存很容易出现问题，当我们忘记释放内存时，就会造成内存泄漏。</p><p>所以新标准库提供了两种智能指针来动态管理对象</p></blockquote><p><strong>智能指针的作用：</strong></p><ul><li>可以<strong>自动释放所指向的对象</strong></li></ul><h3 id="12-1-1-shared-ptr类"><a href="#12-1-1-shared-ptr类" class="headerlink" title="12.1.1 shared_ptr类"></a>12.1.1 shared_ptr类</h3><p>智能指针也是<strong>模板</strong>。所以，当我们创建智能指针时，必须提供 <strong>指针可以指向的类型</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="built_in">string</span>&gt; p1;<span class="comment">//可以指向string</span></span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;&gt; p2;<span class="comment">//可以指向int的list</span></span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li>shared_ptr <strong>允许多个指针指向同一个对象</strong></li><li><strong>默认初始化</strong>的智能指针是一个空指针</li></ul><p><strong>使用方法：</strong></p><ul><li>智能指针的使用方法与普通指针类似</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//智能指针都能支持的操作</span></span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;T&gt; p;<span class="comment">//初始化一个空智能指针，可以指向类型为T的对象</span></span><br><span class="line"><span class="keyword">if</span>(p)&#123;&#125;<span class="comment">//将p作为一个判断条件，若p指向了一个对象，则为true</span></span><br><span class="line">*p;<span class="comment">//解引用p，获得它指向的对象</span></span><br><span class="line">p-&gt;mem;<span class="comment">//等价于(*p).mem</span></span><br><span class="line">p.get();<span class="comment">//返回智能指针中保存的指针。若智能指针释放了其对象，返回的指针所指向对象也就消失</span></span><br><span class="line"></span><br><span class="line">swap(p,q);<span class="comment">//交换两个智能指针中的指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//shared_ptr独有的操作</span></span><br><span class="line">make_shared&lt;T&gt;(args);<span class="comment">//返回一个shared_ptr,指向一个动态分配类型为T的对象，并用args初始化此对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;T&gt;p(q);<span class="comment">//p是 shared_ptr q的拷贝。此操作会递增q中的计数器</span></span><br></pre></td></tr></table></figure><p><strong>make_shared 函数</strong></p><p>最安全的分配和使用动态内存的方法，就是调用<strong>make_shared</strong> 标准库函数</p><p>该函数会<strong>在动态内存中分配一个对象并初始化它</strong>，<strong>返回指向此对象的shared_ptr</strong>。</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//p3指向一个值为42的int类型的shared_ptr</span></span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; p3 = make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//p4指向一个值为&quot;999&quot;的</span></span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="built_in">string</span>&gt; p4 = make_shared&lt;<span class="built_in">string</span>&gt;(<span class="number">3</span>,<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过使用auto定义一个对象来保存make_shared的结果</span></span><br><span class="line"><span class="keyword">auto</span> p5 = make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">42</span>);</span><br></pre></td></tr></table></figure><blockquote><p>当我们传递int时，make_shared<int>就会调用相应的构造函数</p><p>若不传递任何参数，对象就会进行值初始化</p></blockquote><p><strong>shared_ptr的拷贝和赋值</strong></p><p>每个shared_ptr都有一个关联的引用计数。它表示<strong>当前有多少的shared_ptr指向同一对象</strong></p><p>当增加一个shared_ptr指向同一个对象，引用计数就会递增</p><p>若shared_ptr指向了其它对象，或者被销毁时，引用计数就会递减</p><p>一旦shared_ptr的计数器变为0，它就会自动释放自己所管理的对象</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> p = make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">42</span>);</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">q</span><span class="params">(p)</span></span>;<span class="comment">//q拷贝p中的地址，与p指向同一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> r = make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">42</span>);</span><br><span class="line">r = q;<span class="comment">//将q的地址赋值给r，这样r就会跟p，q指向同一个对象，但r原来的对象没有引用者，会自动释放</span></span><br></pre></td></tr></table></figure><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20220505221922334.png" class="" title="image-20220505221922334"><p><strong>shared_ptr 自动销毁管理对象并释放内存</strong></p><p>当指向对象的最后一个shared_ptr 被销毁时，shared_ptr 类就会调用<strong>析构函数</strong>完成销毁工作，并释放内存</p><p>所以当我们需要销毁对象时，只需要销毁指向它的所有shared_ptr 就行，否则程序仍会正确允许，浪费内存</p><p><strong>使用动态生存期的资源的类</strong></p><p>程序一般出于以下三种原因使用动态内存：</p><ul><li>不知道自己需要使用多少对象</li><li>不知道所需对象的准确类型</li><li>需要在多个对象间共享数据</li></ul><p><strong>容器类</strong>是出于第一种原因而使用动态内存的典型例子</p><p>而类的<strong>拷贝构造和拷贝赋值</strong>就是出于第三种原因而使用动态内存的例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Blob&lt;<span class="built_in">string</span>&gt; b1;</span><br><span class="line">&#123;<span class="comment">//设置一个作用域</span></span><br><span class="line">    Blob&lt;<span class="built_in">string</span>&gt; b2 = &#123;<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>&#125;;</span><br><span class="line">    b1 = b2;<span class="comment">//调用拷贝赋值函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出作用域后，b2被销毁，但b1仍然指向数据</span></span><br></pre></td></tr></table></figure><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20220506110829177.png" class="" title="image-20220506110829177"><h1 id="第15章：面向对象程序设计"><a href="#第15章：面向对象程序设计" class="headerlink" title="第15章：面向对象程序设计"></a>第15章：面向对象程序设计</h1><p>核心思想是<strong>封装、继承和多态</strong></p><h2 id="15-1-OPP：概述"><a href="#15-1-OPP：概述" class="headerlink" title="15.1 OPP：概述"></a>15.1 OPP：概述</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a><strong>继承</strong></h3><p><strong>菱形继承概念</strong>：</p><p>两个派生类同时继承一个基类，并且又有某个类同时继承这个两个派生类</p><p><strong>典型的菱形继承案例</strong>：</p><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20211201085720326.png" class="" title="image-20211201085720326"><p><strong>菱形继承问题</strong>：</p><blockquote><p>在动物类中声明一个年龄</p></blockquote><p>1.羊和驼都继承了动物年龄，所以当羊驼调用年龄时，会面临来自继承羊的年龄和驼的年龄，这时会产生二义性，</p><p>2.羊驼重复继承了动物的两个年龄，会在该类中开辟两块内存空间继承同一种数据，造成空间资源浪费。</p><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20211201094336466.png" class="" title="image-20211201094336466"><p><strong>引入虚继承解决菱形继承问题</strong>：</p><p>即在派生类的继承前加上==virtual==关键字  使之变为虚继承<br>Animal类称为 虚基类</p><ul><li>使用虚继承后，内存中只有一份数据，所以子类访问原有父类的成员时，则不再具有二义性，也不会造成空间浪费</li></ul><p><strong>虚继承的内存模型结构</strong>：</p><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20211201105430191.png" class="" title="image-20211201105430191"><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20211201110516699.png" class="" title="image-20211201110516699"><blockquote><p>引入虚继承后，羊驼类不再从羊类和驼类直接继承m_Age，而是声明一个虚基类来存放m_Age</p><p>现在羊驼类只继承来自羊类和驼类vbptr(虚基类指针)</p><p>羊驼类中的vbptr(虚基类指针)会指向存放在羊类和驼类中vbtable(虚基类表)的地址</p><p>而vbtable(虚基类表)中存放的是指针偏移的字节数，羊类vbtable中是8个字节，驼类是4个字节，vbptr(虚基类指针)加上对应的字节后就能恰好指向virtual下的m_Age</p></blockquote><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20211201115327378.png" class="" title="image-20211201115327378"><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>在C++中，若子类不希望直接继承父类的函数，而是希望对其进行修改，那么就可以在父类中将这些函数设置为虚函数</p><p>多态发生的条件：</p><ol><li><strong>有继承关系</strong></li><li><strong>子类重写父类中的虚函数</strong></li></ol><p>多态发生的时机：</p><p><strong>父类的指针或引用 调用一个虚函数时</strong>，将发生多态</p><h2 id="15-2-定义基类和派生类"><a href="#15-2-定义基类和派生类" class="headerlink" title="15.2 定义基类和派生类"></a>15.2 定义基类和派生类</h2><h3 id="定义基类"><a href="#定义基类" class="headerlink" title="定义基类"></a><strong>定义基类</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quote</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    Quote() = <span class="keyword">default</span>;<span class="comment">//C++ 11中的默认构造函数</span></span><br><span class="line">    Quote(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;book, <span class="keyword">double</span> sales_price) :</span><br><span class="line">    bookNo(book),price(sales_price)&#123;&#125;<span class="comment">//初始化列表</span></span><br><span class="line">    <span class="comment">//成员属性</span></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">isbn</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookNo;<span class="comment">//返回给定数量的书籍的销售总额</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">net_price</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> n)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n * price;<span class="comment">//派生类负责改写使用不同的折扣计算算法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~Quote() = <span class="keyword">default</span>;<span class="comment">//虚析构</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> bookNo;<span class="comment">//书籍编号</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">double</span> price = <span class="number">0.0</span>;<span class="comment">//代表普通状态下不打折的价格</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>若子类需要修改父类中的方法，那么就需要将该方法设置为<strong>虚函数</strong>，并在子类中进行重写</li><li>父类中通常需要定义一个<strong>虚析构函数</strong></li></ul><p><strong>成员函数和继承</strong></p><p><strong>当子类继承父类中的虚函数时，必须对其进行重写</strong>。</p><ul><li>任何<strong>构造函数之外</strong>的<strong>非静态函数</strong>，都可以是虚函数</li><li>关键字virtual 只能出现在<strong>类内部声明语句之前</strong></li><li>父类中声明一个虚函数，那么该函数在子类中隐式的也是虚函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="blog/test/"/>
      <url>blog/test/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="/blog/test/1.jpg" class="">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
