<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二分查找（上）：如何用最省内存的方式实现快速查找功能？</title>
      <link href="blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE01/"/>
      <url>blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="如何理解二分查找"><a href="#如何理解二分查找" class="headerlink" title="如何理解二分查找"></a>如何理解二分查找</h2><p>二分查找，又叫折半查找，它的思想是每次查找<strong>有序序列</strong>中的<strong>中间值</strong>，然后再判断该值与目标值的大小。如果大于目标值，则说明目标值在左半区间，反之，则在右半区间。不断重复上述操作，直到查找完成为止</p><p>假设我要在0~99的数字之间，查找23，则如下图所示</p><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE01/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.jpg" class=""><p>总结：二分查找是针对<strong>有序</strong>的数据集合，每次都能通过<strong>中间值与目标值对比</strong>，将待查<strong>区间的范围缩小一半</strong>，<strong>直到找到目标值</strong>，或<strong>区间被缩小为0</strong>时停止</p><p>它的<strong>时间复杂度是O(log n)</strong>，效率非常高</p><h2 id="二分查找的递归与非递归实现"><a href="#二分查找的递归与非递归实现" class="headerlink" title="二分查找的递归与非递归实现"></a>二分查找的递归与非递归实现</h2><p>示例1：有序数组中不存在重复元素，用二分查找给定的数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> n, <span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;<span class="comment">//左区间下标开始为0</span></span><br><span class="line">    <span class="keyword">int</span> high = n - <span class="number">1</span>;<span class="comment">//右区间下标开始为n-1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)&#123;<span class="comment">//注意：不是 low &lt; high</span></span><br><span class="line">        <span class="comment">//注意：不是mid=(low+high)/2,因为如果low和high比较大的话，两者之和就有可能会溢出</span></span><br><span class="line">        <span class="keyword">int</span> mid = low + (high - low)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[mid] == value)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[mid] &lt; value)&#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>二分查找还是有几个地方需要强调</p><p>1、循环退出条件：注意是 low&lt;=high，而不是 low&lt;high</p><p>2、mid的取值：mid=(low+high)/2 这种写法是有问题的。</p><p>因为如果 low 和 high 比较大的话，两者之和就有可能会溢出。改进的方法是将 mid 的计算方式写成 low+(high-low)/2。</p><p>3、low 和 high 的更新</p><p>low=mid+1，high=mid-1。注意这里的 +1 和 -1，如果直接写成 low=mid 或者 high=mid，就可能会发生死循环。</p><p>比如，当 high=3，low=3 时，如果 a[3] 不等于 value，就会导致一直循环不退出。</p></blockquote><p>示例2：用递归来实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二分查找的递归实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bsearch</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> n, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> bsearchInternally(a, <span class="number">0</span>, n - <span class="number">1</span>, val);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">bsearchInternally</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (low &gt; high) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">int</span> mid =  low + ((high - low) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (a[mid] == value) &#123;</span><br><span class="line">    <span class="keyword">return</span> mid;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[mid] &lt; value) &#123;</span><br><span class="line">    <span class="keyword">return</span> bsearchInternally(a, mid+<span class="number">1</span>, high, value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> bsearchInternally(a, low, mid<span class="number">-1</span>, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找的局限性"><a href="#二分查找的局限性" class="headerlink" title="二分查找的局限性"></a>二分查找的局限性</h2><ul><li>二分查找<strong>依赖数组</strong>，通过数组的下标随机访问才能让时间复杂度变得很低</li><li>二分查找针对的是<strong>有序数据</strong></li></ul><blockquote><p>如果数据没有序，那么<strong>排序的时间复杂度最低为O(n logn)</strong></p><p>所以，二分查找只能用在<strong>插入、删除操作不频繁</strong>，一<strong>次排序多次查找</strong>的场景中</p></blockquote><ul><li><strong>数据量太小</strong>不适合二分查找</li></ul><blockquote><p>如果要处理的数据量很小，完全没有必要用二分查找，顺序遍历就足够了</p><p>比如我们在一个大小为 10 的数组中查找一个元素，不管用二分查找还是顺序遍历，查找速度都差不多</p><p>只有数据量比较大的时候，二分查找的优势才会比较明显。</p></blockquote><ul><li><strong>数据量太大</strong>也不适合二分查找</li></ul><blockquote><p>因为二分查找要依赖数组，而数组要求连续的内存空间，对内存要求比较苛刻</p><p>当数据量太大时，我们可能需要比它大得多的内存空间</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Games101-04控制转换</title>
      <link href="blog/Games101-04%E6%8E%A7%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
      <url>blog/Games101-04%E6%8E%A7%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="3D-变换"><a href="#3D-变换" class="headerlink" title="3D 变换"></a>3D 变换</h2><h3 id="特定旋转"><a href="#特定旋转" class="headerlink" title="特定旋转"></a>特定旋转</h3><p>当我们的物体在三维空间绕着x、y、z轴旋转时，只有对应轴的坐标会保持不变</p><blockquote><p>用矩阵的表示方式如下</p><p>绕着x轴旋转，所以x轴坐标不会变，则矩阵的第一行和第一列都是1 0 0 </p><p>然后其中2×2的矩阵，就是对y、z进行旋转</p><p>绕着y轴旋转也是痛苦，矩阵的第二行和第二轮都是 1 0 0</p><p>然后周围的2×2矩阵，是对x、z进行旋转</p><p>总之就是哪个轴坐标不变，对应的行列就是 1 0 0，然后剩下的2×2矩阵就是对其它轴的旋转</p><p>在这里我们定义的是x叉乘z得到y。所以在矩阵中x和z的sin相同，而它们与z的sin相反</p></blockquote><img src="/blog/Games101-04%E6%8E%A7%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20220609220342559.png" class="" title="image-20220609220342559"><h3 id="复合旋转"><a href="#复合旋转" class="headerlink" title="复合旋转"></a>复合旋转</h3><p>我们可以将复杂的旋转，转换为通过特定旋转的组合形式</p><blockquote><p>也就是将复杂的旋转，转换为绕x、y、z轴的组合</p><p>这也是下述公式的含义</p></blockquote><img src="/blog/Games101-04%E6%8E%A7%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20220609221209398.png" class="" title="image-20220609221209398"><p>在数学上，我们将上述公式中的α，β，γ，三个角称之为欧拉角</p><blockquote><p>可以通过飞机抬头、平移、侧移的方法形象的理解欧拉角</p><p>飞机的任何旋转，都能分解为上述的三个动作</p><p>如下图所示</p></blockquote><img src="/blog/Games101-04%E6%8E%A7%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20220609221459801.png" class="" title="image-20220609221459801"><p><strong>公式</strong>：将任意的旋转通过分解为三个欧拉角的方式，写成一个矩阵</p><img src="/blog/Games101-04%E6%8E%A7%E5%88%B6%E8%BD%AC%E6%8D%A2/image-20220609222025801.png" class="" title="image-20220609222025801"><h2 id="观测变换"><a href="#观测变换" class="headerlink" title="观测变换"></a>观测变换</h2><p>观测变化包含<strong>视图变换</strong>和<strong>投影变换</strong>。其中投影变换又分为<strong>正交投影</strong>和<strong>透视投影</strong></p>]]></content>
      
      
      <categories>
          
          <category> 图形学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>排序（上）：为什么插入排序比冒泡排序更受欢迎？</title>
      <link href="blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E6%8E%92%E5%BA%8F1/"/>
      <url>blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E6%8E%92%E5%BA%8F1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="如何分析一个排序算法"><a href="#如何分析一个排序算法" class="headerlink" title="如何分析一个排序算法"></a>如何分析一个排序算法</h2><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E6%8E%92%E5%BA%8F1/%E6%8E%92%E5%BA%8F.jpg" class=""><ul><li><strong>算法的执行效率</strong></li></ul><p>我们在分析算法的时间复杂度时，要分别给出<strong>最好、最坏、以及平均复杂度</strong>。</p><p>除此之外，还要说出最好和最坏时间复杂度适用于哪种原始排列数据</p><blockquote><p>因为所需要排序的数据，有的接近有序，有的接近无序。</p><p>我们需要知道排序算法在不哦那个数据下的性能表现</p></blockquote><ul><li><strong>算法的内存消耗</strong></li></ul><p><strong>原地排序</strong>算法，即空间复杂度为O(1)的排序算法。<strong>冒泡，插入，选择</strong>都是原地排序算法</p><ul><li><strong>排序算法的稳定性</strong></li></ul><p>针对排序算法，我们还有一个重要的度量指标，<strong>稳定性</strong>。这个概念是说，如果待排序的序列中存在值相等的元素，经过排序之后，相等元素之间原有的先后顺序不变。</p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>基本思想：</p><ul><li>冒泡排序只会比较两个相邻的数据，看它们是否满足大小关系</li><li>如果不满足则将它们互换。一次冒泡排序就能确定至少一个元素的位置，重复n次，就能完成n个数的排序</li></ul><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E6%8E%92%E5%BA%8F1/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.jpg" class=""><p>可以看出，经过一次冒泡操作之后，6 这个元素已经存储在正确的位置上。要想完成所有数据的排序，我们只要进行 6 次这样的冒泡操作就行了。</p><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E6%8E%92%E5%BA%8F1/%E5%86%92%E6%B3%A1%E5%90%8E.jpg" class=""><p>实际上，刚讲的冒泡过程还可以优化。当某次冒泡操作已经没有数据交换时，说明已经达到完全有序，不用再继续执行后续的冒泡操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = nums.size();</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;<span class="comment">//如果发生交换，说明还需要排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span> - i; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[j] &gt; nums[j + <span class="number">1</span>]) &#123;</span><br><span class="line">swap(nums[j], nums[j + <span class="number">1</span>]);</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag) &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : nums) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums = &#123; <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span> &#125;;</span><br><span class="line">bubbleSort(nums);</span><br><span class="line">print(nums);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>冒泡排序是稳定算法、以及原地排序算法</li><li>冒牌排序的最好时间复杂度为O(n)，即只有一个元素需要排序的情况，最坏和平均复杂度为O(n^2)</li><li>原始数据越有序，冒牌排序越快</li></ul><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>思想：</p><ul><li>将数据分为两个区间，<strong>已排序区间</strong>和<strong>未排序区间</strong>。</li><li>初始的<strong>已排序区间只有数组第一个元素</strong></li><li>将<strong>未排序区间中的元素取出</strong>，在<strong>已排序区间找到合适的位置插入</strong>，保证已排序区间<strong>一直有序</strong></li><li>重复上面的过程，直到未排序区间中的元素为空</li></ul><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E6%8E%92%E5%BA%8F1/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.jpg" class=""><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt; a[i - <span class="number">1</span>])&#123;<span class="comment">//判断第i个元素和第i-1个元素</span></span><br><span class="line">            <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> x = a[i];</span><br><span class="line">            <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; x &lt; a[j])&#123;</span><br><span class="line">                a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            a[j+<span class="number">1</span>] = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>插入排序是<strong>原地排序</strong></li><li>插入排序是<strong>稳定算法</strong></li><li>插入排序<strong>从尾到头遍历有序的数据</strong>最好时间复杂度是O(n)，最坏和平均是O(n^2)</li></ul><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>思路：类似于插入排序，也分为已排序区和未排序区</p><ul><li>但是选择排序每次会<strong>从未排序区中找到最小元素</strong>，将其放到已排序区间的开头</li></ul><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E6%8E%92%E5%BA%8F1/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.jpg" class=""><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">seletionSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minIndex;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        minIndex = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j] &lt; a[minIndex])&#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(a[i],a[minIndex]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li><p>选择排序是<strong>原地排序</strong></p></li><li><p>选择排序最好、最坏、平均复杂度都是O(n^2)</p></li><li>选择排序是非稳定算法</li></ul><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E6%8E%92%E5%BA%8F1/%E6%80%BB%E7%BB%93.jpg" class=""><h2 id="为什么插入排序比冒泡排序更受欢迎？"><a href="#为什么插入排序比冒泡排序更受欢迎？" class="headerlink" title="为什么插入排序比冒泡排序更受欢迎？"></a>为什么插入排序比冒泡排序更受欢迎？</h2><p>从代码实现上来看，冒泡排序的<strong>数据交换</strong>要比插入排序的<strong>数据移动</strong>要复杂，冒泡排序需要 <strong>3 个</strong>赋值操作，而插入排序只需要 <strong>1 个</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>秋招面经</title>
      <link href="blog/%E7%A7%8B%E6%8B%9B%E9%9D%A2%E7%BB%8F/"/>
      <url>blog/%E7%A7%8B%E6%8B%9B%E9%9D%A2%E7%BB%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="37互娱"><a href="#37互娱" class="headerlink" title="37互娱"></a>37互娱</h2><h3 id="C-C"><a href="#C-C" class="headerlink" title="C++/C"></a>C++/C</h3><h4 id="引用和指针的区别"><a href="#引用和指针的区别" class="headerlink" title="引用和指针的区别"></a>引用和指针的区别</h4><ul><li>首先 指针的本质是一个变量，里面存放的是地址。而引用的本质是变量的别名，它和变量是同一种东西</li></ul><blockquote><p>C++中编译器中引用是通过指针来实现的</p></blockquote><ul><li>然后 指针可以有多级。而引用只能有一级</li><li>还有 指针初始化后可以改变指向。而引用初始化后不能改变指针</li><li>并且 指针在初始化时，声明和定义可以分开指向。而引用不行</li><li>最后 指针所占地址在32位操作系统下为4个字节，而引用所占地址和所引用对象相同</li></ul><h4 id="数组和vector容器的区别"><a href="#数组和vector容器的区别" class="headerlink" title="数组和vector容器的区别"></a>数组和vector容器的区别</h4><ul><li>数组不能动态扩容，若想要额外的添加数据，只能重新申请一个块更大的连续内存空间，然后再把原数据拷贝过去。而vector可以动态扩容</li></ul><h4 id="C-的GC"><a href="#C-的GC" class="headerlink" title="C#的GC"></a>C#的GC</h4><p>垃圾回收的过程是<strong>遍历堆上动态分配的所有对象</strong>，通过识别它们<strong>是否被引用</strong>，来确定哪些对象是垃圾，哪些对象仍要被引用</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="说一种排序的思想，以及时间和空间复杂度"><a href="#说一种排序的思想，以及时间和空间复杂度" class="headerlink" title="说一种排序的思想，以及时间和空间复杂度"></a>说一种排序的思想，以及时间和空间复杂度</h4><ul><li>快排思想：首先 选一个数为基准，然后通过左右哨兵,在它们相遇前，将小于等于该数的值都放在左边，将大于该数的值都放在右边，然后 左右区间重复上述操作，最后 直到各区见只有一个数</li><li>时间复杂度O(n log n)，空间复杂度O(n)</li></ul><h3 id="Unity相关"><a href="#Unity相关" class="headerlink" title="Unity相关"></a>Unity相关</h3><h4 id="GUI层级问题，王者英雄展示界面？"><a href="#GUI层级问题，王者英雄展示界面？" class="headerlink" title="GUI层级问题，王者英雄展示界面？"></a>GUI层级问题，王者英雄展示界面？</h4><ul><li>层级低的优先渲染，显示在越前面。层级高的后渲染，显示在越后面</li></ul><h4 id="动画骨骼，Unity一个关节最多几个骨骼连接"><a href="#动画骨骼，Unity一个关节最多几个骨骼连接" class="headerlink" title="动画骨骼，Unity一个关节最多几个骨骼连接"></a>动画骨骼，Unity一个关节最多几个骨骼连接</h4><h3 id="其它相关"><a href="#其它相关" class="headerlink" title="其它相关"></a>其它相关</h3><h4 id="TCP和UDP，三次挥手问题"><a href="#TCP和UDP，三次挥手问题" class="headerlink" title="TCP和UDP，三次挥手问题"></a>TCP和UDP，三次挥手问题</h4><h4 id="协程和线程的区别和特点"><a href="#协程和线程的区别和特点" class="headerlink" title="协程和线程的区别和特点"></a>协程和线程的区别和特点</h4><h4 id="图形学渲染过程"><a href="#图形学渲染过程" class="headerlink" title="图形学渲染过程"></a>图形学渲染过程</h4><h4 id="Lua与热更新"><a href="#Lua与热更新" class="headerlink" title="Lua与热更新"></a>Lua与热更新</h4><h2 id="完美世界"><a href="#完美世界" class="headerlink" title="完美世界"></a>完美世界</h2><h3 id="C-C-1"><a href="#C-C-1" class="headerlink" title="C++/C"></a>C++/C</h3><h4 id="面向对象思想，多态如何实现。"><a href="#面向对象思想，多态如何实现。" class="headerlink" title="面向对象思想，多态如何实现。"></a>面向对象思想，多态如何实现。</h4><p>面向对象的核心思想是<strong>封装、继承和多态</strong></p><ul><li>封装是<strong>把客观事物封装成抽象的类</strong>，并且<strong>对类的访问加以限制</strong></li><li>继承是<strong>让某种类型的对象</strong> <strong>获得另一个类型对象的属性和方法</strong></li></ul><blockquote><p>常见的继承有三种方式</p><p>1、实现继承：</p><p>2、接口继承：</p><p>3、可视继承：</p></blockquote><ul><li>多态是 同一事物表现出不同</li></ul><h4 id="虚函数原理，虚表指针位置"><a href="#虚函数原理，虚表指针位置" class="headerlink" title="虚函数原理，虚表指针位置"></a>虚函数原理，虚表指针位置</h4><h4 id="类的内存模型"><a href="#类的内存模型" class="headerlink" title="类的内存模型"></a>类的内存模型</h4><h4 id="C-11新特性（了解哪些）"><a href="#C-11新特性（了解哪些）" class="headerlink" title="C++11新特性（了解哪些）"></a>C++11新特性（了解哪些）</h4><h4 id="智能指针、野指针"><a href="#智能指针、野指针" class="headerlink" title="智能指针、野指针"></a>智能指针、野指针</h4><h4 id="stl容器"><a href="#stl容器" class="headerlink" title="stl容器"></a>stl容器</h4><h3 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="vector删除所有值为value的元素"><a href="#vector删除所有值为value的元素" class="headerlink" title="vector删除所有值为value的元素"></a>vector删除所有值为value的元素</h4><h4 id="vector的扩容机制，插入元素的时间复杂度，如何计算"><a href="#vector的扩容机制，插入元素的时间复杂度，如何计算" class="headerlink" title="vector的扩容机制，插入元素的时间复杂度，如何计算"></a>vector的扩容机制，插入元素的时间复杂度，如何计算</h4><h3 id="Unity相关-1"><a href="#Unity相关-1" class="headerlink" title="Unity相关"></a>Unity相关</h3><h3 id="其它相关-1"><a href="#其它相关-1" class="headerlink" title="其它相关"></a>其它相关</h3><h4 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h4><h4 id="死锁相关"><a href="#死锁相关" class="headerlink" title="死锁相关"></a>死锁相关</h4><h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4><h4 id="渲染管线"><a href="#渲染管线" class="headerlink" title="渲染管线"></a>渲染管线</h4><h2 id="祖龙"><a href="#祖龙" class="headerlink" title="祖龙"></a>祖龙</h2><h3 id="C-C-2"><a href="#C-C-2" class="headerlink" title="C++/C"></a>C++/C</h3><h4 id="float和int分别以什么形式存储的"><a href="#float和int分别以什么形式存储的" class="headerlink" title="float和int分别以什么形式存储的"></a>float和int分别以什么形式存储的</h4><h4 id="多态如何实现"><a href="#多态如何实现" class="headerlink" title="多态如何实现"></a>多态如何实现</h4><h4 id="stl各种容器机制及其区别"><a href="#stl各种容器机制及其区别" class="headerlink" title="stl各种容器机制及其区别"></a>stl各种容器机制及其区别</h4><h4 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h4><h4 id="右值引用"><a href="#右值引用" class="headerlink" title="右值引用"></a>右值引用</h4><h4 id="函数闭包"><a href="#函数闭包" class="headerlink" title="函数闭包"></a>函数闭包</h4><h4 id="模板、模板特化、模板偏特化"><a href="#模板、模板特化、模板偏特化" class="headerlink" title="模板、模板特化、模板偏特化"></a>模板、模板特化、模板偏特化</h4><h4 id="模板是如何实现的"><a href="#模板是如何实现的" class="headerlink" title="模板是如何实现的"></a>模板是如何实现的</h4><h4 id="auto关键字寻找类型的原理"><a href="#auto关键字寻找类型的原理" class="headerlink" title="auto关键字寻找类型的原理"></a>auto关键字寻找类型的原理</h4><h4 id="描述调用main函数、实例化类，调用类中的成员函数，这一系列操作中程序的执行过程"><a href="#描述调用main函数、实例化类，调用类中的成员函数，这一系列操作中程序的执行过程" class="headerlink" title="描述调用main函数、实例化类，调用类中的成员函数，这一系列操作中程序的执行过程"></a>描述调用main函数、实例化类，调用类中的成员函数，这一系列操作中程序的执行过程</h4><h3 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="avl树和红黑树的区别，优劣"><a href="#avl树和红黑树的区别，优劣" class="headerlink" title="avl树和红黑树的区别，优劣"></a>avl树和红黑树的区别，优劣</h4><h4 id="红黑树的实现原理"><a href="#红黑树的实现原理" class="headerlink" title="红黑树的实现原理"></a>红黑树的实现原理</h4><h4 id="哈希表的实现原理，哈希冲突解决"><a href="#哈希表的实现原理，哈希冲突解决" class="headerlink" title="哈希表的实现原理，哈希冲突解决"></a>哈希表的实现原理，哈希冲突解决</h4><h4 id="单链表中删除一个指定节点的时间复杂度，如何计算。"><a href="#单链表中删除一个指定节点的时间复杂度，如何计算。" class="headerlink" title="单链表中删除一个指定节点的时间复杂度，如何计算。"></a>单链表中删除一个指定节点的时间复杂度，如何计算。</h4><h3 id="Unity相关-2"><a href="#Unity相关-2" class="headerlink" title="Unity相关"></a>Unity相关</h3><h4 id="协程执行的时机"><a href="#协程执行的时机" class="headerlink" title="协程执行的时机"></a>协程执行的时机</h4><h4 id="update、awake等的执行顺序"><a href="#update、awake等的执行顺序" class="headerlink" title="update、awake等的执行顺序"></a>update、awake等的执行顺序</h4><h4 id="timescale会影响update、fixedupdate或lateupdate吗"><a href="#timescale会影响update、fixedupdate或lateupdate吗" class="headerlink" title="timescale会影响update、fixedupdate或lateupdate吗"></a>timescale会影响update、fixedupdate或lateupdate吗</h4><h4 id="unity的架构了解吗"><a href="#unity的架构了解吗" class="headerlink" title="unity的架构了解吗"></a>unity的架构了解吗</h4><h4 id="如何判断物体在不在摄像机的范围中"><a href="#如何判断物体在不在摄像机的范围中" class="headerlink" title="如何判断物体在不在摄像机的范围中"></a>如何判断物体在不在摄像机的范围中</h4><h3 id="其它相关-2"><a href="#其它相关-2" class="headerlink" title="其它相关"></a>其它相关</h3><h4 id="帧同步与状态同步"><a href="#帧同步与状态同步" class="headerlink" title="帧同步与状态同步"></a>帧同步与状态同步</h4><h4 id="死锁预防、检测、消除"><a href="#死锁预防、检测、消除" class="headerlink" title="死锁预防、检测、消除"></a>死锁预防、检测、消除</h4><h4 id="使用udp的过程中，需要注意哪些问题"><a href="#使用udp的过程中，需要注意哪些问题" class="headerlink" title="使用udp的过程中，需要注意哪些问题"></a>使用udp的过程中，需要注意哪些问题</h4><h2 id="西山居"><a href="#西山居" class="headerlink" title="西山居"></a>西山居</h2><h3 id="C-C-3"><a href="#C-C-3" class="headerlink" title="C++/C"></a>C++/C</h3><h4 id="new、delete和malloc、free的区别"><a href="#new、delete和malloc、free的区别" class="headerlink" title="new、delete和malloc、free的区别"></a>new、delete和malloc、free的区别</h4><h4 id="构造、析构是否可以是虚函数"><a href="#构造、析构是否可以是虚函数" class="headerlink" title="构造、析构是否可以是虚函数"></a>构造、析构是否可以是虚函数</h4><h4 id="虚函数实现原理，虚指针大小"><a href="#虚函数实现原理，虚指针大小" class="headerlink" title="虚函数实现原理，虚指针大小"></a>虚函数实现原理，虚指针大小</h4><h4 id="内联、宏、普通函数的区别（内联和宏分别如何实现）"><a href="#内联、宏、普通函数的区别（内联和宏分别如何实现）" class="headerlink" title="内联、宏、普通函数的区别（内联和宏分别如何实现）"></a>内联、宏、普通函数的区别（内联和宏分别如何实现）</h4><h4 id="函数调用过程"><a href="#函数调用过程" class="headerlink" title="函数调用过程"></a>函数调用过程</h4><h4 id="c-object使用注意事项"><a href="#c-object使用注意事项" class="headerlink" title="c# object使用注意事项"></a>c# object使用注意事项</h4><h4 id="static特性，static变量初始化的时机。"><a href="#static特性，static变量初始化的时机。" class="headerlink" title="static特性，static变量初始化的时机。"></a>static特性，static变量初始化的时机。</h4><h4 id="程序运行时，存储区如何划分"><a href="#程序运行时，存储区如何划分" class="headerlink" title="程序运行时，存储区如何划分"></a>程序运行时，存储区如何划分</h4><h3 id="数据结构-3"><a href="#数据结构-3" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="红黑树、哈希表优劣"><a href="#红黑树、哈希表优劣" class="headerlink" title="红黑树、哈希表优劣"></a>红黑树、哈希表优劣</h4><h4 id="红黑树原理、哈希表原理、哈希冲突"><a href="#红黑树原理、哈希表原理、哈希冲突" class="headerlink" title="红黑树原理、哈希表原理、哈希冲突"></a>红黑树原理、哈希表原理、哈希冲突</h4><h4 id="解决哈希冲突的方法各自的优劣"><a href="#解决哈希冲突的方法各自的优劣" class="headerlink" title="解决哈希冲突的方法各自的优劣"></a>解决哈希冲突的方法各自的优劣</h4>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Game101-03Transformation</title>
      <link href="blog/Game101-03Transformation/"/>
      <url>blog/Game101-03Transformation/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Transformation-变换"><a href="#Transformation-变换" class="headerlink" title="Transformation(变换)"></a>Transformation(变换)</h2><p><strong>课程回顾</strong></p><ul><li>向量点乘</li></ul><blockquote><p>向量点乘的结果是一个数，可以用来判断另一个物体位置的前后</p><p>点乘结果为正，另一个物体在前方</p><p>点乘结果为负，另一个物体在后方</p></blockquote><ul><li>向量叉乘</li></ul><blockquote><p> 向量叉乘结果是一个新向量，可以用来判断另一个物体的相对左右关系</p><p> 若新向量的结果大于0，根据右手定则判断，则另一个物体在左边</p><p> 若新向量的结果小于0，根据右手定则判断，则另一个物体在右边</p></blockquote><ul><li>矩阵</li></ul><blockquote><p>用来表示位置的变换</p></blockquote><h3 id="2D-变换"><a href="#2D-变换" class="headerlink" title="2D 变换"></a>2D 变换</h3><h4 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h4><img src="/blog/Game101-03Transformation/image-20220506220710135.png" class="" title="image-20220506220710135"><blockquote><p>如果将一个图片进行缩放，就是将其的x、y 坐标缩放s 倍。在数学上的形式就是：</p><p>x’ = sx;</p><p>y’ = sy;</p><p>若将这两个式子写成矩阵形式：</p></blockquote><img src="/blog/Game101-03Transformation/image-20220506223318676.png" class="" title="image-20220506223318676"><blockquote><p>第一个矩阵是2行1列，第三个矩阵也是是2行一列，所以第二个矩阵就是2行2列，多出的用0补齐</p><p>这样的话也能满足</p><p>x‘ 是一行一列，它等于(s,0)向量和(x,y)向量的点乘，也就是sx</p><p>y’ 是二行一列，它等于(0,s)向量和(x,y)向量的点乘，也就是sy</p><p>所以这里的[s,0,0,s] 对角阵矩阵就被称为<strong>缩放矩阵</strong>，当s 等于0.5时，就对应着图像会缩放0.5倍</p></blockquote><p><strong>x、y不等比缩放</strong></p><img src="/blog/Game101-03Transformation/image-20220506224848203.png" class="" title="image-20220506224848203"><blockquote><p>对于x，y不等比缩放的情况，只需要将对角阵矩阵中的s对应修改就可以</p></blockquote><img src="/blog/Game101-03Transformation/image-20220506225016005.png" class="" title="image-20220506225016005"><h4 id="对称"><a href="#对称" class="headerlink" title="对称"></a><strong>对称</strong></h4><img src="/blog/Game101-03Transformation/image-20220506225212749.png" class="" title="image-20220506225212749"><blockquote><p>图片相对于y轴进行反转，就能得到相对于y轴的对称图形，数学形式表示如下</p><p>x’ = -x</p><p>y’ = y</p><p>若写成矩阵形式则表示如下</p></blockquote><img src="/blog/Game101-03Transformation/image-20220506225840974.png" class="" title="image-20220506225840974"><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><img src="/blog/Game101-03Transformation/image-20220506225943927.png" class="" title="image-20220506225943927"><blockquote><p>相当于拖着图片的上面那条边，向右沿着水平方向拖拽，图片发生形变。</p><p>由于是沿着水平方向拖拽，所以图片的y轴并没有发生改变</p><p>就能先得到y‘ = y</p><p>然后分析x轴，图片处于x轴坐标上的这条边位置变化为 0，而只有上面的边平移了a</p><p>也就是y = 0时 x轴变化为0，y = 1时 x变化为a，则水平方向移动了ay</p><p>所以能得到x’ = x + ay</p><p>用矩阵表示如下</p></blockquote><img src="/blog/Game101-03Transformation/image-20220506231928622.png" class="" title="image-20220506231928622"><h4 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h4><img src="/blog/Game101-03Transformation/image-20220506232414740.png" class="" title="image-20220506232414740"><blockquote><p>当我们不说其它条件时，就是默认绕着<strong>原点</strong>(0,0)进行<strong>逆时针旋转</strong></p><p>图像旋转后，原本(1,0)的点，变成了(cosθ,sinθ)</p><p>再通过矩阵的计算，可以得到旋转后的矩阵</p><p>cosθ -sinθ</p><p>sinθ cosθ</p></blockquote><img src="/blog/Game101-03Transformation/image-20220608203553268.png" class="" title="image-20220608203553268"><img src="/blog/Game101-03Transformation/image-20220608203705822.png" class="" title="image-20220608203705822"><p>二维旋转，若不考虑齐次坐标的情况下，用矩阵表示如下</p><img src="/blog/Game101-03Transformation/image-20220609212913155.png" class="" title="image-20220609212913155"><blockquote><p>我们发现旋转-θ角度其实把旋转θ角度进行了一个转置</p><p>并且从定义上来看，旋转-θ角，就是旋转θ角的逆，也就是旋转θ角的转置</p><p>从数学的角度来看，若一个矩阵的逆 等于它的转置，那么这个矩阵就被称为正交矩阵</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>上述的变换都可以写成x’ = ax + by      y‘ = cx + dy的形式</p><p>矩阵形式如下</p><img src="/blog/Game101-03Transformation/image-20220608204735340.png" class="" title="image-20220608204735340"><blockquote><p>如果我们可以把变换写成 一个矩阵去乘以一个输入的坐标，可以得到输出的坐标</p><p>那我们就将这种变换称为线性变换 </p><p>x‘ = M x</p><p>注意：这里需要用相同维度的矩阵去乘以该变量</p></blockquote><h3 id="齐次坐标"><a href="#齐次坐标" class="headerlink" title="齐次坐标"></a>齐次坐标</h3><p>当我们遇到一种特殊的变换时，就需要用到齐次坐标的概念</p><h4 id="平移变换"><a href="#平移变换" class="headerlink" title="平移变换"></a>平移变换</h4><img src="/blog/Game101-03Transformation/image-20220608205900064.png" class="" title="image-20220608205900064"><blockquote><p>当图片进行平移时，数学形式的表示如下</p><p>x’ = x + tx</p><p>y’ = y + ty</p></blockquote><p>而平移变换的矩阵形式如下</p><img src="/blog/Game101-03Transformation/image-20220608210045660.png" class="" title="image-20220608210045660"><p>说明了<strong>平移矩阵并不属于线性变换</strong>，所以引入了齐次坐标来解决这个问题</p><h4 id="齐次坐标-1"><a href="#齐次坐标-1" class="headerlink" title="齐次坐标"></a>齐次坐标</h4><p>引入齐次坐标的目的就是为了<strong>将变换都能写成矩阵乘以向量的形式</strong></p><p>将二维的点或者向量，增加一个维度</p><ul><li><p>用(x,y,1)来表示二维的点</p></li><li><p>用(x,y,0)来表示二维的向量</p></li></ul><p>通过齐次坐标将平移写成了矩阵乘以向量的形式</p><img src="/blog/Game101-03Transformation/image-20220608211035843.png" class="" title="image-20220608211035843"><blockquote><p>注意：这里为什么要将向量和点进行区别对待</p><p>因为向量具有平移不变性，将一个向量平移到另一个地方，本质上还是那个向量</p></blockquote><p>在齐次坐标下，有以下概念</p><ul><li>向量 + 向量 = 向量</li><li>点 - 点 = 向量</li><li>点 + 向量 = 点</li><li>点 + 点 = 这两个点的中点</li></ul><h4 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h4><p>对于任何的一种变换若能写成<strong>线性变换加上平移</strong>，那么我们称之为仿射变换</p><img src="/blog/Game101-03Transformation/image-20220608211919859.png" class="" title="image-20220608211919859"><p>而所有的仿射变换，都能够写成齐次坐标的形式</p><img src="/blog/Game101-03Transformation/image-20220608211949391.png" class="" title="image-20220608211949391"><blockquote><p>如果我们用齐次坐标去表示二维的仿射变换</p><p>那么<strong>它的最后一行，一定是(0 0 1)</strong></p><p>平移的坐标一定是写在<strong>最后一列的头两个数</strong></p><p>然后剩余左边的<strong>2 × 2矩阵是 原来线性变换矩阵的值</strong></p></blockquote><img src="/blog/Game101-03Transformation/image-20220608212353485.png" class="" title="image-20220608212353485"><p><strong>注意：</strong>只有用齐次坐标表示二维的仿射变换它的矩阵最后一行才是(0 0 1)</p><h3 id="其它变换"><a href="#其它变换" class="headerlink" title="其它变换"></a>其它变换</h3><h4 id="逆变换"><a href="#逆变换" class="headerlink" title="逆变换"></a>逆变换</h4><p>将一个操作的变换反过来，就被称为逆变换</p><img src="/blog/Game101-03Transformation/image-20220608212826148.png" class="" title="image-20220608212826148"><blockquote><p>逆变换在数学上所对应的<strong>乘以该变换的逆矩阵</strong></p><p><strong>一个矩阵乘以它的逆矩阵一定等于单位矩阵</strong></p></blockquote><h4 id="组合变换"><a href="#组合变换" class="headerlink" title="组合变换"></a>组合变换</h4><ul><li>复杂的变换可以通过简单的变换得到</li><li>变换过程种的先后顺序非常重要，会影响到变换结果</li></ul><p>假设，我们想要将得到下图</p><img src="/blog/Game101-03Transformation/image-20220608213248486.png" class="" title="image-20220608213248486"><p>若是先平移再进行旋转，则不能得到目标结果</p><img src="/blog/Game101-03Transformation/image-20220608213322952.png" class="" title="image-20220608213322952"><p>若是<strong>先旋转再平移</strong>，则能够得到目标结果</p><img src="/blog/Game101-03Transformation/image-20220608213355040.png" class="" title="image-20220608213355040"><blockquote><p>虽说上述两种方法做的单个事情一样，但组合后的顺序不一样，则得到的结果也不一样。</p><p>这个可以通过矩阵的乘法理解，变换就是在<strong>某个向量前乘以一个矩阵</strong>，若再变换一次，就再从前面乘以一个矩阵。</p><p>若矩阵相乘的顺序改变了，它不满足交换律，所以结果也改变了</p></blockquote><p><strong>组合矩阵的计算顺序</strong></p><p>当一个向量前面乘了多个矩阵，它会依次<strong>从右到左</strong>开始计算</p><img src="/blog/Game101-03Transformation/image-20220608214039269.png" class="" title="image-20220608214039269"><p>  <strong>变换的分解</strong></p><p>若我们不以原点进行旋转，而是以c点进行旋转，我们可以先将c点移动到原点上，再进行旋转，之后再平移回去</p><img src="/blog/Game101-03Transformation/image-20220608215600276.png" class="" title="image-20220608215600276"><img src="/blog/Game101-03Transformation/image-20220608215740179.png" class="" title="image-20220608215740179"><h3 id="3D-变换"><a href="#3D-变换" class="headerlink" title="3D 变换"></a>3D 变换</h3><p>3D变换就是在2D变化的基础上增加了一个维度，与2D变换类似</p><p>3D 点 = (x,y,z,1)</p><p>3D 向量=(x,y,z,0)</p><p>三维空间中的齐次坐标表示仿射变换</p><img src="/blog/Game101-03Transformation/image-20220608220635005.png" class="" title="image-20220608220635005"><blockquote><p>规律和二维类型</p><p>最后一行是(0 0 0 1)</p><p>最后一列的头三个数表示</p><p>左边剩下的3×3矩阵就是三维空间中的线性变换</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 图形学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> games101 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归：如何用三行代码找到“最终推荐人”？</title>
      <link href="blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%80%92%E5%BD%92/"/>
      <url>blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="如何理解递归"><a href="#如何理解递归" class="headerlink" title="如何理解递归"></a>如何理解递归</h2><p>递归是一种应用非常广的算法。DFS深度优先搜索、前中后序二叉树遍历等都需要用到递归</p><p>举一个列子，当我们在排队时，我们并不知道自己是第几位，我们只能问前面的人，然后再加上1就好。</p><p>若前面的人也不知道自己的序号，则就只能一个一个的往前问，直到遇见排在第一个的人，然后第一个人报数为1，这样他身后的人就能依次开始报数，等到我们这里时，就知道自己是第几个了</p><blockquote><p>这是一个非常标准的递归求解问题的分解过程</p><p>去的过程叫“递”，相当于从当前位置开始有一个问题，然后不断向前传递，直到得到已知的结果位置</p><p>回来的过程叫”归”，将已知的结果通过式子不断返回，最后得到目标位置的结果</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比如上述例子就能用以下递归公式表示、</span></span><br><span class="line">f(n) = f(n<span class="number">-1</span>) + <span class="number">1</span> 其中 f(<span class="number">1</span>) = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">f(n) 表示自己的位置</span></span><br><span class="line"><span class="comment">f(n-1) 表示前面对象的位置</span></span><br><span class="line"><span class="comment">f(1)=1 表示已知队伍第一个人的位置为1 </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过以上的递归公式，将其改为递归代码如下</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f(n<span class="number">-1</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归满足的三个条件"><a href="#递归满足的三个条件" class="headerlink" title="递归满足的三个条件"></a>递归满足的三个条件</h2><p>若有一个问题同时满足下述<strong>三个条件</strong>，就可以用递归来解决</p><ul><li>一个问题的解 可以分为几个子问题的解</li></ul><blockquote><p>什么是子问题呢？</p><p>子问题就是数据规模更小的问题</p><p>比如前面排队的例子，我们要知道“自己的位置”，可以分解为”前面人的位置”</p></blockquote><ul><li><strong>将问题分解后，除了数据规模不同，子问题的求解思路要完全一样</strong></li></ul><blockquote><p>比如上述排队的例子，我们求解“自己的位置” 的思路，和前面那个人求解“自己的位置” 的思路要一样，都是询问前面的人</p></blockquote><ul><li><strong>存在递归终止条件</strong></li></ul><blockquote><p>把问题分解为子问题，再把子问题分解为子子问题，但不能存在无线循环，总得有个终止条件。</p><p>还是以上述排队为例，队首的第一个就必须自己是第一个人。否则递归就会出问题</p></blockquote><h3 id="如何编写递归代码"><a href="#如何编写递归代码" class="headerlink" title="如何编写递归代码"></a>如何编写递归代码</h3><p>写递归代码最关键的就是 <strong>写出递归公式，然后找到终止条件</strong></p><p>假设有n个台阶，每次你可以跨1个台阶或2个台阶，请问走这n个台阶有多少种走法</p><blockquote><p>实际上，可以根据第一步的走法 把所有走法分为两类</p><p>一类是第一步走1个台阶</p><p>另一类是第一步走2个台阶</p><p>递归公式：f(n) = f(n-1) + f(n-2)</p><p>n = 1时，表示只有一个台阶，那就只有一种走法</p><p>n = 2 时，表示有两个台阶，那就有两种走法，直接走两个台阶，和走两次一个台阶</p><p>终止条件：f(1) = 1; f(2) = 2</p></blockquote><p>所以最终递归代码如下所示</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> f(n<span class="number">-1</span>) + f(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：写递归代码的关键，就是找到如何将大问题分解为小问题的规律，并<strong>写出递归公式</strong>，然后再<strong>敲定终止条件</strong>，最后<strong>将递归公式和终止条件翻译成代码</strong></p><h2 id="递归代码要警惕堆栈溢出"><a href="#递归代码要警惕堆栈溢出" class="headerlink" title="递归代码要警惕堆栈溢出"></a>递归代码要警惕堆栈溢出</h2><p>编写递归代码时，可能会遇到堆栈溢出。这样会导致系统性的崩溃</p><p>我们知道，函数调用会使用栈来保存临时变量。<strong>每调用一个函数</strong>，<strong>都会将临时变量封装为栈帧压入栈中，等函数执行完，返回后才会出栈</strong>。而系统栈的内存一般不大，如果递归求解的数据规模很大，则有可能导致堆栈溢出的风险</p><p>那么，如何避免堆栈溢出呢？</p><p>我们可以通过代码<strong>限制递归调用的最大深度</strong>，当递归调用超过一定深度后，我们直接返回报错</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局变量，表示递归的深度。</span></span><br><span class="line"><span class="keyword">int</span> depth = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  depth++；</span><br><span class="line">  <span class="keyword">if</span> (depth &gt; <span class="number">1000</span>) <span class="keyword">throw</span> exception;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> f(n<span class="number">-1</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归代码要警惕重复计算"><a href="#递归代码要警惕重复计算" class="headerlink" title="递归代码要警惕重复计算"></a>递归代码要警惕重复计算</h2><p>除了堆栈溢出外，使用递归还可能出现重复计算的问题。比如上述的跳台阶问题</p><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%80%92%E5%BD%92/%E8%B7%B3%E5%8F%B0%E9%98%B6%E5%88%86%E8%A7%A3.jpg" class=""><blockquote><p>我们从图中可以看到，f(3)被计算了多次，这就是重复计算问题，为了避免重复计算，我们可以通过一个数据结构(如散列表)来保存已经求解过的f(k)</p><p>当递归调用到f(k)时，可以先看下是否已经求解过了</p><p>若已经求解过，则直接从散列表中取值返回，不需要重复计算</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>队列：队列在线程池等有限资源池中的应用</title>
      <link href="blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%98%9F%E5%88%97/"/>
      <url>blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="如何理解队列"><a href="#如何理解队列" class="headerlink" title="如何理解队列"></a>如何理解队列</h2><p>可以将队列想象成排队买票，先来的先买，从前面出，后来的后买，从后面进。</p><p><strong>先进先出</strong>，这就是队列的特点</p><p>队列的功能也与栈相似，最基本的操作有<strong>入列 enqueue()</strong>：将一个数据放到队列尾部；<strong>出列dequeue()</strong>：从队列头部取一个元素</p><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%97%E7%89%B9%E7%82%B9.jpg" class=""><p>所以，队列和栈一样，也是<strong>操作受限的线性表数据结构</strong>。</p><p>队列的应用也非常广泛，比如循环队列、并发队列、阻塞队列</p><h2 id="顺序队列和链式队列"><a href="#顺序队列和链式队列" class="headerlink" title="顺序队列和链式队列"></a>顺序队列和链式队列</h2><p>用数组实现的队列叫<strong>顺序队列</strong>，用链表实现的队列叫<strong>链式队列</strong></p><p>对于栈来说，顺序栈只需要一个<strong>栈顶指针</strong>。但队列则需要两个指针，一个head 指向队头，一个tail 指针指向队尾</p><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%97.jpg" class=""><p>当我们出队时，head指针就会向后移动，而当我们入队时，则是tail指针向后移动</p><blockquote><p>这里需要注意，当有一个元素出队时，不用急着将后续元素往前搬移，因为这样的事件复杂度是O(n)。</p><p>我们可以稍微优化一下，假设a，b，c 都出队了，我们不用着急将后续数据搬移，一直等到有后续元素入队，此时tail指针就会往后移动，若tail指针指向最后一个元素，就说明当前队列已经不能从后面入队了，但此时前面出队的空间还在，这时，我们才将所有数据进行搬移。</p><p>这样的话就能保证时间复杂度为O(1)，C#中的垃圾回收机制，就采用了这种思想</p></blockquote><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%98%9F%E5%88%97/%E4%B8%8B%E8%BD%BD.jpg" class=""><p>接下来，看看<strong>基于链表的队列实现方法</strong></p><p>基于链表的实现，我们同样需要head 指针和tail 指针。</p><p>它们分别指向链表的第一个结点和最后一个结点</p><p>入队时，tail-&gt;next = new_node，tail = tail-&gt;next;</p><p>出队时,head = head-&gt;next</p>.jpg)## 循环队列在**顺序队列**中，当tail == n时，会有数据搬移操作，这样入队性能就会受到影响> 这是因为队列中后方空间已满，而前方的空间因为元素出队而空了出来，所以就要把后方的元素往前移而假如队列是一个环，就不存在数据搬移的问题了<img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%98%9F%E5%88%97/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97.jpg" class=""><p>当<strong>head  == tail时，循环队列为空</strong></p><p>当<strong>(tail+1)%n = head</strong> 时，<strong>循环队列已满</strong>。而当队列满时，tail所指空间没有数据</p><h2 id="队列在线程池等有限资源池中的应用"><a href="#队列在线程池等有限资源池中的应用" class="headerlink" title="队列在线程池等有限资源池中的应用"></a>队列在线程池等有限资源池中的应用</h2><p>当线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理？各种处理策略又是如何实现的呢？</p><p>我们一般有两种处理策略</p><ul><li>第一种是非阻塞的处理方式，直接拒绝任务请求</li><li>另一种是阻塞的处理方式，请求排队，等到有空闲线程时，取出排队的请求处理</li></ul><p>对于顺序队列和链式队列在排队请求中的区别</p><ul><li>链式队列可以实现一个支持<strong>无线排队的无界队列</strong>，但是可能会导致过多的请求排队等待，请求处理的响应时间过长，不适合响应时间敏感的系统</li><li>顺序队列可以实现有界队列，<strong>当线程池中排队的请求超过队列大小时，接下来的请求就会被拒绝</strong>，适合响应时间敏感的系统</li></ul><blockquote><p>所以设置一个合理的队列大小，否则队列太大，则导致需要等待的请求太多</p><p>若队列太小，则无法充分利用系统资源</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Lua热更新</title>
      <link href="blog/Lua%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
      <url>blog/Lua%E7%83%AD%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="AssetBundle"><a href="#AssetBundle" class="headerlink" title="AssetBundle"></a>AssetBundle</h2><h3 id="AB包理论基础"><a href="#AB包理论基础" class="headerlink" title="AB包理论基础"></a>AB包理论基础</h3><p>AB包是<strong>特定平台</strong>的<strong>资源压缩包</strong>，有点类似于压缩文件</p><p>资源包括：模型、贴图、预设体、音效、材质球等等</p><blockquote><p>不能打包C#代码，所以热更新用Lua制作</p></blockquote><p><strong>作用</strong>：</p><ul><li>相对于Resources下的资源，AB包更加便于管理</li></ul><blockquote><p>Resources下的资源，在打包时，不管该资源有没有用，都会全部打包</p><p>并且打包后的资源只读，无法修改</p><p>而AB包更加灵活，<strong>存储位置</strong>和<strong>压缩方式</strong>都可以自定义，后期还可以<strong>动态更新</strong></p></blockquote><ul><li><strong>减少包体大小</strong></li></ul><blockquote><p>1、在打包过程中可以压缩资源，节约硬盘空间</p><p>2、减少初始包大小，打包时可以将其放到服务器上，出去后就只有一些默认资源</p></blockquote><ul><li><strong>热更新</strong></li></ul><blockquote><p>热更新基本规则：</p><p>客户端通过AB包的形式，自带很少的默认资源</p><p>然后来到服务端同步一些信息，获取资源服务器地址等</p><p>接着来到资源服务器下载资源对比文件</p><p>通过资源对比文件 来比较远程的AB包和本地的AB</p><p>最后再检查哪些资源需要更新</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="blog/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>blog/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>操作系统<strong>控制和管理</strong> 整个计算机系统的<strong>硬件和软件</strong></li><li>并合理的<strong>组织调度</strong>计算机的<strong>工作和资源分配</strong></li><li>它是计算机系统中最基本的<strong>系统软件</strong></li></ul><p>如图是计算机的层次结构</p><p><img src="操作系统/image-20220527204848746.png" alt="image-20220527204848746" style="zoom:125%;" /></p><h3 id="功能和目标"><a href="#功能和目标" class="headerlink" title="功能和目标"></a>功能和目标</h3><p>操作系统<strong>作为系统资源的管理者</strong>，需要提供什么功能？</p><blockquote><p>补充知识：</p><p>进程是一个程序的执行过程。程序执行前<strong>需要将进程放到内存中</strong>，才能被CPU处理</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#委托和事件</title>
      <link href="blog/C#%E5%A7%94%E6%89%98%E5%92%8C%E4%BA%8B%E4%BB%B6/"/>
      <url>blog/C#%E5%A7%94%E6%89%98%E5%92%8C%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><p>委托是函数的容器，可以理解为<strong>表示函数的变量类型</strong>，它用来<strong>存储和传递函数</strong></p><p>委托的<strong>本质是一个类</strong>，用来<strong>定义函数的类型</strong>。不同的函数必须对应和自身“格式”一致的委托</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>关键字：<strong>delegate</strong></p><p><code>语法：访问修饰符 delegate 返回值 委托名(参数列表)</code></p><blockquote><p>其实从语法来看，委托就是函数返回值前加了一个关键字delegate，而函数名变成了委托名</p><p>但委托和函数本质上并不是一种东西，它是存储函数的容器</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个无参无返回值的委托</span></span><br><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//委托不能重名。所以以下声明会报错</span></span><br><span class="line"><span class="comment">//delegate int MyDelegate();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法1</span></span><br><span class="line">MyDelegate d = <span class="keyword">new</span> MyDelegate(Fun);<span class="comment">//将函数存储到委托中</span></span><br><span class="line">d.Invoke();<span class="comment">//调用存在委托中的函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line">MyDelegate d1 = Fun;<span class="comment">//此处只能写函数名，不能写括号，否则就不是存储函数</span></span><br><span class="line">d1();<span class="comment">//调用委托中的函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在将函数存放到委托中时，必须使得函数和委托相匹配</p><p>即，委托声明时是无参无返回值，那么该委托就只能存放无参无返回值的函数</p></blockquote><h3 id="委托的场景"><a href="#委托的场景" class="headerlink" title="委托的场景"></a>委托的场景</h3><p>委托常用于作为<strong>函数的参数</strong>和作为<strong>类的成员</strong></p><blockquote><p>当委托作为函数参数时，它的目的就是延迟处理一些逻辑</p><p>比如在函数内部时，可以先处理一些别的逻辑，再将其它逻辑的结果通过委托传入函数，然后执行</p></blockquote><h3 id="委托可以存放多个函数"><a href="#委托可以存放多个函数" class="headerlink" title="委托可以存放多个函数"></a>委托可以存放多个函数</h3><ul><li>委托增加函数</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MyDelegate d1 = Fun;<span class="comment">//将函数存入委托中</span></span><br><span class="line">d1 += Fun1;<span class="comment">//将其它函数再次存入委托中</span></span><br><span class="line">d1();<span class="comment">//分别调用两个函数</span></span><br></pre></td></tr></table></figure><blockquote><p>委托可以存放多个函数，这也意味着，它可以处理多个函数中不同的逻辑</p><p>这也类似设计模式中的观察者模式</p></blockquote><ul><li>委托删除函数</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MyDelegate d1 = Fun;<span class="comment">//将函数存入委托中</span></span><br><span class="line">d1 += Fun1;<span class="comment">//将其它函数再次存入委托中</span></span><br><span class="line">d1();<span class="comment">//分别调用两个函数</span></span><br><span class="line">d1 -= Fun;<span class="comment">//将Fun函数从委托中删除</span></span><br><span class="line">d1 = <span class="literal">null</span>;<span class="comment">//清空委托中的所有函数</span></span><br></pre></td></tr></table></figure><h3 id="系统自带委托"><a href="#系统自带委托" class="headerlink" title="系统自带委托"></a>系统自带委托</h3><p>使用系统自带委托之前，需要引用<strong>using System</strong>命名空间</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Action a = Fun;<span class="comment">//Acition是系统自带的委托</span></span><br></pre></td></tr></table></figure><hr><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>事件是基于委托的存在，它将委托进行了一层封装，让其更具安全性</p><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><p><code>访问修饰符 event 委托类型 事件名</code></p><p>事件是作为 成员变量存于类中，委托怎么使用，事件就怎么使用</p><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>匿名函数主要是<strong>配合委托</strong>和<strong>事件</strong>进行使用</p><h3 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">delegate</span>(参数列表)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//函数逻辑   </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>匿名函数的使用场景</p><p>1、函数中传递委托参数时</p><p>2、委托或事件赋值时</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C#补充 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C#知识点补充</title>
      <link href="blog/C#%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/"/>
      <url>blog/C#%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h2><p>在C#中变量的类型可以分为 <strong>值类型</strong>和<strong>引用类型</strong></p><p>值类型的<strong>数据存放在栈中</strong>，<strong>表示实际的数据</strong>，<strong>继承自System.ValueType</strong>,栈中内存自动释放。</p><p><strong>基本的数据类型</strong>和<strong>结构体</strong> 就是属于值类型</p><p>引用类型的数据存储在<strong>堆</strong>中，该变量存放的是指向堆中数据的<strong>指针</strong>或<strong>引用</strong>，继承自<strong>System.Object</strong>,堆中的<strong>内存由GC释放</strong>。</p><p><strong>string</strong>，<strong>数组</strong>以及<strong>类</strong> 都属于引用类型</p><h2 id="ref和out"><a href="#ref和out" class="headerlink" title="ref和out"></a>ref和out</h2><p><strong>ref</strong> 和 <strong>out</strong> 是<strong>函数参数</strong>的修饰符</p><p>作用：</p><p>使用<strong>ref</strong> 和 <strong>out</strong>修饰的 <strong>形参</strong>，在其内容改变后会<strong>影响到其实参的值</strong>，</p><blockquote><p>通俗的来说，使用 ref 和 out 修饰形参后，函数内形参的值变为多少 ，实参的值也变为多少</p></blockquote><p>区别：</p><ol><li><strong>ref 作为实参时，必须进行初始化</strong>，而out 则不用。</li><li><strong>out 作为形参时，必须在函数内部进行赋值</strong>，而ref 不用</li></ol><h2 id="params-关键字-变长参数"><a href="#params-关键字-变长参数" class="headerlink" title="params 关键字(变长参数)"></a>params 关键字(变长参数)</h2><p>使用params 关键字可以让传入函数的数组长度<strong>不固定</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Sum</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">int</span>[] arr</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,...,<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li>params 关键字后面必须是数组</li><li>函数参数中<strong>最多出现一个params</strong> 关键字，并且只能在<strong>最后一个参数</strong></li></ul><h2 id="构造、析构和垃圾回收"><a href="#构造、析构和垃圾回收" class="headerlink" title="构造、析构和垃圾回收"></a>构造、析构和垃圾回收</h2><p>C#的构造函数和C++类似，一般不用手动析构，重点是C#的自动垃圾回收机制GC</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p><strong>作用</strong>：</p><p>在实例化对象时，会调用构造函数用于<strong>对象初始化</strong>，如果不写，系统会默认提供一个无参构造</p><p>写法：</p><ol><li>没有返回值</li><li>函数名和类型相同</li><li>一般是public访问权限 (C++ 中不写访问权限)</li></ol><p>特点：</p><ol><li>构造函数允许发生重载</li><li>通过<strong>this</strong> 关键字一直指向当前对象</li></ol><h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><p>垃圾回收的过程是<strong>遍历堆上动态分配的所有对象</strong>，通过识别它们<strong>是否被引用</strong>，来确定哪些对象是垃圾，哪些对象仍要被引用</p><p>GC只负责<strong>堆上</strong>内存的垃圾回收，<strong>引用类型都是存储在堆上</strong>，所以它的<strong>分配</strong>和<strong>释放</strong>时由CG来管理的</p><p><img src="../../../../我的坚果云/notes/Unity四部曲/C%23 知识点/值类型和引用类型.assets/image-20220403230858579.png" alt="image-20220403230858579"></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主动进行垃圾回收，一般在loading过场时</span></span><br><span class="line">CG.Collect();</span><br></pre></td></tr></table></figure><h2 id="成员属性"><a href="#成员属性" class="headerlink" title="成员属性"></a>成员属性</h2><p>用于<strong>保护成员变量</strong>，为<strong>成员属性</strong>的<strong>获取</strong>和<strong>赋值</strong> <strong>添加逻辑处理</strong>，<strong>解决访问修饰符的局限性</strong></p><h3 id="get-和set"><a href="#get-和set" class="headerlink" title="get{}和set{}"></a>get{}和set{}</h3><p>作用：</p><p>通过访问成员属性的属性名，可以对<strong>private</strong> 和 <strong>protect</strong>修饰的成员变量进行<strong>获取</strong>和<strong>修改</strong></p><blockquote><p>jget{}语句块中将成员变量中的内容返回给属性名</p><p>再通过set{}语句块中的 value关键字，可以对成员变量中的内容进行修改</p></blockquote><p>基本语法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">访问修饰符 属性类型 属性名</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">get&#123;&#125;</span></span><br><span class="line"><span class="comment">set&#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><p>特点：get 和 set <strong>语句块前可以加访问修饰符</strong>，来设置该属性的可读或可写</p><ul><li>默认不加时 使用声明属性时的访问权限</li><li>添加的访问修饰符权限要 <strong>低于</strong>属性的访问权限</li><li>不能让get 和 set的访问权限都低于属性的权限</li></ul><blockquote><p>也就是说，不能出现 属性是私有访问权限，而get 和 set是公有权限的情况。</p><p>以及 get 和 set 至少有一个的访问权限要和属性的访问权限相同</p></blockquote><p>注意：</p><p>成员属性一般是用于<strong>私有</strong>的成员变量，我们不希望外部对其的值进行修改，所以一般来说只会用get{}语句块让外部进行读取，而不设置set{}语句块让外部修改</p><h3 id="自动属性"><a href="#自动属性" class="headerlink" title="自动属性"></a><strong>自动属性</strong></h3><p>如果有一个成员变量只希望外部能得不能改，并且又不需要做逻辑处理的话</p><p>就可以使用自动属性</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Peson</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Heigt&#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态类"><a href="#静态类" class="headerlink" title="静态类"></a>静态类</h2><p>用<strong>static</strong>修饰的类</p><p>特点：</p><ul><li>静态类中<strong>只能包含静态成员</strong></li><li>静态类<strong>不能被实例化</strong></li></ul><p>作用：</p><ul><li>将常用的静态成员写在静态类中，方便使用</li><li>静态类不能被实例化，更能体现<strong>工具类</strong>的<strong>唯一性</strong></li><li>比如，C#中的Console就是静态类</li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>C# 语法和C++类似，但不需要声明继承访问权限。</p><p>C#仅支持单继承，而C++支持多继承</p><p>语法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">A</span> : <span class="title">B</span>;</span><br></pre></td></tr></table></figure><p>注意：</p><p>子类和父类出现同名成员时，子类的成员会默认将父类的成员重写，这一点与C++相同</p><h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><p>里氏替换原则是面向对象七大原则中最重要的原则</p><p>概念：</p><p><strong>任何父类出现的地方，子类都可以替代</strong></p><p>特点：</p><p>语法表现—父类容器装子类对象，因为子类对象包含了父类的所有内容</p><p>作用：</p><p>方便进行对象存储和管理</p><p><strong>is</strong> 和 <strong>as</strong></p><p><strong>is</strong>：<strong>判断一个对象是否为指定的类对象</strong>，返回值为bool</p><p>as：将父对象类型转换为子对象类型</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">GameObject</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Player</span> : <span class="title">GameObject</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayerAtk</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GameObject obj = <span class="keyword">new</span> Player();<span class="comment">//用父类的类型创建子类对象,允许，但不能使用子类方法</span></span><br><span class="line"></span><br><span class="line">(obj <span class="keyword">as</span> Player).PlayerAtk();<span class="comment">//将父类的类型转换为子类类型后</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="装箱和拆箱"><a href="#装箱和拆箱" class="headerlink" title="装箱和拆箱"></a>装箱和拆箱</h2><p>用<strong>object</strong> 存储 <strong>值类型</strong>被称为<strong>装箱</strong>，再把<strong>object</strong> 转为<strong>值类型</strong> 被称为<strong>拆箱</strong></p><p>装箱</p><p>把<strong>值类型用引用类型存储</strong>，<strong>栈内存会移到堆内存</strong>中</p><p>拆箱</p><p>把<strong>引用类型存储的值类型取出来</strong>，<strong>堆内存会迁移到栈内存</strong>中</p><p>好处：不确定类型时，可以方便参数的存储和传递</p><p>坏处：内存迁移时，会增加性能消耗</p><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>本质是一个<strong>object</strong> 类型的数组，所以可以为其添加任意类型的元素</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ArrayList arr = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">arr.Add(<span class="number">1</span>);<span class="comment">//增加任意类型的元素</span></span><br><span class="line"></span><br><span class="line">arr.Remove(<span class="number">1</span>);<span class="comment">//删除元素</span></span><br><span class="line"></span><br><span class="line">arr.Contains(<span class="number">1</span>);<span class="comment">//查找元素是否存在，返回值为bool</span></span><br><span class="line"></span><br><span class="line">arr.Count;<span class="comment">//数组长度</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>使用ArrayList的过程中会存在装箱，拆箱的问题。所以尽量少用</p><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>栈的本质也是一个object[ ] 数组，只是封装了特殊的存储规则</p><p>栈是一种“先进后出”的数据结构</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要引入命名空间System.Collections</span></span><br><span class="line">Stack stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">stack.Push(<span class="number">1</span>);<span class="comment">//往栈中压入元素</span></span><br><span class="line"></span><br><span class="line">Object v = stack.Pop();<span class="comment">//取栈中的最上方元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//栈无法查看指定位置的元素。只能查看栈顶的内容</span></span><br><span class="line">v = stack.Peek();</span><br><span class="line"></span><br><span class="line">stack.Contains(<span class="number">1</span>);<span class="comment">//查看元素是否存在栈中</span></span><br></pre></td></tr></table></figure><h2 id="Hashtalbe"><a href="#Hashtalbe" class="headerlink" title="Hashtalbe"></a>Hashtalbe</h2><p>Hashtable 又称散列表，是基于键的哈希代码组织起来的 <strong>键值对</strong>形式</p><h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><p>让泛型的类型有一定的限制，关键字<strong>where</strong></p><p>泛型一共有6种约束</p><ol><li>值类型：where 泛型字母：struct</li><li>引用类型：where 泛型字母：class</li><li>存在无参公共构造函数：where 泛型字母：new()</li><li>某个类本身或者其派生类：where 泛型字母：类名</li><li>某个接口的派生类：where 泛型字母：接口名</li><li>另一个泛型或其派生类型：where 泛型字母：另一个泛型字母</li></ol><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>List的本质 是一共<strong>可变类型</strong>的<strong>泛型数组</strong></p><p>可以直接指定数组的内容，避免了装箱和拆箱</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要引入命名空间 using System.Collections.Generic</span></span><br><span class="line">List&lt;<span class="built_in">int</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">List&lt;<span class="built_in">string</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h2><p>可以将字典理解为 拥有泛型的Hashtable。它也是基于键的哈希代码组织起来的 键/值对</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//申明int类型的键，string类型的值</span></span><br><span class="line">Dictionary&lt;<span class="built_in">int</span>,<span class="built_in">string</span>&gt; dictionary = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>,<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//不能出现相同的键</span></span><br><span class="line">dictionary.Add(<span class="number">1</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">dictionary.Add(<span class="number">2</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">dicitionary.Remove(<span class="number">1</span>);<span class="comment">//删除键</span></span><br><span class="line"></span><br><span class="line">dicitionary.Clear();<span class="comment">//清空</span></span><br><span class="line"></span><br><span class="line">dicitionary[<span class="number">1</span>];<span class="comment">//通过键去查看值，找不到则返回空</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代器遍历所有键</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="built_in">int</span> item <span class="keyword">in</span> dicitionary.Keys)&#123;</span><br><span class="line">   Console.WriteLine(item);<span class="comment">//输出所有值</span></span><br><span class="line">    Console.WriteLine(dicitionary[item]);<span class="comment">//输出所有键</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代器遍历值</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="built_in">int</span> item <span class="keyword">in</span> dicitionary.Values)&#123;</span><br><span class="line">    Console.WriteLine(item);<span class="comment">//输出所有值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代器遍历键值对</span></span><br><span class="line"><span class="keyword">foreach</span>(KeyValuePair&lt;<span class="built_in">int</span>,<span class="built_in">string</span>&gt; item <span class="keyword">in</span> dictionary)&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;键&quot;</span> + item.Key + <span class="string">&quot;值&quot;</span> + item.Va);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C#补充 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity入门基础</title>
      <link href="blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"/>
      <url>blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-Unity运行机制"><a href="#1-Unity运行机制" class="headerlink" title="1. Unity运行机制"></a>1. Unity运行机制</h2><h3 id="1-1-生命周期"><a href="#1-1-生命周期" class="headerlink" title="1.1 生命周期"></a>1.1 生命周期</h3><p> 生命周期的<strong>概念</strong></p><p>所有继承MonoBehavior的脚本 最终目的都是为了挂载到游戏对象上。</p><p>而C#<strong>脚本</strong>在<strong>挂载</strong>到<strong>游戏对象</strong>上时，就会在整个生命周期中通过<strong>反射</strong>自动<strong>调用</strong>的一些<strong>特殊函数</strong></p><p>生命周期的<strong>种类</strong></p><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-16457084803721.png" class="" title="生命周期"><h3 id="1-2-特性"><a href="#1-2-特性" class="headerlink" title="1.2 特性"></a>1.2 特性</h3><p>在C#脚本中，一般只有<strong>公有</strong>的成员变量才能显示在<strong>Inspector</strong>窗口中</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> a;</span><br><span class="line"><span class="keyword">protected</span> <span class="built_in">int</span> b;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> c;</span><br></pre></td></tr></table></figure><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220224212310086-16457089925892.png" class="" title="image-20220224212310086"><h4 id="1-强制序列化字段特性"><a href="#1-强制序列化字段特性" class="headerlink" title="1.强制序列化字段特性"></a>1.强制序列化字段特性</h4><p>但是我们可以使用<strong>[Serializefield]</strong>特性，让<strong>私有</strong>和<strong>保护</strong>成员变量显示在Inspector窗口中,</p><p>还能使用<strong>[System.Serializefield]</strong>特性，使得<strong>自定义类型</strong>显示在窗口</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> B;</span><br><span class="line"></span><br><span class="line">[<span class="meta">SerializeField</span>]</span><br><span class="line"><span class="keyword">protected</span> <span class="built_in">int</span> A;</span><br><span class="line"></span><br><span class="line">[<span class="meta">SerializeField</span>]</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> C;</span><br></pre></td></tr></table></figure><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220224212725928-16457092469983.png" class="" title="image-20220224212725928"><h4 id="2-隐藏特性"><a href="#2-隐藏特性" class="headerlink" title="2.隐藏特性"></a>2.隐藏特性</h4><p>也可以使用<strong>[HideInInspector]</strong>特性，<strong>隐藏</strong>不需要的成员变量</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HideInInspector</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> B;</span><br><span class="line"></span><br><span class="line">[<span class="meta">SerializeField</span>]</span><br><span class="line"><span class="keyword">protected</span> <span class="built_in">int</span> A;</span><br><span class="line"></span><br><span class="line">[<span class="meta">SerializeField</span>]</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> C;</span><br></pre></td></tr></table></figure><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220224213130673-16457094917834.png" class="" title="image-20220224213130673"><h4 id="3-辅助特性"><a href="#3-辅助特性" class="headerlink" title="3.辅助特性"></a>3.辅助特性</h4><ul><li><strong>分组说明</strong>特性 <strong>Header</strong>：为成员分组</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Header(<span class="meta-string">&quot;苹果&quot;</span>)</span>]</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">int</span> B;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Header(<span class="meta-string">&quot;香蕉&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">SerializeField</span>]</span><br><span class="line"><span class="keyword">protected</span> <span class="built_in">int</span> A;</span><br><span class="line"></span><br><span class="line">[<span class="meta">SerializeField</span>]</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> C;</span><br></pre></td></tr></table></figure><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220224214205233.png" class="" title="image-20220224214205233"><ul><li><strong>悬停注释 </strong>  Tooltip：为变量添加说明</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Tooltip(<span class="meta-string">&quot;苹果&quot;</span>)</span>]</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">int</span> B;</span><br><span class="line">   </span><br><span class="line">   [<span class="meta">Header(<span class="meta-string">&quot;香蕉&quot;</span>)</span>]</span><br><span class="line">   [<span class="meta">SerializeField</span>]</span><br><span class="line">   <span class="keyword">protected</span> <span class="built_in">int</span> A;</span><br><span class="line"></span><br><span class="line">   [<span class="meta">SerializeField</span>]</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">int</span> C;</span><br></pre></td></tr></table></figure><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220224214551250.png" class="" title="image-20220224214551250"><ul><li>间隔特性 Space():让两个字段出现间隔</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Tooltip(<span class="meta-string">&quot;苹果&quot;</span>)</span>]</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">int</span> B;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Header(<span class="meta-string">&quot;香蕉&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">SerializeField</span>]</span><br><span class="line"><span class="keyword">protected</span> <span class="built_in">int</span> A;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Space()</span>]</span><br><span class="line">[<span class="meta">SerializeField</span>]</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> C;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220224214819807.png" class="" title="image-20220224214819807"><ul><li>修饰数值的滑条范围 <strong>Range</strong></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Range(0,10)</span>]</span><br><span class="line">[<span class="meta">SerializeField</span>]</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> C;</span><br></pre></td></tr></table></figure><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220224215033513.png" class="" title="image-20220224215033513"><ul><li>滚动条显示字符串 TextArea(3,4): 默认超过3行显示滚动条</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TextArea(3,4)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> A;</span><br></pre></td></tr></table></figure><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220224215622401.png" class="" title="image-20220224215622401"><ul><li>为变量添加快捷方法 ContextMenuItem</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数1 显示按钮名</span></span><br><span class="line"><span class="comment">//参数2 方法名 不能有参数</span></span><br><span class="line">[<span class="meta">ContextMenuItem(<span class="meta-string">&quot;重置钱&quot;</span>,<span class="meta-string">&quot;Test&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> money;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    money = <span class="number">99</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220224220733718.png" class="" title="image-20220224220733718"><h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h4><ol><li>Inspector窗口中的变量关联的就是对象的成员变量，运行时改变他们就是改变成员变量</li><li>拖拽到游戏对象后，再修改脚本中的变量，不会改变Inspector窗口的值<ol><li>通过重新添加脚本</li><li>手动修改窗口的值与脚本中变量值保持一致</li></ol></li><li>运行中修改窗口中的值，它并不会保存</li></ol><h3 id="1-3-MonoBehavior中的重要内容"><a href="#1-3-MonoBehavior中的重要内容" class="headerlink" title="1.3 MonoBehavior中的重要内容"></a>1.3 MonoBehavior中的重要内容</h3><h4 id="1-3-1-Mono的重要成员"><a href="#1-3-1-Mono的重要成员" class="headerlink" title="1.3.1 Mono的重要成员"></a>1.3.1 Mono的重要成员</h4><ul><li>获取依附的GameObject</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取依附的游戏对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Debug.Log(<span class="keyword">this</span>.gameObject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220224222316952.png" class="" title="image-20220224222316952"><ul><li>获取依附的Gameobject的<strong>位置信息</strong></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">       <span class="comment">//获取脚本依附游戏对象的位置信息</span></span><br><span class="line">       Debug.Log(<span class="keyword">this</span>.transform.position); <span class="comment">//位置</span></span><br><span class="line">       Debug.Log(<span class="keyword">this</span>.transform.eulerAngles);  <span class="comment">//角度</span></span><br><span class="line">       Debug.Log(<span class="keyword">this</span>.transform.lossyScale);   <span class="comment">//缩放大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">       Debug.Log(<span class="keyword">this</span>.gameObject.transform.position); <span class="comment">//位置</span></span><br><span class="line">       Debug.Log(<span class="keyword">this</span>.gameObject.transform.eulerAngles);  <span class="comment">//角度</span></span><br><span class="line">       Debug.Log(<span class="keyword">this</span>.gameObject.transform.lossyScale);   <span class="comment">//缩放大小</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220224223121585.png" class="" title="image-20220224223121585"><ul><li>获取脚本依附游戏对象是否<strong>激活</strong></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取脚本是否激活</span></span><br><span class="line"><span class="keyword">this</span>.enabled = <span class="literal">false</span>;   <span class="comment">//失活</span></span><br></pre></td></tr></table></figure><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220224223542431.png" class="" title="image-20220224223542431"><ul><li>通过脚本获取其他游戏对象的信息<ol><li>其他游戏对象必须挂载有<strong>相同脚本</strong></li><li>申明一个与<strong>类名相同</strong>的成员变量</li><li><strong>互相拖拽</strong>游戏对象到该成员变量中让二者形成<strong>关联</strong></li><li>最后即可使用该成员变量获取其他游戏对象信息</li></ol></li></ul><h4 id="1-3-2-Mono的重要方法"><a href="#1-3-2-Mono的重要方法" class="headerlink" title="1.3.2 Mono的重要方法"></a>1.3.2 Mono的重要方法</h4><p><strong>当前</strong>脚本如何得到依附对象上挂载的<strong>其他</strong>脚本</p><ol><li><p>得到自己挂载的单个脚本</p><p>根据<strong>泛型</strong>获取</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取当前对象的其他脚本</span></span><br><span class="line"><span class="comment">//通过泛型获取</span></span><br><span class="line">Test t=<span class="keyword">this</span>.GetComponent&lt;Test&gt;();   </span><br><span class="line">Debug.Log(t);</span><br></pre></td></tr></table></figure><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220228152032950.png" class="" title="image-20220228152032950"></li></ol><p>2.得到<strong>子对象</strong>挂载的脚本(它默认也会找自己身上是否挂载脚本)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取子对象脚本</span></span><br><span class="line">t=<span class="keyword">this</span>.GetComponentInChildren&lt;Test&gt;();</span><br><span class="line">Debug.Log(t);</span><br></pre></td></tr></table></figure><hr><h2 id="2-Unity-重要组件和API"><a href="#2-Unity-重要组件和API" class="headerlink" title="2. Unity 重要组件和API"></a>2. Unity 重要组件和API</h2><h3 id="2-1-GameObject"><a href="#2-1-GameObject" class="headerlink" title="2.1 GameObject"></a>2.1 GameObject</h3><h4 id="2-1-1GameObject中的成员变量"><a href="#2-1-1GameObject中的成员变量" class="headerlink" title="2.1.1GameObject中的成员变量"></a>2.1.1GameObject中的成员变量</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//名字</span></span><br><span class="line">print(<span class="keyword">this</span>.gameObject.name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//改名</span></span><br><span class="line"><span class="keyword">this</span>.gameObject.name = <span class="string">&quot;正方体&quot;</span>;</span><br><span class="line">print(<span class="keyword">this</span>.gameObject.name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否激活</span></span><br><span class="line">print(<span class="keyword">this</span>.gameObject.activeSelf);</span><br><span class="line"></span><br><span class="line"><span class="comment">//层级</span></span><br><span class="line">print(<span class="keyword">this</span>.gameObject.layer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//标签</span></span><br><span class="line">print(<span class="keyword">this</span>.gameObject.tag);</span><br><span class="line"></span><br><span class="line"><span class="comment">//transform</span></span><br><span class="line">print(<span class="keyword">this</span>.gameObject.transform.position);</span><br><span class="line">print(<span class="keyword">this</span>.gameObject.transform.eulerAngles);</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220228155747064.png" class="" title="image-20220228155747064"><h4 id="2-1-2-GameObject中的静态方法"><a href="#2-1-2-GameObject中的静态方法" class="headerlink" title="2.1.2 GameObject中的静态方法"></a>2.1.2 GameObject中的静态方法</h4><ul><li>创建自带几何体</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建自带的集合体</span></span><br><span class="line"><span class="comment">//只要得到了一个GameObject对象,就可以通过obj.GetComponent来得取身上的任何脚本信息</span></span><br><span class="line">GameObject obj = GameObject.CreatePrimitive(PrimitiveType.Cube);</span><br><span class="line">obj.name = <span class="string">&quot;Unity创建的几何体&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li><p>查找对象相关知识</p><ol><li>通过tag查找单个对象(<strong>无法找到失活对象</strong>)</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过tag查找对象</span></span><br><span class="line">GameObject obj2 = GameObject.FindGameObjectWithTag(<span class="string">&quot;Player&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (obj2 != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">  print(obj2.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  print(<span class="string">&quot;没有找到相应的对象&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>注意：当多个对象的tag相同时，无法进行精确查找</p><p>​    2.通过tag查找多个对象</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过tag查找多个对象</span></span><br><span class="line">GameObject [ ] objs = GameObject.FindGameObjectsWithTag(<span class="string">&quot;Player&quot;</span>);</span><br><span class="line">print(<span class="string">&quot;找到tag为Player对象的个数&quot;</span> + objs.Length);</span><br></pre></td></tr></table></figure><ul><li>实例化对象(克隆对象)的方法</li></ul><p>根据一个GameObject对象或者预设体 动态创建出相同的对象</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> GameObject obj;<span class="comment">//先定义obj对象</span></span><br><span class="line"></span><br><span class="line">GameObject myobj= GameObject.Instantiate(obj);</span><br></pre></td></tr></table></figure><ul><li>删除对象</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GameObject.Destroy(obj);</span><br><span class="line"></span><br><span class="line">GameObject.Destroy(obj，<span class="number">3</span>);<span class="comment">//延迟3秒删除</span></span><br><span class="line"></span><br><span class="line">GameObject.Destroy(<span class="keyword">this</span>);<span class="comment">//还可以删除指定的脚本对象</span></span><br></pre></td></tr></table></figure><p>注意：Destory方法 不会马上移除对象，一般情况下它会在下一帧把这个对象移除，降低卡顿的几率</p><ul><li>过场景不移除</li></ul><p>默认情况 在切换场景时 场景中对象都会被自动删除掉</p><p>可以通过下面代码 让依附的GameObject对象不被移除</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GameObject.DontDestroyLoad(<span class="keyword">this</span>.Object);</span><br></pre></td></tr></table></figure><h4 id="2-1-3-GameObject中的成员方法"><a href="#2-1-3-GameObject中的成员方法" class="headerlink" title="2.1.3 GameObject中的成员方法"></a>2.1.3 GameObject中的成员方法</h4><ul><li>创建空物体</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GameObject obj = <span class="keyword">new</span> GameObject(<span class="string">&quot;创建空物体并添加脚本&quot;</span>,<span class="keyword">typeof</span>(clong)); </span><br></pre></td></tr></table></figure><ul><li>为指定对象添加脚本</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">est test= obj.AddComponent&lt;Test&gt;();</span><br></pre></td></tr></table></figure><ul><li>标签比较</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.gameObject.CompareTag(<span class="string">&quot;Player&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">print(<span class="string">&quot;对象标签 是 Player&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">print(<span class="string">&quot;对象标签 不是 Player&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置激活失活</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.SetActive(flase);<span class="comment">//flase失活true 激活</span></span><br></pre></td></tr></table></figure><h3 id="2-2-Time相关"><a href="#2-2-Time相关" class="headerlink" title="2.2 Time相关"></a>2.2 Time相关</h3><p>主要用于 游戏中参与<strong>位移</strong>，<strong>记时</strong>，<strong>时间暂停</strong>等</p><p><strong>时间缩放比例</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Time.timeScale=<span class="number">0</span>;<span class="comment">//时间停止</span></span><br><span class="line"></span><br><span class="line">Time.timeScale=<span class="number">1</span>;<span class="comment">//回复正常,默认时间</span></span><br><span class="line"></span><br><span class="line">Time.timeScale=<span class="number">2</span>;<span class="comment">//2倍数</span></span><br></pre></td></tr></table></figure><p><strong>帧间隔时间</strong>：最近的一帧 用了多长时间(秒)</p><ul><li>主要用来计算<strong>位移</strong></li><li>路程=时间*速度</li><li>如果希望 游戏有<strong>倍速</strong>或者<strong>暂停</strong>功能，就使用 <strong>deltaTime</strong></li><li>如果希望 游戏不受暂停影响 就使用<strong>unscaledDeltaTime</strong></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(Time.deltaTime);<span class="comment">//受到scale影响</span></span><br><span class="line"></span><br><span class="line">print(Time.unscaledDeltaTime)<span class="comment">//不受scale影响</span></span><br></pre></td></tr></table></figure><p><strong>游戏开始到现在的时间</strong></p><ul><li>主要用于单机游戏的 <strong>计时</strong></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(Time.time);<span class="comment">//受到scale影响</span></span><br><span class="line"></span><br><span class="line">print(Time.unscaledTime);<span class="comment">//不受scale影响</span></span><br></pre></td></tr></table></figure><p><strong>物理帧间隔时间</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FixedUpdate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    print(Time.fixedDeltaTime);<span class="comment">//受到scale影响</span></span><br><span class="line">    </span><br><span class="line">    print(Time.fixedUnscaledDeltaTime);<span class="comment">//不受scale影响</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>帧数</strong></p><ul><li>游戏在运行过程中跑的循环数</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(Time.frameCout);</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：常用Time相关内容</p><ol><li>帧间隔时间，计算位移相关内容</li><li>时间缩放比例，用来暂停或者倍速</li><li>帧数(帧同步)</li></ol><h3 id="2-3-Transform"><a href="#2-3-Transform" class="headerlink" title="2.3 Transform"></a>2.3 Transform</h3><p>游戏对象的<strong>位移、旋转、缩放、父子关系、坐标转换</strong>等操作都是由它来处理</p><h4 id="2-3-1-Vector3的基础知识"><a href="#2-3-1-Vector3的基础知识" class="headerlink" title="2.3.1 Vector3的基础知识"></a>2.3.1 <strong>Vector3</strong>的基础知识</h4><p>主要用来表示三维坐标系中的 <strong>一个点</strong> 或者<strong>一个向量</strong></p><ul><li>Vector3的常用属性</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//申明</span></span><br><span class="line">Vector3 v = <span class="keyword">new</span> Vector3(<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//常用属性</span></span><br><span class="line">print(Vector3.zero);<span class="comment">//0,0,0</span></span><br><span class="line">print(Vector3.right);<span class="comment">//1,0,0</span></span><br><span class="line">print(Vector3.forward);<span class="comment">//0,0,1</span></span><br><span class="line">print(Vector3,up);<span class="comment">//0,1,0</span></span><br></pre></td></tr></table></figure><ul><li>Vector3的常用方法，计算两点之间的距离</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vector3.Distance(v1.v2)</span><br></pre></td></tr></table></figure><h4 id="2-3-2-位置"><a href="#2-3-2-位置" class="headerlink" title="2.3.2 位置"></a>2.3.2 <strong>位置</strong></h4><ul><li>相对世界坐标位置</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="keyword">this</span>.transform.position);<span class="comment">//获取相对世界坐标位置</span></span><br></pre></td></tr></table></figure><ul><li>相对本地坐标位置(父对象)</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="keyword">this</span>.transform.localPosition);</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>通过<strong>position</strong>得到的位置是<strong>相对于世界坐标系</strong>的 原点位置</li><li>通过<strong>localPosition</strong>得到的位置是相对于<strong>父对象</strong>的 位置</li><li>而<strong>面板上显示的位置</strong>是<strong>相对于父对象的位置</strong></li><li>只有该对象<strong>没有父对象</strong>或者<strong>父对象的坐标在原点</strong>时，得到的位置才与面板保持一致</li></ol><p><strong>赋值</strong></p><p>由于<strong>transform</strong>是<strong>Vector3</strong> 数据类型的</p><p>所以只能通过Vector3类型的变量进行赋值</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果只要想更改一个坐标，而保持其余坐标一致</span></span><br><span class="line"><span class="keyword">this</span>.transform.position = <span class="keyword">new</span> Vector3(<span class="number">20</span>,<span class="keyword">this</span>.transform.position.y,<span class="keyword">this</span>.transform.position.z)</span><br></pre></td></tr></table></figure><p><strong>对象当前朝向</strong></p><p>世界坐标系中，Z轴为前方，X轴为右方，Y轴为上方。可以用右手来判断</p><p>而当对象进行<strong>旋转</strong>时，对象的朝向将<strong>不再</strong>与世界坐标保持一致</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(transform.position.forward);<span class="comment">//对象当前的面朝向，与对象的旋转有关</span></span><br></pre></td></tr></table></figure><h4 id="2-3-3-位移"><a href="#2-3-3-位移" class="headerlink" title="2.3.3 位移"></a>2.3.3 位移</h4><p>坐标系下的位移计算公式：路程=方向<em> 速度 </em> 时间</p><ul><li>通过公式实现位移</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//朝向自己的前方移动,该方法会随着自身的旋转而变换位置</span></span><br><span class="line"><span class="keyword">this</span>.transform.position+=<span class="keyword">this</span>.transform.forward*<span class="number">1</span>*Time.deltaTime;    </span><br><span class="line"></span><br><span class="line"><span class="comment">//朝向世界坐标的前方移动，不会变换位置</span></span><br><span class="line"><span class="keyword">this</span>.transform.position += Vector3.forward*<span class="number">1</span>*Time.deltaTime;</span><br></pre></td></tr></table></figure><p><strong>利用API实现位移</strong>（主要使用方式）</p><p><strong>Translate</strong>(参数一：表示位移多少,参数二：表示 相对坐标系 默认是相对自己的坐标系)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//朝着世界坐标向前方移动 </span></span><br><span class="line"><span class="keyword">this</span>.transform.Translate(Vector3.forward*<span class="number">1</span>*Time.deltaTime,Space.World);</span><br><span class="line"></span><br><span class="line"><span class="comment">//朝着对象本身的前方移动</span></span><br><span class="line"> <span class="keyword">this</span>.transform.Translate(<span class="keyword">this</span>.transform.forward*<span class="number">1</span>*Time.deltaTime,Space.Self);</span><br></pre></td></tr></table></figure><h4 id="2-3-4-角度和旋转"><a href="#2-3-4-角度和旋转" class="headerlink" title="2.3.4 角度和旋转"></a>2.3.4 角度和旋转</h4><p>相对世界坐标角度</p><ul><li><p>由于position返回的对象是四元数结构类型</p></li><li><p>所以此处调用的属性是<strong>eulerAngles</strong>(欧拉角)，</p></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相对世界坐标角度</span></span><br><span class="line">print(<span class="keyword">this</span>.transform.eulerAngles);</span><br></pre></td></tr></table></figure><p>相对父对象角度</p><ul><li>与位置类似，面板上显示的角度是本地坐标角度，当该对象有父对象时，调用localEulerAngles属性才能与面板上显示角度保持一致</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相对父对象坐标角度</span></span><br><span class="line">print(<span class="keyword">this</span>.transform.localEulerAngles);</span><br></pre></td></tr></table></figure><p>注意：</p><p>角度与位置一样，不能单独改变一个轴向的属性，需要用Vector3一起设置</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.transform.eulerAngles = <span class="keyword">new</span> Vector3</span><br><span class="line">    (<span class="number">10</span>, <span class="keyword">this</span>.transform.eulerAngles.y, <span class="keyword">this</span>.transform.eulerAngles.z);</span><br></pre></td></tr></table></figure><p><strong>旋转相关</strong></p><p><strong>自转</strong>：使用Rotate( )</p><p>每个轴 具体转多少度</p><ul><li>参数一： 旋转角度</li><li>参数二： 是坐标轴  默认为当前对象的轴向。可以用 Space.World 更改为世界坐标</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相对于世界坐标轴的y轴进行自传</span></span><br><span class="line"><span class="keyword">this</span>.transform.Rotate(<span class="keyword">new</span> Vector3(<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>)*Time.deltaTime, Space.World);</span><br></pre></td></tr></table></figure><p>相对于某个轴 转多少度</p><ul><li>参数一：相对于哪个轴进行转动</li><li>参数二：转动的 角度多少</li><li>参数三：是坐标轴  默认为当前对象的轴向</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.transform.Rotate(Vector3.right,<span class="number">10</span>*Time.deltaTime, Space.World);</span><br></pre></td></tr></table></figure><p>绕着一个点进行<strong>公转</strong>：RotateAround( )</p><p>参数一：公转圆心所在<strong>位置</strong></p><p>参数二：公转轴向</p><p>参数三：公转度数</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绕着Z轴进行公转</span></span><br><span class="line"><span class="keyword">this</span>.transform.RotateAround(Vector3.zero,Vector3.up,<span class="number">10</span>*Time.deltaTime);</span><br></pre></td></tr></table></figure><h4 id="2-3-5-缩放和看向"><a href="#2-3-5-缩放和看向" class="headerlink" title="2.3.5 缩放和看向"></a>2.3.5 缩放和看向</h4><p>相对世界坐标缩放</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="keyword">this</span>.transform.lossyScale);</span><br></pre></td></tr></table></figure><p>相对本地坐标系(父对象)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="keyword">this</span>.transform.localScale);</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>缩放同样不能该xyz 只能用Vector3()一起改</li><li>不能更改世界坐标的缩放大小，<strong>只能修改本地坐标缩放</strong></li><li>Unity没有提供缩放对应的API</li></ul><p>对象在本地坐标下的<strong>持续缩放</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.transform.localScale += Vector3.one*Time.deltaTime;</span><br></pre></td></tr></table></figure><p><strong>看向</strong></p><p>可以让一个对象的面朝向 始终看向一个点或者另一个对象</p><p>使用LookAt()</p><p>可以传入一个点</p><p>或者一个对象的Transform信息</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、创建一个Transform的属性</span></span><br><span class="line"><span class="keyword">public</span> Transform lookAtObj;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、在Update中调用LookAt方法</span></span><br><span class="line"><span class="keyword">this</span>.transform.LookAt(lookAtObj);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、最后在Unity中拖动目标对象到脚本的lookAtObj属性中</span></span><br></pre></td></tr></table></figure><p><strong>作用</strong>：</p><ul><li>可以实现摄像机的视角跟随</li><li>以及简单AI的目标瞄向</li></ul><h4 id="2-3-6-父子关系"><a href="#2-3-6-父子关系" class="headerlink" title="2.3.6 父子关系"></a>2.3.6 父子关系</h4><p>transform面板显示的是<strong>当前对象</strong>的位置信息</p><p>当<strong>没有父子关系</strong>时，当前对象的位置就是在<strong>世界坐标系</strong>下</p><p>而在设置父子关系之后，transform面板显示的就是<strong>本地坐标系</strong></p><p>所以transform面板上的数据会从<strong>世界坐标变成本地坐标</strong></p><p>取消父子关系后，就会<strong>重新变回世界坐标</strong></p><p><strong>获取和设置父对象</strong></p><ul><li>获取父对象</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="keyword">this</span>.transform.parent.name);</span><br></pre></td></tr></table></figure><ul><li>取消父对象</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.transform.parent = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><ul><li>设置新的父对象</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、设置GameObject 属性</span></span><br><span class="line"><span class="keyword">public</span> GameObject obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、用obj的transform属性做初始化操作</span></span><br><span class="line"><span class="keyword">this</span>.transform.parent=obj.transform;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、将父对象拖拽到面板上的obj对象中</span></span><br></pre></td></tr></table></figure><p>利用API设置父子关系</p><p><strong>SetParent()</strong></p><p>参数一：新父对象的位置</p><p>参数二：是否保留世界坐标的 位置信息。</p><ul><li>true 默认保留，设置父子关系时 用世界坐标系 和 父对象 进行计算 得到本地坐标系的信息</li><li>false 不会保留 设置父子关系时 会直接把世界坐标系下的 transform 赋值到 本地坐标中</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取消父对象</span></span><br><span class="line"><span class="keyword">this</span>.transform.SetParent(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置新的父对象</span></span><br><span class="line"><span class="keyword">this</span>.transform.SetParent(obj.transform,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p><strong>取消子对象</strong></p><p>仅能取消自己的子对象，不能取消子对象的子对象</p><p>DetachChildren()</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.transform.DetachChildren();</span><br></pre></td></tr></table></figure><p><strong>获取子对象</strong></p><ul><li>按照名字查找子对象，但并不能查找”孙子”</li></ul><p>Find方法能找到 失活对象！</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Find方法能找到 失活对象！ 而GameObject相关的 查找 找不到失活对象</span></span><br><span class="line">print(<span class="keyword">this</span>.transform.Find(<span class="string">&quot;Cube(1)&quot;</span>).name);</span><br></pre></td></tr></table></figure><ul><li>遍历子对象</li></ul><p>失活的子对象也算数量</p><p>”孙子“不会算数量</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//统计子对象的总数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.transform.childCount; i++)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//根据编号获取子对象的 transform信息</span></span><br><span class="line">  print(<span class="keyword">this</span>.transform.GetChild(i).name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>操作子对象</strong></p><ul><li>判断父对象是谁</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断该对象是否为自己的父对象</span></span><br><span class="line"><span class="keyword">public</span> Transform son;</span><br><span class="line">son.IsChildOf(<span class="keyword">this</span>.transform);</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后将需要判断的对象拖到脚本的son属性中</span></span><br></pre></td></tr></table></figure><ul><li>得到子对象的编号</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编号从0开始</span></span><br><span class="line">print(son.GetSiblingIndex());</span><br><span class="line"></span><br><span class="line"><span class="comment">//将自己的编号设置为1，如果超出范围，将会设置到</span></span><br><span class="line">son.SetSibilingIndex(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要得到哪个子对象编号，就将该对象拖入到son属性中</span></span><br></pre></td></tr></table></figure><h4 id="2-3-7-坐标转换"><a href="#2-3-7-坐标转换" class="headerlink" title="2.3.7 坐标转换"></a>2.3.7 坐标转换</h4><p>世界坐标转本地坐标</p><p>概念：</p><p>表明该点在世界坐标上，但在本地坐标系表示出来</p><p>API：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将点(0,0,1)转换,受到缩放影响</span></span><br><span class="line">print(<span class="string">&quot;转换后的点&quot;</span>+<span class="keyword">this</span>.transform.InverseTransformPoint(Vector.forward));</span><br><span class="line"></span><br><span class="line"><span class="comment">//将方向转换,受到缩放影响</span></span><br><span class="line">print(<span class="string">&quot;转换后的点&quot;</span>+<span class="keyword">this</span>.transform.InverseTransformDirection(Vector.forward));</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220306152818440.png" class="" title="image-20220306152818440"><ul><li>转换关系受到两点的位置影响</li></ul><p><strong>本地坐标转世界坐标</strong></p><p>概念：</p><p>表明该点在本地坐标上，但要在世界坐标上表示出来</p><p>API</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本地的点转世界的点</span></span><br><span class="line">print(<span class="keyword">this</span>.transform.TransformPoint(Vector3.forward));</span><br><span class="line"></span><br><span class="line"><span class="comment">//本地的方向转世界的方向</span></span><br><span class="line">print(<span class="keyword">this</span>.transform.TransformVector(Vector3.forward));</span><br></pre></td></tr></table></figure><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220306155711042.png" class="" title="image-20220306155711042"><p><strong>总结</strong>：</p><ul><li><strong>本地坐标系的点 转世界坐标系的点 极其重要</strong></li><li>当角色需要攻击前方的单位时，只需要将对方的本地坐标位置转换为世界坐标位置，就可以进行攻击范围判断</li></ul><h3 id="2-4-Input和Screen"><a href="#2-4-Input和Screen" class="headerlink" title="2.4 Input和Screen"></a>2.4 Input和Screen</h3><h4 id="2-4-1-输入相关Input"><a href="#2-4-1-输入相关Input" class="headerlink" title="2.4.1 输入相关Input"></a>2.4.1 输入相关Input</h4><p>注意：输入相关内容，肯定是输入在Update当中</p><p> 知识点一：<strong>鼠标在屏幕输入</strong></p><p>屏幕的坐标<strong>原点</strong> 在屏幕的<strong>左下角</strong> 往右是Z轴正方向，往上是Y轴正方形</p><p>返回值是Vector3 ，但只有x和y有值</p><p><strong>API</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(Input.mousePosition);</span><br></pre></td></tr></table></figure><p>知识点二：<strong>检测鼠标输入</strong></p><p><strong>参数</strong>：0 左键，1 右键，2中键</p><p><strong>API</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//鼠标按下的瞬间被调用</span></span><br><span class="line"><span class="keyword">if</span>(Input.GetMouseButtonDowm(<span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">print(<span class="string">&quot;鼠标左键被按下&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标抬起的瞬间被调用</span></span><br><span class="line"><span class="keyword">if</span>(Input.GetMouseButtonUp(<span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">    print(<span class="string">&quot;鼠标左键被抬起了&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标长按时一直被调用</span></span><br><span class="line"><span class="keyword">if</span>(Input.GetMouseButton(<span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line">print(<span class="string">&quot;鼠标右键按下&quot;</span>);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中键滚动</span></span><br><span class="line"><span class="comment">//返回值是Vector2的值，鼠标中间滚动时 改变Y值</span></span><br><span class="line"><span class="comment">//-1 往下滚动 0 不滚动 1 往上滚动</span></span><br><span class="line">print(Input.mouseScrollDelta);</span><br></pre></td></tr></table></figure><p><strong>功能</strong>：</p><ol><li>可以做 发射子弹</li><li>可以控制摄像机视角移动</li></ol><p>知识点二：<strong>检测键盘输入</strong></p><p><strong>API</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//键盘按下</span></span><br><span class="line"><span class="keyword">if</span>(Input.GetKeyDown(KeyCode.W))</span><br><span class="line">&#123;</span><br><span class="line">    print(<span class="string">&quot;W键被按下&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//键盘抬起</span></span><br><span class="line"><span class="keyword">if</span>(Input.GetKeyUp(KeyCode.W))</span><br><span class="line">&#123;</span><br><span class="line">    print(<span class="string">&quot;W键抬起&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//键盘长按</span></span><br><span class="line"><span class="keyword">if</span>(Input.Getkey(KeyCode.W))</span><br><span class="line">&#123;</span><br><span class="line">    print(<span class="string">&quot;W键长按&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>作用</strong>：</p><ol><li>按键释放技能 或者 切换武器</li><li>人物行走</li></ol><p>知识点三：<strong>检测默认轴输入</strong></p><p>API</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//键盘AD按下时 返回 -1到1之间的变换</span></span><br><span class="line"><span class="comment">//得到的值就是 左右方向 可以通过它来控制 对象左右移动 或者左右旋转</span></span><br><span class="line">print(Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//键盘SW按下时 返回 -1到1之间的变换</span></span><br><span class="line">print(Input.GetAxis(<span class="string">&quot;Vertical&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标横向移动时 -1 到 1 左右</span></span><br><span class="line">print(Input.GetAxis(<span class="string">&quot;Mouse X&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标竖向移动时 -1 到 1 下上</span></span><br><span class="line">print(Input.GetAxis(<span class="string">&quot;Mouse Y&quot;</span>));</span><br></pre></td></tr></table></figure><p>知识点四： 其他</p><p><strong>改键操作</strong></p><p>API</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//任意键按下</span></span><br><span class="line"><span class="keyword">if</span>(Input.anyKey)</span><br><span class="line">&#123;</span><br><span class="line">print(<span class="string">&quot;有一个键长按&quot;</span>)    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//任意键长按</span></span><br><span class="line"><span class="keyword">if</span>(Input.anyKeyDown)</span><br><span class="line">&#123;</span><br><span class="line">print(<span class="string">&quot;有一个键 被按下&quot;</span>)    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//记录这一帧的键盘输入</span></span><br><span class="line">print(Input.inputString);</span><br></pre></td></tr></table></figure><p>移动设备触摸相关</p><p>API</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(Input.touchCout&gt;<span class="number">0</span>)<span class="comment">//手指触摸屏幕时 就会有一个 touch对象</span></span><br><span class="line">&#123;</span><br><span class="line">    Touch t1 = Input.touches[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//触摸位置</span></span><br><span class="line">    print(t1.position);</span><br><span class="line">    <span class="comment">//相对上次触摸位置的变化</span></span><br><span class="line">    print(t1.deltaPosition);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-2-屏幕相关Screen"><a href="#2-4-2-屏幕相关Screen" class="headerlink" title="2.4.2 屏幕相关Screen"></a>2.4.2 屏幕相关Screen</h4><p>知识点一：静态属性</p><ol><li><strong>当前屏幕分辨率</strong></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到当前显示器的分辨率 以及 帧数</span></span><br><span class="line">Resolution r = Screen.currentResolution;</span><br><span class="line">print(<span class="string">&quot;当前屏幕分辨率是&quot;</span>+r.width+<span class="string">&quot;×&quot;</span>+r.height+ <span class="string">&quot;×&quot;</span> +r.refreshRate);</span><br></pre></td></tr></table></figure><p>2.<strong>game视图当前宽高</strong></p><p>一般写代码 用窗口宽高做计算时 就用他们</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前游戏窗口的分辨率</span></span><br><span class="line">Resolution r = Screen.currentResolution;</span><br><span class="line"></span><br><span class="line">print(Screen.width + <span class="string">&quot;×&quot;</span> +Screen.height);</span><br></pre></td></tr></table></figure><p>3.屏幕休眠模式</p><p>设置手机屏幕是否息屏</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//永远不息屏</span></span><br><span class="line">Screen.sleepTimeout = SleepTimeout.NeverSleep;</span><br><span class="line"></span><br><span class="line"><span class="comment">//跟随系统设置</span></span><br><span class="line">Screen.sleepTimeout = SleepTimeout.SystemSetting;</span><br></pre></td></tr></table></figure><p>4.全屏或者窗口化模式</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//运行时 是否全屏</span></span><br><span class="line">Screen.fullScreen= <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//独占全屏</span></span><br><span class="line">Screen.fullScreenMode = FullScreenMode.ExclusiveFullScreen;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全屏窗口</span></span><br><span class="line">Screen.fullScreenMode = FullScreenMode.FullScreenWindow;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最大化窗口</span></span><br><span class="line">Screen.fullScreenMode = FullScreenMode.MaximizedWindow;</span><br><span class="line"></span><br><span class="line"><span class="comment">//窗口模式</span></span><br><span class="line">Screen.fullScreenMode = FullScreenMode.Windowed;</span><br></pre></td></tr></table></figure><p>知识点二：静态方法</p><ol><li>设置分辨率，一般移动设备不使用</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前面的参数为分辨率，后面参数为 是否全屏</span></span><br><span class="line">Screen.SetResolution(<span class="number">1920</span>,<span class="number">1080</span>,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h4 id="示例：控制物体移动和旋转"><a href="#示例：控制物体移动和旋转" class="headerlink" title="示例：控制物体移动和旋转"></a><strong>示例</strong>：控制物体移动和旋转</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//控制物体前后移动</span></span><br><span class="line"><span class="keyword">this</span>.transform.Tramslate(Vector3.forward * moveSpeed * Time.deltaTime * Input.GetAxis(<span class="string">&quot;Vertical&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制物体旋转</span></span><br><span class="line"><span class="keyword">this</span>.transform.Rotate(Vector3.up * rotateSpeed * Time.deltaTime * Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="2-5-Camera相关"><a href="#2-5-Camera相关" class="headerlink" title="2.5 Camera相关"></a>2.5 Camera相关</h3><p>相机默认的视角方向是<strong>Z轴</strong>方向</p><h4 id="2-5-1-Camera编辑器相关"><a href="#2-5-1-Camera编辑器相关" class="headerlink" title="2.5.1 Camera编辑器相关"></a>2.5.1 Camera编辑器相关</h4><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220307170417241.png" class="" title="image-20220307170417241"><p>Camera组件信息</p><ol><li><strong>Clear Flags</strong>：如何清除背景<ol><li>skybox 天空盒渲染 主要用于3D游戏</li><li>solid Color 颜色填充 将颜色填满整个game视图 用于2D游戏</li><li>Depth only 只渲染对象，将背景透明  用于<strong>多个相机叠加渲染</strong></li></ol></li></ol><ol><li><strong>Culling Mask</strong>：选择性渲染部分层级</li></ol><p>​        1.可以指定只渲染对应层级的对象</p><ol><li><strong>Projection</strong>：相机的透视方式</li></ol><p>​        1.默认为Perspective <strong>透视模式</strong> 符合“近大远小”，用于3D</p><p>​        2.Orthograpgic <strong>正交模式</strong> 。一般用于2D游戏</p><p><img src="Unity入门基础/image-20220307162155169.png" style="zoom: 80%;" /></p><ol><li><strong>Clipping Planes</strong>：裁剪平面距离。用于设置相机最近和最远的视野</li></ol><ol><li><strong>Depth</strong>：渲染顺序上的深度 ，该参数需要多摄像机起作用</li></ol><p>​        1.渲染深度<strong>越大</strong>，渲染画面时间就<strong>越后</strong>，并且还能<strong>挡住</strong>其            他相机的画面    </p><p>​        2.通过修改<strong>深度高</strong>相机中的 <strong>Depth only</strong> 参数，并且<strong>取消        除对象外的所有渲染</strong>，就可以让两个相机渲染的对象<strong>同时</strong>        被看到</p><ol><li><p><strong>Target Texture</strong>：渲染纹理，可以把摄像机画面渲染到一张图上，<strong>用于制作小地图</strong></p><ol><li><p>再project 中右键创建 <strong>Reder Texture</strong></p></li><li><p>给相机的<strong>Target Texture</strong>属性添加 <strong>Reder Texture</strong></p></li></ol></li></ol><p>​    7.<strong>Occlusion Culling</strong> ：<strong>是否开启剔除遮挡</strong></p><p>​        1. 开启后将 不会渲染 被遮挡到的 对象 ，可以节约性能</p><h4 id="2-5-2-代码相关"><a href="#2-5-2-代码相关" class="headerlink" title="2.5.2 代码相关"></a>2.5.2 代码相关</h4><p>相机相关类型需要卸载<strong>LateUpdate</strong>里面</p><p>知识点一：重要静态成员</p><ol><li><p><strong>获取摄像机</strong></p><p>主摄像机的Tag 必须为MainCamera，否则不能通过以下API查找</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找摄像机</span></span><br><span class="line">print(Camera.main.name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取摄像机数量</span></span><br><span class="line">print(Camera.allCamerasCount);</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到所有摄像机，返回值是数组类型</span></span><br><span class="line">Camera[] allCamera=Camera.allCameras;</span><br><span class="line">print(allCamera.Length)</span><br></pre></td></tr></table></figure></li></ol><p>知识点二：重要成员</p><ol><li>界面上的参数 都可以再Camera中获取</li><li>世界坐标转换为<strong>屏幕坐标</strong></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vector3 v = Camera.main.WorldToScreenPoint(<span class="keyword">this</span>.transform.position);</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>得到的坐标X,Y轴代表<strong>屏幕坐标</strong></li><li>而Z轴则代表<strong>相机与对象之间的距离</strong>。常用于制作头顶血条相关功能</li></ul><p>3.屏幕坐标转世界坐标</p><p>注意：</p><p>因为鼠标移动改变的是X，Y轴。</p><p>所以移动鼠标时，实际上一直是在由相机的X,Y轴所构成的平面上移动。</p><p>而Z轴是相机与平面之间形成的距离</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vector3 v = Input.mousePosition;<span class="comment">//获取鼠标屏幕坐标的X,Y值</span></span><br><span class="line">v.z=<span class="number">10</span>;<span class="comment">//为鼠标屏幕坐标的Z轴赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将屏幕坐标转换为世界坐标，并将该坐标赋值给实体</span></span><br><span class="line">obj.position = Camera.main.ScreenToWorldPoint(v);</span><br></pre></td></tr></table></figure><hr><h2 id="3-Unity-核心系统"><a href="#3-Unity-核心系统" class="headerlink" title="3. Unity 核心系统"></a>3. Unity 核心系统</h2><h3 id="3-1-光源系统"><a href="#3-1-光源系统" class="headerlink" title="3.1 光源系统"></a>3.1 光源系统</h3><p><strong>光源组件</strong></p><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220309155509767.png" class="" title="image-20220309155509767"><p>知识点：</p><ul><li><strong>Type</strong>：光源类型<ul><li>Point：点光源，类似于于“灯泡”</li><li>Sopt：聚光灯，类似于一个从上往下照的“手电筒”<ul><li>参数Range：发光范围距离</li><li>参数Spot Angle：光圈大小</li></ul></li><li>Area：面光源：只在烘焙状态下有用，不能实时渲染，好处是可以性能</li></ul></li></ul><ul><li>Color：光源颜色</li></ul><ul><li><strong>Mode</strong>：光源模式<ul><li>Realtime：实时光源。每帧实时计算，性能消耗大</li><li>Baked：烘焙光源。事件计算好，无法动态变化</li><li>Mixed：混合光源。预先计算+实时运算</li></ul></li></ul><ul><li><strong>Intensity</strong>：光源亮度。若想模拟夜晚效果，可以稍微降低数值</li></ul><ul><li><strong>Shadow Type</strong>：阴影种类<ul><li>SoftShadows：柔和阴影。默认参数</li><li>HardShadows：生硬阴影，有锯齿，性能消耗低</li><li>NoShadows：关闭阴影</li></ul></li></ul><ul><li><p>Cookie：投影遮罩。使用贴图代替灯光的投影</p></li><li><p>Drwa Halo：球形光环开关。类似蜡烛的光晕效果</p></li><li><p>Flare：耀斑。类似人眼看太阳的效果，Game视图默认看不到，需要在相机中添加Flare Layer脚本才行</p></li></ul><ul><li><strong>Culling Mask</strong>：剔除遮罩层，决定哪些层的对象受到该光源影响</li></ul><p><strong>光相关面板</strong></p><p>面板路径：</p><p>Window—&gt;Rendering—&gt;Lighting</p><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220309163834203.png" class="" title="image-20220309163834203"><ul><li>环境相关设置<ul><li><strong>天空盒材质</strong>：可以改变天空盒</li></ul></li></ul><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220309164106881.png" class="" title="image-20220309164106881"><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220309164121379.png" class="" title="image-20220309164121379"><hr><h3 id="3-2-碰撞检测"><a href="#3-2-碰撞检测" class="headerlink" title="3.2 碰撞检测"></a>3.2 碰撞检测</h3><p>碰撞产生的条件，<strong>两个物体都有碰撞器，至少有一个物体有刚体</strong></p><h4 id="3-2-1-刚体"><a href="#3-2-1-刚体" class="headerlink" title="3.2.1 刚体"></a>3.2.1 刚体</h4><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220309165348540.png" class="" title="image-20220309165348540"><ul><li><p>Mass：质量(默认为千克)，质量越大，摩擦力越大，产生的动量也越大</p></li><li><p>Drag：空气阻力，0表示没有阻力</p></li><li><strong>Angular Drag</strong>：扭矩阻力，影响<strong>物体旋转</strong>的空气阻力</li><li>Use Gravity：是否开启重力</li></ul><ul><li>Is Kinematic：开启选项后，该对象<strong>不受力的作用</strong></li></ul><ul><li><p>Interpolate：插值运算。当<strong>物理帧更新较长</strong>时，就能用<strong>插值运算</strong>解决对象<strong>运动不平滑</strong>问题</p><ul><li>None：不应用插值运算</li><li><strong>Interpolate</strong>：根据<strong>前一帧</strong>的变换来平滑变换。适用于<strong>物理帧更新较长</strong></li><li>Extrapolate：根据<strong>后一帧</strong>的变换来平滑变换</li></ul></li></ul><p><strong>重要</strong>：</p><ul><li><p>Conllison Detection(碰撞检测模式)：<strong>防止对象移动过快而检测不到碰撞</strong></p><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220309171225228.png" class="" title="image-20220309171225228"></li></ul><ul><li><strong>Constraints</strong>：约束。对刚体运动进行限制，<strong>避免角色在移动过程中被撞飞</strong><ul><li><strong>Freeze Position</strong>：有选择的 避免刚体沿着世界的X,Y,Z轴移动</li><li><strong>Freeze Rotation</strong>：有选择的 避免刚体围绕本地的X,Y,Z轴旋转</li></ul></li></ul><h4 id="3-2-2-碰撞器"><a href="#3-2-2-碰撞器" class="headerlink" title="3.2.2 碰撞器"></a>3.2.2 碰撞器</h4><p><strong>3D碰撞器种类</strong></p><ol><li>盒装</li><li>球状</li><li>胶囊</li><li>网格</li><li>轮胎</li><li>地形</li></ol><p><strong>共同参数</strong></p><ul><li><strong>Is Trigger</strong>(触发器)：用于<strong>触发事件</strong>，并取消该物体的物理碰撞效果<ul><li>作用：可以将穿透武器设置为触发器，这样它就能攻击到后方的怪物，还能在穿过怪物时，设置触发事件</li></ul></li></ul><ul><li>Material(物理材质)：可以确定碰撞体和其它对象碰撞时的交互方式</li></ul><ul><li>Center：碰撞体在对象局部空间中的位置。可以进行更改</li></ul><p><strong>常用碰撞器</strong></p><ul><li><p>Box Collider(盒装碰撞器)</p><ul><li>size：碰撞体在X,Y,Z放上的缩放大小</li></ul></li><li><p>Sphere Collider(球状碰撞器)</p><ul><li>Radius：球形碰撞体的半径大小</li></ul></li><li>Capsule Collider(胶囊碰撞器)：可以理解为一个圆柱和两个半圆组成<ul><li>Radius：胶囊体的半径，决定两个半圆的大小</li><li>Height：胶囊体的高度，决定圆柱体的高</li><li>Direction：胶囊体在对象局部空间中的轴向。决定胶囊的朝向</li></ul></li></ul><p><strong>复杂物体使用多种碰撞器组合</strong></p><p>刚体对象的 子对象碰撞器也能 参与碰撞检测</p><h4 id="3-2-3-物理材质"><a href="#3-2-3-物理材质" class="headerlink" title="3.2.3 物理材质"></a>3.2.3 物理材质</h4><p><strong>创建物理材质</strong></p><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220309205704616.png" class="" title="image-20220309205704616"><ul><li>创建物理材质之后，将材质拖动到 对象碰撞器组件中的<strong>Material</strong>中</li></ul><p><strong>物理材质参数</strong></p><ul><li>Dynamic Friction：移动时使用的摩擦力，通常在0~1之间</li><li>Static Friction：静止时表明的摩擦力</li><li>Bounciness：表明的弹性。值为0时不会反弹，值为1时反弹不损失能量</li></ul><h4 id="3-2-4-碰撞检测函数"><a href="#3-2-4-碰撞检测函数" class="headerlink" title="3.2.4 碰撞检测函数"></a>3.2.4 碰撞检测函数</h4><p>碰撞和触发响应函数，属于 特殊的生命周期函数，也是通过反射调用</p><img src="/blog/Unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/image-20220309210945700.png" class="" title="image-20220309210945700"><ul><li>每执行一次物理帧更新，都会去检测<strong>碰撞</strong>和<strong>触发</strong>函数</li></ul><p>知识点一：<strong>物理碰撞检测函数</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//碰撞刚接触时 时调用</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnCollisionEnter</span>(<span class="params">Collision collision</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">//1.碰撞到 对象的碰撞器信息</span></span><br><span class="line">    print(collision.collider.name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.碰撞对象(GameObject)</span></span><br><span class="line">    print(collision.gameObject);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.碰撞对象的位置信息</span></span><br><span class="line">    print(collision.transform);       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//碰撞结束 时调用</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnCollisionExit</span>(<span class="params">Collision collision</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//两个物体相互摩擦时 会一直调用</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnCollisionStay</span>(<span class="params">Collision collision</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知识点二：<strong>触发器检测函数</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//触发开始</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider other</span>) <span class="comment">// 参数是碰撞器相关内容，相当于把碰撞器当作参数传入</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//这里的other相当于触发对象的 触发器脚本</span></span><br><span class="line">    print(<span class="keyword">this</span>.name + <span class="string">&quot;被&quot;</span> + other.gameObject.name + <span class="string">&quot;触发了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发结束</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerExit</span>(<span class="params">Collider other</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发过程</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerStay</span>(<span class="params">Collider other</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知识点三：明确什么时候会响应函数</p><ul><li>只要挂载脚本的对象 能和其它物体产生<strong>碰撞</strong>或者<strong>触发</strong>，就能被响应</li><li>如果是一个复杂的物体，刚体和脚本必须挂载在同一个对象上</li></ul><h4 id="3-2-5-刚体添加力"><a href="#3-2-5-刚体添加力" class="headerlink" title="3.2.5 刚体添加力"></a>3.2.5 刚体添加力</h4><p>刚体加力的目的就是 让其有一个速度 朝着某一方向移动</p><p>知识点一：刚体自带添加力的方法</p><ul><li>首先应该获取刚体组件</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Rigidbody rb;<span class="comment">//声明成员变量</span></span><br><span class="line">rb=<span class="keyword">this</span>.GetComponent&lt;Rigidbody&gt;();<span class="comment">//获取刚体组件</span></span><br></pre></td></tr></table></figure><ul><li>给刚体对象添加力</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相对世界坐标系添加一个力,当对象没有其它阻力时，将会一直保持运动</span></span><br><span class="line">rb.AddForce(Vector3.forward * <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//相对本地坐标系 添加一个力</span></span><br><span class="line"></span><br><span class="line">rb.AddRelativeForce(Vector3.forward * <span class="number">10</span>);</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">rb.AddForce(<span class="keyword">this</span>.transform.forward * <span class="number">10</span>);</span><br></pre></td></tr></table></figure><ul><li>给刚体添加扭矩力，让刚体旋转</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3、扭矩力</span></span><br><span class="line"> <span class="comment">//相对世界坐标</span></span><br><span class="line">rb.AddTorque(Vector3.up * <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//相对本地坐标</span></span><br><span class="line">rb.AddRelativeTorque(Vector3.up * <span class="number">10</span>);</span><br></pre></td></tr></table></figure><ul><li>直接改变刚体速度</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4、直接改变速度</span></span><br><span class="line"><span class="comment">//相对于世界坐标系</span></span><br><span class="line">rb.velocity = Vector3.forward * <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>知识点二：力的几种模式</p><p>第二个参数是指 力的模式，主要的作用是 计算方式不同</p><p>由于四种计算方式不同，最终的移动速度就会不同</p><ul><li>Acceleration：给物体增加一个持续的加速度，<strong>忽略其质量</strong><ul><li>v=Ft/m    动量定理</li><li>F：(0,0,10)，t：0.02s 物理帧更新时间，m：默认为1</li><li>v=10*0.02/1=0.2 m/s</li><li>每物理帧更新移动：0.2*0.02 = 0.004 m</li></ul></li></ul><ul><li><p><strong>Force</strong>：给物体添加一个持续的力，与<strong>物体的质量有关</strong></p><ul><li><p>v=Ft/m    动量定理</p></li><li><p>F：(0,0,10)，t：0.02s 物理帧更新时间，m：2kg</p></li><li><p>v=10*0.02/2=0.1 m/s</p></li><li><p>每物理帧更新移动：0.2*0.02 = 0.002 m</p></li></ul></li></ul><ul><li>Impulse：给物体添加一个瞬间的力，与物体质量有关，忽略时间，默认为1<ul><li>v=Ft/m    动量定理</li><li>F：(0,0,10)，t：默认为1，m：2kg</li><li>v=10*1/2=5 m/s</li><li>每物理帧更新移动：5*0.02 = 0.1 m</li></ul></li></ul><ul><li><p>VelocityChange：给物体添加一个瞬时速度，忽略质量</p><ul><li><p>v=Ft/m</p></li><li><p>F：(0,0,10)，t：默认为1，m：默认为1</p></li><li><p>v=10*1/1=10 m/s</p></li><li><p>每物理帧更新移动：10*0.02=0.2 m</p></li></ul></li></ul><p>知识点三：刚体休眠</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Unity为了节约性能，有时会让刚体进入休眠状态，此时会产生意想不到的结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (rb.IsSleeping())</span><br><span class="line">&#123;</span><br><span class="line"> rb.WakeUp();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-3-音效系统"><a href="#3-3-音效系统" class="headerlink" title="3.3 音效系统"></a>3.3 音效系统</h3><h4 id="3-3-1-音频文件导入"><a href="#3-3-1-音频文件导入" class="headerlink" title="3.3.1 音频文件导入"></a>3.3.1 音频文件导入</h4><p>常用音频格式</p><ul><li>wav</li><li>mp3</li><li>ogg</li><li>aiff</li></ul><p><strong>音频文件属性设置</strong></p><ul><li>Force To Mono：多声道转单声道，<strong>默认不勾选</strong></li><li><strong>Load In Background</strong>：在后台加载，不阻塞主线程。适应于较大的音效</li><li>Ambisonic：立体混响声，适用于特定的VR或XR应用，默认不勾选</li></ul><ul><li><strong>LoadType</strong>：音效加载类型<ul><li>Decompress On Load：加载快，占用内存高。适用于小音效</li><li>Compress in memory：加载慢，占用内存小。适用于大音效</li><li>Streaming：在内存不够的极端情况下使用</li></ul></li></ul><ul><li><strong>Preload Audio Data</strong>：预加载音效，进入场景前就加载音效。默认勾选</li><li>compression Format：压缩方式<ul><li>PCM：音频以最高质量存储。适用于背景音乐</li><li>Vorbis：相对PCM压缩更小，根据质量决定</li><li>ADPCM：包含噪音。适用于打击音效</li></ul></li></ul><h4 id="3-3-2-音频源和音频监听"><a href="#3-3-2-音频源和音频监听" class="headerlink" title="3.3.2 音频源和音频监听"></a>3.3.2 音频源和音频监听</h4><p><strong>AudioSource</strong>(音频源)</p><ul><li><strong>AudioClip</strong>：关联需要播放的音频文件</li><li><p>Mute：静音开关</p></li><li><p><strong>Play On Awake</strong>：对象创建时就播放音乐。一般用于背景音乐的自动播放</p></li><li><strong>Loop</strong>：循环播放，默认不勾选</li><li>Volume：音量大小</li><li>Pitch：音高，用于游戏倍速</li></ul><ul><li><strong>Spatial Blend</strong>：音频受3D空间的影响程度，默认为2D，设置为1时，就受3D空间的影响。</li></ul><ul><li><p>3D Sound Settings：和 Spatial Blend 参数成正比应用</p><ul><li><p>Volume Rolloff：声音衰减速度</p><ul><li><strong>Linear Rolloff</strong>：与音频源的距离越远，听到的声音越小。类似于脚步声</li></ul></li><li><p>Min/Max Distance：最小距离内，声音保持最大响度。最大距离外，声音开始减弱</p></li></ul></li></ul><p><strong>Audio Listener</strong>(音频监听)</p><p>该脚本处于摄像机上，并且保证<strong>有且只有一个</strong>Audio Listener，音频才能工作</p><h4 id="3-3-3-代码控制音频源"><a href="#3-3-3-代码控制音频源" class="headerlink" title="3.3.3 代码控制音频源"></a>3.3.3 代码控制音频源</h4><p>知识点一：代码控制播放停止</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">AudioSource audioSource;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">audioSource = <span class="keyword">this</span>.GetComponent&lt;AudioSource&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//知识点一：代码控制播放停止</span></span><br><span class="line"><span class="keyword">if</span> (Input.GetKeyDown(KeyCode.P))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//从头播放音效</span></span><br><span class="line">audioSource.Play();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Input.GetKeyDown(KeyCode.S))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//停止音效</span></span><br><span class="line">    audioSource.Stop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Input.GetKeyDown(KeyCode.Space))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//暂停音效</span></span><br><span class="line">    audioSource.Pause();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知识点二：如何检测音效播放完毕</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在Updata中 不停的检测该属性</span></span><br><span class="line"><span class="comment">//如果是false则表示播放完毕</span></span><br><span class="line"><span class="keyword">if</span> (audioSource.isPlaying)</span><br><span class="line">&#123;</span><br><span class="line">   print(<span class="string">&quot;播放中&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">print(<span class="string">&quot;播放完毕&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知识点三：动态控制音效播放</p><ul><li>直接挂载在需要播放音效的对象上</li><li>用AudioSource来控制播放不同的音效</li></ul>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity-UGUI</title>
      <link href="blog/Unity-UGUI/"/>
      <url>blog/Unity-UGUI/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="六大组件"><a href="#六大组件" class="headerlink" title="六大组件"></a>六大组件</h2><h3 id="Unity中如何使用UGUI"><a href="#Unity中如何使用UGUI" class="headerlink" title="Unity中如何使用UGUI"></a>Unity中如何使用UGUI</h3><p>UGUI是Unity内置的UI，可以在Unity中直接使用</p><img src="/blog/Unity-UGUI/image-20220412155303158.png" class="" title="image-20220412155303158"><p>当我们创建UI对象时，都会创建在Canvas的子对象中</p><img src="/blog/Unity-UGUI/image-20220412155516996.png" class="" title="image-20220412155516996"><p><strong>六大基础组件的作用</strong></p><img src="/blog/Unity-UGUI/image-20220412155727066.png" class="" title="image-20220412155727066"><p>总结：</p><ul><li>UGUI无需外部引用内容，直接右键使用</li><li><strong>Canvas</strong>对象和<strong>EventSystem</strong>对象上的组件被合称为六大组件</li></ul><hr><h3 id="Canvas-画布组件"><a href="#Canvas-画布组件" class="headerlink" title="Canvas(画布组件)"></a>Canvas(画布组件)</h3><p>Canvas 的意思是画布，它主要负责<strong>渲染</strong>自己的所有<strong>UI子对象</strong></p><p>可以通过修改Canvas组件上的参数 来修改渲染方式</p><p>特点：</p><p>场景中允许多个Canvas对象存在，可以<strong>分别管理不同画布的渲染方式</strong>，<strong>分辨率适应方式</strong>等参数</p><p>但，如果没有特殊需求，一个场景上一个Canvas即可</p><p>三种渲染方式(Render Mode)：</p><ul><li>Overlay：屏幕空间下的覆盖模式，<strong>UI始终显示在前面</strong></li><li>Camera：屏幕空间下的摄像机模式，<strong>3D物体可以显示在UI前</strong></li><li>World Space：世界空间下的3D模式，一般用于UI围绕着人物旋转，VR场景使用较多</li></ul><p><strong>Overlay</strong>(覆盖模式)：覆盖整个场景中的游戏画面，显示在最前方</p><ul><li>Pixel Perfect：开启无锯齿精确渲染，用性能换效果</li><li><strong>SortOrder</strong>：排序层编号(数字越大的画面，显示在越前方)</li><li>TargetDisplay：在哪个显示设备上显示，用于多显示器游戏</li></ul><p><strong>Camera</strong>(摄像机模式)：常用于将人物模型面板显示在UI之前</p><ul><li><strong>RenderCamera</strong>：用户渲染UI的摄像机(如果不设置 则类似于覆盖模式)</li><li><p><strong>Plane Distance</strong>：UI平面在摄像机的前方距离，类似于Z轴的感觉</p></li><li><p><strong>Sorting Layer</strong>：所在排序层，<strong>排序层越靠后，显示越前面</strong></p></li><li><strong>Order in Layer</strong>：排序层的序号，当<strong>排序层相同</strong>时，<strong>序号越大，显示越前</strong></li></ul><blockquote><p>第二种模式一般会专门新建一个摄像机来渲染UI</p><p>1、新建摄像机，并更改其Culling Mask参数为UI，让其只渲染UI层</p><p>2、然后主摄像机的Culling Mask参数 不渲染UI层</p><p>3、将新建摄像机关联到Render Camera</p><p>4、并修改新建摄像机的Clear Flags参数为Deaph only，让新摄像机只渲染UI层</p></blockquote><p>World Space(3D模式)：常用于VR或AR</p><ul><li>Event Camera：用于处理UI事件的摄像机，通过关联主摄像机</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>游戏开发中常用<strong>Camera</strong>(摄像机模式)渲染</p><h3 id="CanvasScaler-分辨率自适应组件"><a href="#CanvasScaler-分辨率自适应组件" class="headerlink" title="CanvasScaler(分辨率自适应组件)"></a>CanvasScaler(分辨率自适应组件)</h3><p>CanvasScaler是 <strong>画布缩放控制器</strong>，它用于<strong>分辨率自适应组件</strong></p><p>主要负责 不同分辨率下<strong>UI控件大小的自适应</strong>，并不负责位置自适应</p><p>它提供了<strong>三种用于分辨率自适应的模式</strong></p><p>必备知识</p><img src="/blog/Unity-UGUI/image-20220412165527842.png" class="" title="image-20220412165527842"><img src="/blog/Unity-UGUI/image-20220412165548923.png" class="" title="image-20220412165548923"><img src="/blog/Unity-UGUI/image-20220412165839246.png" class="" title="image-20220412165839246"><img src="/blog/Unity-UGUI/image-20220412165905764.png" class="" title="image-20220412165905764"><p><strong>三种适配模式</strong></p><ul><li>Constant Pixel Size(恒定像素模式)：无论屏幕大小如何，<strong>UI始终保持相同像素大小</strong></li><li><strong>Scale With Screen Size</strong>(缩放模式)：<strong>随屏幕尺寸进行缩放大小</strong></li><li>Constant Physical Size(恒定物理模式)：无论屏幕大小和分辨率如何，UI元素<strong>始终保持相同物理大小</strong></li></ul><h4 id="恒定像素模式"><a href="#恒定像素模式" class="headerlink" title="恒定像素模式"></a><strong>恒定像素模式</strong></h4><ul><li><p>Scale Factor：缩放系数，会<strong>按照此系数缩放画布中的所有UI元素</strong></p></li><li><p>Reference Pixels Per Unit：单位参考像素，多少个像素对应Unity中的一个单位(默认为100像素)。会与图片设置中的Pixels Per Unit设置，一起参与计算</p></li></ul><img src="/blog/Unity-UGUI/image-20220412171705063.png" class="" title="image-20220412171705063"><p>注意：</p><p>恒定像素模式<strong>不会让UI控件进行分辨率自适应</strong>，使用较少</p><h4 id="缩放模式"><a href="#缩放模式" class="headerlink" title="缩放模式"></a><strong>缩放模式</strong></h4><p>最常用的模式，会根据屏幕尺寸进行缩放大小</p><ul><li><strong>Reference Resolution</strong>：参考分辨率。用于参与分辨率自适应计算</li><li><strong>Screen Match Mode</strong>：屏幕匹配模式，当前屏幕分辨率宽高比，不适用参考分辨率时，用分辨率大小自适应的匹配模式</li></ul><p><strong>三种匹配模式</strong></p><ul><li>Expand：水平或垂直<strong>拓展画布</strong>区域，会根据宽高比的变化来放大缩小画布，可能会有黑边</li></ul><img src="/blog/Unity-UGUI/image-20220420205431975.png" class="" title="image-20220420205431975"><ul><li><p>Shrink：水平或垂直<strong>裁剪画布</strong>区域，会根据宽高比的变化来放大缩小画布，可能会裁剪</p><img src="/blog/Unity-UGUI/image-20220420210022044.png" class="" title="image-20220420210022044"></li><li><p>Match Width Or Height：默认模式，以<strong>宽高或二者的平均值作为参考</strong>，来缩放画布区域</p><img src="/blog/Unity-UGUI/image-20220420210351615.png" class="" title="image-20220420210351615"></li></ul><img src="/blog/Unity-UGUI/image-20220420210511767.png" class="" title="image-20220420210511767"><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>游戏开发中一般使用<strong>Scale With Screen Size</strong> 缩放模式</p><p>若游戏存在横竖屏切换</p><ul><li>则选择<strong>Expand</strong>(拓展匹配，有黑边)和<strong>Shrink</strong>(收缩匹配，有裁剪)</li></ul><p>若游戏不存在横竖屏切换</p><ul><li>则使用<strong>Match Width or Height</strong>(宽高匹配)</li><li><strong>横屏游戏 Match = 1</strong>，<strong>竖屏游戏 Match = 0</strong></li></ul><hr><h3 id="Graphic-Raycaster-射线事件交互组件"><a href="#Graphic-Raycaster-射线事件交互组件" class="headerlink" title="Graphic Raycaster(射线事件交互组件)"></a>Graphic Raycaster(射线事件交互组件)</h3><p>Graphic Raycaster意思是<strong>图形射线投射器</strong>，用于<strong>检测UI输入事件的射线发射器</strong></p><p>作用：</p><p>主要<strong>通过射线检测</strong> <strong>判断玩家是否点击到了UI元素</strong></p><p><img src="Unity-UGUI/image-20220420213646462.png" alt="image-20220420213646462" style="zoom:150%;" /></p><p>参数：</p><ul><li><p>Ignore Reversed Graphics：是否忽略反转图，默认勾选，则忽略反转图</p><blockquote><p>勾选后，若图形的 Rotation发生反转，则不能发生交互响应</p></blockquote></li><li><p>Blocking Object：<strong>射线被哪些类型的碰撞器阻挡</strong>(覆盖渲染模式下无效)</p><blockquote><p>None：不被阻挡</p><p>Two D：被2D碰撞器阻挡，即不能通过2D碰撞器去跟图形进行交互</p><p>Three D：被3D碰撞器阻挡</p><p>All：都阻挡</p></blockquote></li><li><p>Blocking Mask：<strong>射线被哪些层级的碰撞器阻挡</strong>(覆盖渲染模式下无效)</p><blockquote><p>该参数一般与第二个参数配合使用，为2D或者3D碰撞器添加专门的层级，使其单独生效</p></blockquote></li></ul><hr><h3 id="EventSystem和Standalone-Input-Module"><a href="#EventSystem和Standalone-Input-Module" class="headerlink" title="EventSystem和Standalone Input Module"></a>EventSystem和Standalone Input Module</h3><h4 id="EventSystem组件"><a href="#EventSystem组件" class="headerlink" title="EventSystem组件"></a><strong>EventSystem组件</strong></h4><ul><li><p>EventSystem是<strong>事件系统</strong>。它用于<strong>管理玩家输入事件并分发给各UI控件</strong></p></li><li><p>它是事件逻辑处理模块。<strong>所有的UI事件都通过EventSystem组件，进行检测并做相应的执行</strong></p></li><li><p><strong>它类似于一个中转站，和许多模块一起共同协作</strong></p></li></ul><blockquote><p>如果没有它，所有的点击、拖拽等等行为都不会被响应</p></blockquote><h4 id="EventSystem组件参数"><a href="#EventSystem组件参数" class="headerlink" title="EventSystem组件参数"></a><strong>EventSystem组件参数</strong></h4><p>参数面板如图</p><img src="/blog/Unity-UGUI/image-20220524160805691.png" class="" title="image-20220524160805691"><ul><li>First Selected：<strong>首先选择的游戏对象，可以设置游戏一开始的默认选择</strong></li></ul><blockquote><p>将一个UI对象与其关联，可以让该UI对象变为默认选中状态</p><p>比如我们创建三个Button按钮，更改其选中后的颜色</p><p>之后将其中一个按钮于First Selected进行关联，程序运行后，被关联的对象默认选中</p></blockquote><img src="/blog/Unity-UGUI/image-20220524162044548.png" class="" title="image-20220524162044548"><ul><li>Send Navigation Events：<strong>是否允许导航事件(移动/按下/取消)</strong></li></ul><blockquote><p>该参数的功能是通过键盘上的<strong>方向键</strong>或<strong>W/S/A/D键</strong>更改当前UI控件被选中的对象</p><p>通过<strong>回车</strong>和<strong>空格</strong>键来点击按钮</p></blockquote><img src="/blog/Unity-UGUI/image-20220524162349648.png" class="" title="image-20220524162349648"><ul><li>Drag Threshold：<strong>拖拽操作的阈值(移动多少像素算拖拽)</strong></li></ul><blockquote><p> 我们可以长按UI控件进行拖拽处理，这里会写上相应的逻辑代码，该处的设置就是拖拽多少各像素算拖拽</p></blockquote><h4 id="Standalone-Input-Module组件"><a href="#Standalone-Input-Module组件" class="headerlink" title="Standalone Input Module组件"></a>Standalone Input Module组件</h4><p>它是<strong>独立输入模块</strong>，主要针对<strong>处理鼠标/键盘/控制器/触屏(新版Unity)的输入</strong></p><p>而<strong>输入的事件是通过EventSystem进行分发</strong>，所以<strong>它依赖于EventSystem组件</strong>，他们两缺一不可</p><h4 id="Standalone-Input-Module组件参数"><a href="#Standalone-Input-Module组件参数" class="headerlink" title="Standalone Input Module组件参数"></a><strong>Standalone Input Module组件参数</strong></h4><p>参数面板如图</p><img src="/blog/Unity-UGUI/image-20220524163602204.png" class="" title="image-20220524163602204"><ul><li>Input Actions Per Second：<strong>每秒运允许键盘/控制器输入的数量</strong></li></ul><blockquote><p>当我们对键盘或者控制器进行长按时，对输入检测进行限制，每秒最多输入10次</p></blockquote><ul><li><p>Repeat Delay：<strong>当输入操作有重复操作时，在生效前会有一个延迟时间</strong></p></li><li><p>ForceModule Active：是否强制模块处于激活状态</p></li></ul><blockquote><p>该组件的所有参数了解即可，一般不会进行修改</p></blockquote><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><ul><li><p>EventSystem还在<strong>右下角提供了调试信息</strong></p></li><li><p>若场景中的UI控件不能被点击，先检查EventSystem是否被误删</p></li><li>若Canvas中的<strong>Graphic Raycaster组件</strong>未开启，UI控件也不能进行点击</li></ul><hr><h3 id="RectTransform-矩形变换"><a href="#RectTransform-矩形变换" class="headerlink" title="RectTransform(矩形变换)"></a>RectTransform(矩形变换)</h3><p>RectTransfrom意思是矩形变换，它<strong>继承于Transfrom</strong>是专门<strong>用于处理UI元素位置大小的相关组件</strong></p><p>RectTransfrom在Transfrom的基础上加入了矩形相关，<strong>将UI元素当作一个矩形来处理</strong></p><p>加入了<strong>中心点、锚点、长宽等属性</strong></p><p>其目的是<strong>更加方便的控制其大小</strong>以及<strong>分辨率自适应中的位置适应</strong></p><h4 id="RectTransfrom参数"><a href="#RectTransfrom参数" class="headerlink" title="RectTransfrom参数"></a>RectTransfrom参数</h4><p>参数如图</p><p><img src="Unity-UGUI/image-20220524170800388.png" alt="image-20220524170800388" style="zoom:150%;" /></p><ul><li>Pivot：<strong>轴心(中心)点</strong>，取值范围0~1</li></ul><blockquote><p>我们创建一个Image，它左下角坐标为(0,0)、右上角坐标为(1,1)，中心点的取值范围在这之间</p><p>作用：</p><p>1、轴心点会做为旋转的中心</p><p>2、轴心点所在位置，会影响图片拉伸时向两边拉伸的比例</p></blockquote><ul><li>Anchors：<strong>相对父矩形锚点进行计算</strong></li></ul><blockquote><p>Canvas中的白框就是Image中的父矩形，同样左下角坐标为(0,0)，右上角坐标为(1,1)</p><p>Min是矩形锚点范围X和Y的最小值</p><p>Max是矩形锚点范围X和Y的最大值</p><p>当锚点是一个点时，它就相当于image中心点的原点</p><p>image的Pos坐标就相当于image中心点与锚点之间的偏移距离</p><p>作用：用于分辨率自适应，能够保持图片在Canvas中的相对位置</p><p>将锚点放在Canvas的左上角，并且将image也移动到Canvas左上角，就能完成分辨率自适应</p><p>当锚点是一个范围时，是基于锚点位置和image四个点位置进行计算，即image四个点所构成的矩形和Canvas所构成的矩形进行对比</p><p>这时的Pos位置将会变为Left/Top/Right/Bottom，来表示四个点之间所对应的距离</p><p>作用：制作背景图时，会image会根据Canvas的变化而进行变化</p></blockquote><ul><li>蓝图模式：开启后，编辑<strong>旋转</strong>和<strong>缩放</strong>不会影响矩形，只会影响显示内容</li></ul><blockquote><p>即开启蓝图模式后，当我们改变image的旋转和缩放时，image的白框并不会改变。一般不开启</p></blockquote><ul><li>原始编辑模式：开启后，改变<strong>轴心点</strong>和<strong>锚点</strong>不会改变矩形位置</li></ul><blockquote><p>image的Pos位置是根据轴心点和锚点进行计算的</p><p>当我们改变轴心点或锚点后，计算出的位置就会进行改变</p><p>当我们开启原始编辑模式后，就能保证image的Pos位置保持不变</p></blockquote><h4 id="快速设置中心点和锚点"><a href="#快速设置中心点和锚点" class="headerlink" title="快速设置中心点和锚点"></a>快速设置中心点和锚点</h4><p>通过点击左上角方框，可以快捷设置锚点和中心点</p><ul><li>按住Shift点击鼠标左键，可以同时设置中心点(相对自身矩形)</li><li>按照Alt键点击鼠标左键，可以同时设置image的位置</li></ul><hr><h2 id="三大基础控件"><a href="#三大基础控件" class="headerlink" title="三大基础控件"></a>三大基础控件</h2><h3 id="Image图片控件"><a href="#Image图片控件" class="headerlink" title="Image图片控件"></a>Image图片控件</h3><p>Image是图像组件，是UGUI中<strong>用于精灵图片的关键组件</strong></p><p>除了背景图等大图，一般都用Image来显示UI中的图片元素</p><blockquote><p>多个Image的渲染顺序问题</p><p>若我们创建了多个Image控件，那么越后创建的Image就会显示在越前方</p><p>我们可以改变Hierarchy面板下Image的顺序来改变不同Image的渲染</p></blockquote><h4 id="Image参数"><a href="#Image参数" class="headerlink" title="Image参数"></a>Image参数</h4><p> 参数面板如图</p><p><img src="Unity-UGUI/image-20220525092144579.png" alt="image-20220525092144579" style="zoom:150%;" /></p><ul><li><strong>Source Image</strong>：图片来源</li></ul><blockquote><p>将需要显示的图片与Source Image相关联，图片的类型必须为Sprite</p></blockquote><ul><li>Color：图像的颜色</li></ul><blockquote><p>这里会给图像添加一个叠加色</p><p>图像最终呈现效果是 图像原本颜色与添加颜色后叠加的结果</p></blockquote><ul><li><p>Material：图像的材质(一般不修改，使用UI的默认材质)</p></li><li><p><strong>Raycast Target</strong>：是否作为射线检测的目标</p></li></ul><blockquote><p>默认开启，开启该参数后，射线检测会被Image所阻挡</p><p>若此时Image后方还有一个Button，则Button被Image所遮挡的部分不能点击</p><p>取消Raycast Target后才能穿过Image，去点击后方的Button</p></blockquote><ul><li><p><strong>Maskable</strong>：是否能被遮罩</p></li><li><p><strong>Image Type</strong>：<strong>图片类型</strong></p></li></ul><blockquote><p>1、Simple(普通模式)：均匀缩放整个图片</p><p>该模式下，当我们拉伸图片时，这个图片上的像素都会被均匀的拉伸，图片会产生形变。一般当我们的图片不需要改变尺寸时，才会用到普通模式</p><p>2、Sliced(切片模式)：九宫格拉伸，只拉伸中央十字区域</p><p>该模式下，我们先需要编辑图片的Sprite Editor，移动图片中的小绿点，将其划分为九宫格。</p><p>之后再拉伸图片的过程中，只有九宫格内的十字区域被拉伸，而九宫格边缘的四个角则不会被拉伸</p><p>一般作为面板背景图时，将一个小图通过九宫格拉伸的方式改为大图，能够起到节约资源的效果</p><p>3、Tiled(平铺模式)：重复平铺中央部分</p><p>该模式下，通过编辑图片的九宫格，可以使图片拥有底纹的效果</p><p>4、Filled(填充模式)：通过改变填充量，图片会不断填充出现</p><p>该模式下有许多参数，一般用于制作进度条类的效果</p><p>Fill Method：填充方式。图片以哪种形式进行填充</p><p>Fill Origin：填充原点。图片从上/下/左/右 开始填充</p><p>Preserve Aspect：保持宽高比</p></blockquote><ul><li><strong>Set Native Size</strong>：设置为图片资源的原始大小</li></ul><blockquote><p>当我们导入一张图时，就可以点击该按钮，就能自动的将图片设置为图片像素大小的 原始尺寸</p><p>但它会根据Canvas中的适配模式不同，效果也会有所不同</p></blockquote><h4 id="代码控制"><a href="#代码控制" class="headerlink" title="代码控制"></a>代码控制</h4><p>Image常用API</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用前需要引入UnityEngine.UI</span></span><br><span class="line">Image img = <span class="keyword">this</span>.GetComponent&lt;Image&gt;();</span><br><span class="line"><span class="comment">//动态加载图片的路径</span></span><br><span class="line">img.sprite = Resources.Load&lt;Sprite&gt;(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//g</span></span><br><span class="line">img.color = Color.red;</span><br></pre></td></tr></table></figure><hr><h3 id="Text文本控件"><a href="#Text文本控件" class="headerlink" title="Text文本控件"></a>Text文本控件</h3><p>Text是UGUI中用于显示文本的关键组件</p><h4 id="Text参数相关"><a href="#Text参数相关" class="headerlink" title="Text参数相关"></a>Text参数相关</h4><p>参数面板如图</p><p><img src="Unity-UGUI/image-20220525162735745.png" alt="image-20220525162735745" style="zoom:150%;" /></p><ul><li>Text：文本框内显示的内容</li><li>Font：文本字体样式</li></ul><blockquote><p>此处可以将电脑上的字体导入到Unity中，就能给Unity添加额外的字体</p></blockquote><ul><li>FontStyle：字体样式</li></ul><blockquote><p>Normal：默认</p><p>Bold：加粗</p><p>Italic：斜体</p><p>Bold And Italic：加粗+协调</p></blockquote><ul><li>Font Size：字体大小</li></ul><blockquote><p>当我们字体大小足够大时，可能会出现看不到字体的qingk</p><p>这时可以更改Rect Transform中的宽高，也就是更改Text中的白框大小即可</p></blockquote><ul><li>Line Spacing：每一行之间的间距</li><li>Rich Text：是否开启富文本</li></ul><blockquote><p>开启富文本后，就能在文本框中实现类似HTML的效果</p><p>加粗：<b></b></p><p>斜体：<i></i></p><p>大小：<size=50></size></p></blockquote><ul><li>Alignment：对齐方式</li><li><strong>Horizontal Overflow</strong>：处理<strong>文本太宽</strong>无法放入矩形范围时的问题</li></ul><blockquote><p>Wrap：包裹模式，字体始终在矩形范围内，超出会自动换行</p><p>Overflow：溢出模式，字体可以溢出矩形框，只能通过回车换行</p></blockquote><ul><li><strong>Vertical Overflow</strong>：处理<strong>文本太高</strong>无法放入矩形范围时的问题</li></ul><blockquote><p>Truncate：截断模式，字体始终在矩形范围内，超出部分会裁剪</p><p>Overflow：溢出模式，字体可以溢出矩形框</p></blockquote><ul><li>Best Fit：忽略字体大小，始终把内容完全显示在矩形框中，会自动调整大小</li></ul><blockquote><p>MinSize：当字数过少时，字体大小最小为多小</p><p>MaxSize：当字数过多时，字体大小最大为多大</p></blockquote><ul><li>Raycast Target：射线检测</li></ul><blockquote><p>当文本框较大时，非常容易挡住后面的Button按钮</p><p>所以当我们不需要在文本中开启点击事件时，一般取消Raycast Target</p></blockquote><h4 id="边缘线和阴影"><a href="#边缘线和阴影" class="headerlink" title="边缘线和阴影"></a>边缘线和阴影</h4><p>UGUI中没有边缘性和阴影的设置，它是通过了两个脚本进行设置</p><ul><li>边缘线组件：Outline </li><li>阴影组件：Shadow</li></ul><blockquote><p>若想要Text控件中有边缘性和阴影的效果，需要手动Add Component</p></blockquote><h4 id="代码控制-1"><a href="#代码控制-1" class="headerlink" title="代码控制"></a>代码控制</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Text tex = <span class="keyword">this</span>.GetComponent&lt;Text&gt;();</span><br><span class="line">txt.text = <span class="string">&quot;123&quot;</span>;<span class="comment">//动态改变文本框内容</span></span><br></pre></td></tr></table></figure><hr><h3 id="Rawimage原始图像控件"><a href="#Rawimage原始图像控件" class="headerlink" title="Rawimage原始图像控件"></a>Rawimage原始图像控件</h3><p>它是UGUI中用于<strong>显示任何纹理图片的关键组件</strong></p><blockquote><p>它和Image的区别是，一般RwaImage用于显示大图(背景图、不需要打入图集的图片、网络下载图等)</p><p>而Image一般是用来显示小的UI元素</p></blockquote><h4 id="Rawimage参数"><a href="#Rawimage参数" class="headerlink" title="Rawimage参数"></a>Rawimage参数</h4><p>它的外观上和Image无任何区别，仅在参数上有所不同</p><p>参数面板如图</p><p><img src="Unity-UGUI/image-20220525172616185.png" alt="image-20220525172616185" style="zoom:150%;" /></p><ul><li><strong>Texture</strong>：图像纹理</li></ul><blockquote><p>它可以关联任何类型的图片，而不仅仅是Sprite</p></blockquote><h4 id="代码控制-2"><a href="#代码控制-2" class="headerlink" title="代码控制"></a>代码控制</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RawImage raw = <span class="keyword">this</span>.GetComponent&lt;RawImage&gt;();</span><br><span class="line">raw.texture = Resources.Load&lt;Texture&gt;(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="组合控件"><a href="#组合控件" class="headerlink" title="组合控件"></a>组合控件</h2><h3 id="Button按钮"><a href="#Button按钮" class="headerlink" title="Button按钮"></a>Button按钮</h3><p>Button是按钮组件，是UGUI中用于<strong>处理玩家按钮交互</strong>的关键组件</p><p>默认创建的Button是由2个对象组成</p><blockquote><p>父对象是Button组件所依附对象，同时挂载了一个Image组件，作为按钮图片</p><p>子对象是Text组件，用于显示按钮文本。该组件是可选项，若Button图片上以及做好了文字，则不需要Text组件</p></blockquote><img src="/blog/Unity-UGUI/image-20220526190230847.png" class="" title="image-20220526190230847"><h4 id="Button参数"><a href="#Button参数" class="headerlink" title="Button参数"></a>Button参数</h4><p>参数面板如图</p><p><img src="Unity-UGUI/image-20220526190447920.png" alt="image-20220526190447920" style="zoom:150%;" /></p><ul><li><strong>Interactable</strong>：按钮是否能够被点击</li></ul><blockquote><p>该选项默认勾选，取消勾选后Button不能被点击</p></blockquote><ul><li><strong>Transition</strong>：按钮被点击时的过渡效果</li></ul><blockquote><p>该选项用来设置按钮被点击时所发生的反馈效果</p><p>1、<strong>默认为Color Tinr</strong>，点击按钮后用不同的颜色来反馈</p><p>Target Graphic：用于关联Button按钮上的图片</p><p>Normal Color：正常状态下的Button颜色</p><p>Highlighted Color：鼠标移动到Button按钮上时，所显示的颜色</p><p>Pressed Color：鼠标按下Button时，所显示的颜色</p><p>Selected Color：当鼠标上一次按下结束，下一次按下未开始时，当前鼠标的焦点就会处于Button上，也就是处于选中状态</p><p>Disabled Color：当鼠标取消Interactable时，所显示的颜色</p><p><strong>FadeDuration</strong>：Button从一种颜色变为另一种颜色所需时间</p><p>2、Sprite Swap：用图片表示不同状态时的变化</p><p>3、Animation：用动画表示不同状态时的变化</p></blockquote><ul><li><strong>Navigation</strong>：导航模式</li></ul><blockquote><p>可以用键盘的方向键或W/S/A/D去<strong>控制多个Button之间的切换</strong>。可以通过开启Visualize 来看到多个Button之间的导航线</p><p>None：不能通过键盘控制多个Button之间的切换</p><p>Everything：自动</p><p>Horizontal：只能控制水平方向之间的切换</p><p>Verticval：只能控制垂直方向之间的切换</p><p>Autiomatic：自动导航</p><p>Explicit：指定关联某个方向上的Button按钮</p></blockquote><h4 id="代码控制-3"><a href="#代码控制-3" class="headerlink" title="代码控制"></a>代码控制</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Button btn = <span class="keyword">this</span>.GetComponent&lt;Button&gt;();</span><br><span class="line"><span class="comment">//按钮可以被点击</span></span><br><span class="line">btn.interactable = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若想改变Button上的图片,可以直接改变Image组件</span></span><br><span class="line">Image img = <span class="keyword">this</span>.GetComponent&lt;Image&gt;();</span><br></pre></td></tr></table></figure><h4 id="监听点击事件的两种方式"><a href="#监听点击事件的两种方式" class="headerlink" title="监听点击事件的两种方式"></a>监听点击事件的两种方式</h4><p>点击事件是在Button区域抬起、按下一次，才算一次点击</p><blockquote><p>若在Button区域按下，区域外抬起 则不算点击</p></blockquote><p>方式1：拖动脚本</p><ul><li>通过点击面板On Click()上的”+”号，就会出现以下内容</li></ul><p><img src="Unity-UGUI/image-20220526195229707.png" alt="image-20220526195229707" style="zoom:150%;" /></p><ul><li>我们将需要监听的Button按钮拖动到None中，与之关联</li></ul><p><img src="Unity-UGUI/image-20220526195407828.png" alt="image-20220526195407828" style="zoom:150%;" /></p><ul><li>此时No Function就会被激活，我们就能选择依附在Button脚本上的函数</li></ul><blockquote><p>此时当我们再点击Button后，就会调用选择好的函数。不过此处只能选择公共函数，私有函数不能选择</p></blockquote><img src="/blog/Unity-UGUI/image-20220526195716754.png" class="" title="image-20220526195716754"><p>方式2：代码关联</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//若面板上的按钮较多，则可以使用代码的方式完成关联</span></span><br><span class="line">Button btn = <span class="keyword">this</span>.GetComponent&lt;Button&gt;();</span><br><span class="line"><span class="comment">//通过获取的btn对象，来获取监听,并往其中传入一个委托函数即可</span></span><br><span class="line">btn.OnClick.AddListener(ClickBtn);</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除监听</span></span><br><span class="line">btn.OnClick.RemoveListener(ClickBtn);</span><br><span class="line"><span class="comment">//移除所有监听函数</span></span><br><span class="line">btn.OnClick.RemoveAllListener();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClickBtn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    print(<span class="string">&quot;按钮被点击&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例：点击按钮后发射子弹"><a href="#示例：点击按钮后发射子弹" class="headerlink" title="示例：点击按钮后发射子弹"></a>示例：点击按钮后发射子弹</h4><blockquote><p>思路：</p><p>1、创建游戏对象</p><p>2、创建子弹对象</p><p>3、拼UI面板</p></blockquote><ul><li>创建一个游戏对象，并在脚本中实现子弹的创建</li></ul><blockquote><p>该游戏对象和其脚本仅用于创建预设体子弹，而子弹的移动功能则写在子弹的脚本中</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Test脚本，作用于GamePlayer中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fire</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//动态创建子弹对象,并设置子弹出现的位置和角度</span></span><br><span class="line">        GameObject obj = Instantiate(Resources.Load&lt;GameObject&gt;(<span class="string">&quot;Bullet&quot;</span>), <span class="keyword">this</span>.transform.position, <span class="keyword">this</span>.transform.rotation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建子弹对象，并在脚本中实现子弹的移动功能</li></ul><blockquote><p>将子弹对象拖入到Resources文件夹下，将其做成预设体</p><p>之后再从BulletObject脚本中完成子弹移动功能</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Bulletobject脚本，作用于Bulletd</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BulletObject</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> moveSpeed = <span class="number">20</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//延迟3s后，删除子弹</span></span><br><span class="line">        Destroy(<span class="keyword">this</span>.gameObject, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//子弹移动</span></span><br><span class="line">        <span class="keyword">this</span>.transform.Translate(moveSpeed * Vector3.forward * Time.deltaTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建面板Panel作为Button按钮的父对象</li></ul><blockquote><p>Panel的其实就是添加了一个Image组件，只不过锚点分布在全屏</p><p>所以它会随着分辨率的变化，面板大小也会随之变化</p><p>我们将Image组件移除后，就是一个随着屏幕变化的画布</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GamePanel脚本，作用于GamePanel对象中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GamePanel</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Button btnAtk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Test player;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//通过lambda表达式和匿名函数，调用开火方法</span></span><br><span class="line">        btnAtk.onClick.AddListener(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            player.Fire();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><blockquote><p>拼面板前，我们会添加一个Panel，它的锚点分布在全屏</p><p>这样面板的大小会随着屏幕的分辨率而自适应</p><p>并且拼面板前最重要的步骤</p><p>1、修改Canvas中的UI渲染模式，将其改为Scale With Screen Size</p><p>2、若是横屏游戏，就要将Match拖动到1</p></blockquote><hr><h3 id="Toggle开关控件"><a href="#Toggle开关控件" class="headerlink" title="Toggle开关控件"></a>Toggle开关控件</h3><p>Toggle是UGUI中用于<strong>处理玩家单选框或多选框相关交互</strong>的组件</p><p>Toggle组件<strong>默认为多选框</strong>，可以配合ToggleGrounp组件制作为单选框</p><p>默认创建的Toggle是由<strong>4个对象</strong>组成</p><blockquote><p>父对象中有一个Toggle组件</p><p>子对象Background中有一个Image组件表示背景图(必选)，还有一个Label对象中有一个Text组件表示说明文字(可选)</p><p>而Background组件中又有一个子对象Checkmark，它也挂载了一个Image组件用来表示选中时的图案</p></blockquote><p><img src="Unity-UGUI/image-20220527112300032.png" alt="image-20220527112300032" style="zoom:300%;" /></p><h4 id="Toggle参数"><a href="#Toggle参数" class="headerlink" title="Toggle参数"></a>Toggle参数</h4><p>参数面板如图</p><p><img src="Unity-UGUI/image-20220527112440758.png" alt="image-20220527112440758" style="zoom:150%;" /></p><ul><li><strong>Interactable</strong>：是否能被点击，效果和Button相同</li><li>Transition：点击时的过渡效果，和Button类似</li><li>Navigation：通过键盘控制多个控件，和Button类型</li></ul><blockquote><p>以上的三个参数内容和作用都与Button类似</p></blockquote><ul><li><strong>Is On</strong>：控件默认的选中状态，若勾选，则运行时为勾选状态</li><li><strong>Toggle Transition</strong>：开关图片的过度效果</li></ul><blockquote><p>默认为Fade，当我们点击Toggle时，会出现淡入淡出的勾选图案</p><p>另一个参数为None，即没有过渡效果</p><p>此处若想节约性能，就关闭过渡效果</p></blockquote><ul><li><strong>Graphic</strong>：用于关联Toggle被选中时出现的图片</li></ul><blockquote><p>这里会默认关联Checkmark对象上的图片</p><p>而我们若想更换图片，也不会在Graphic参数中更换关联</p><p>而是直接更改Checkmark对象上的图片</p></blockquote><ul><li><strong>Group</strong>：用于关联挂载Toggle Group的对象，来制作单选框</li></ul><blockquote><p>当我们拥有多个Toggle时，其实就是一个多选框，它们之间不会进行影响</p><p>若我们想添加单选框</p><p>一般会创建一个空物体ToggleGroup作为多个Toggle的父对象</p><p>然后为空物体添加Toggle Group组件</p><p>最后再将挂载Toggle Group组件的空对象与其余子对象的Group进行关联</p><p>那么被关联的子对象就会处于互斥状态，即只能被勾选一个</p></blockquote><h4 id="代码控制-4"><a href="#代码控制-4" class="headerlink" title="代码控制"></a>代码控制</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Toggle tog = <span class="keyword">this</span>.GetComponent&lt;Toggle&gt;();</span><br><span class="line">tog.isOn = <span class="literal">true</span>;<span class="comment">//改变Toggle当前的状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过ToggleGroup来得到当前处于激活状态时的控件</span></span><br><span class="line">ToggleGroup togGroup = <span class="keyword">this</span>.GetComponent&lt;ToggleGroup&gt;();</span><br><span class="line">togGroup.allowSwitchOff = <span class="literal">false</span>;<span class="comment">//可以让开关一个都不勾选</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历ToggleGroup迭代器得到当前选中的 Toggle</span></span><br><span class="line"><span class="keyword">foreach</span>(Toggle item <span class="keyword">in</span> togGroup.ActiveToggles())&#123;</span><br><span class="line">    print(item.name + <span class="string">&quot;&quot;</span> + item.isOn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="监听事件的两种方式"><a href="#监听事件的两种方式" class="headerlink" title="监听事件的两种方式"></a>监听事件的两种方式</h4><p>方式1：托脚本</p><ul><li>点击On Value Changed面板上的 + 号，就会出现如下面板</li></ul><p><img src="Unity-UGUI/image-20220527142924368.png" alt="image-20220527142924368" style="zoom:150%;" /></p><ul><li>将需要相应的Toggle对象拖入None中，就能激活Toggle对象身上的脚本</li></ul><p><img src="Unity-UGUI/image-20220527143123639.png" alt="image-20220527143123639" style="zoom:150%;" /></p><ul><li>然后就能找到Toggle脚本上对应的函数，该函数参数必须为Boolean</li></ul><img src="/blog/Unity-UGUI/image-20220527143355841.png" class="" title="image-20220527143355841"><blockquote><p>之后我们改变当前Toggle的状态，就能触发一次函数</p><p>注意：</p><p>在选择函数的过程中，应该选择上方的Dynamic bool函数</p></blockquote><p>方式2：代码添加</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    Toggle tog;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">         tog = <span class="keyword">this</span>.GetComponent&lt;Toggle&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//委托的方式添加</span></span><br><span class="line">        tog.onValueChanged.AddListener(ChangValue2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lambda表达式方式添加，可以不用额外写函数</span></span><br><span class="line">        tog.onValueChanged.AddListener((a) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            print(<span class="string">&quot;代码监听 状态改变&quot;</span> + a);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ChangValue2</span>(<span class="params"><span class="built_in">bool</span> v</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        print(<span class="string">&quot;代码监听 状态改变&quot;</span> + v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例：通过Toggle开关-控制音效"><a href="#示例：通过Toggle开关-控制音效" class="headerlink" title="示例：通过Toggle开关 控制音效"></a>示例：通过Toggle开关 控制音效</h4><p><a href="https://www.taikr.com/course/1203/task/39576/show">https://www.taikr.com/course/1203/task/39576/show</a></p><hr><h3 id="InputField文本输入"><a href="#InputField文本输入" class="headerlink" title="InputField文本输入"></a>InputField文本输入</h3><p>InputField是输入字段组件，用于UGUI中<strong>处理玩家文本输入</strong>相关的组件</p><p>默认创建的InputField由3个对象组成</p><blockquote><p>父对象是挂载了InputField组件，还有一个Iamge组件作为背景图</p><p>子对象上Placeholder上挂载了Text组件，用来提示需要输入的文本</p><p>另一个子对象Text上挂载了Text组件，用于输入文本</p></blockquote><h4 id="InputField参数"><a href="#InputField参数" class="headerlink" title="InputField参数"></a>InputField参数</h4><p>参数面板如图</p><p><img src="Unity-UGUI/image-20220527154632816.png" alt="image-20220527154632816" style="zoom:150%;" /></p><ul><li><strong>TextComponent</strong>：用于关联显示输入内容的文本组件</li></ul><blockquote><p>一般创建号InputFiled对象后，它会默认关联Text对象</p></blockquote><ul><li><strong>Text</strong>：输入框的起始默认值</li></ul><blockquote><p>在该处输入的值，在运行程序后会变成默认值</p></blockquote><ul><li><strong>Character Limit</strong>：可以输入字符长度的最大值</li></ul><blockquote><p>默认值为0.也就是没有限制。若将其改为11，则最多只能输入11个字符</p></blockquote><ul><li><strong>Content Type</strong>：输入文本的字符限制</li></ul><blockquote><p>默认为Standard：标准模式，可以输入任意字符</p><p>Autocorrected：自动更正模式。会自动提示或者替换某些词</p><p>Integer Number：整数模式。只能输入整数</p><p>Decimal Number：十进制模式。只能输入数字或者小数</p><p>Alphanumeric：字母数字模式。只能输入字母和数字</p><p>Name：名字模式。自动将每个单词首字母大写</p><p>Email Address：邮箱地址模式。允许最多输入一个@符合组成的字符</p><p>Password：密码模式。会用星号隐藏字符，<strong>允许使用符号</strong></p><p>Pin：类似密码模式，不过<strong>只能输入整数</strong></p></blockquote><ul><li>Line Type：行类型，用于定义文本格式</li></ul><blockquote><p>默认参数为Single Line：只允许单行显示，不允许空行</p><p>Multi Line Submit：允许使用多行。当宽度不够时，会自动空行</p><p>Multi Line NewLine：允许使用多行。用户按回车键空行</p></blockquote><ul><li>Placeholder：关联用于提示输入文本的对象</li></ul><blockquote><p>默认会关联Placeholder对象</p></blockquote><ul><li>Caret Blink Rate：光标闪烁速度</li></ul><blockquote><p>值越大，光标闪烁的越快，一般使用默认值</p></blockquote><ul><li><p>Custom Caret Color：自定义光标颜色</p></li><li><p>Selection Color：鼠标选中文本时所显示的颜色</p></li><li>Read Only：只读，不能修改</li></ul><blockquote><p>开启后，文本框的内容不能被修改。用于某些固定的文本，方便复制</p></blockquote><h4 id="代码控制-5"><a href="#代码控制-5" class="headerlink" title="代码控制"></a>代码控制</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InputField input = <span class="keyword">this</span>.GetComponent&lt;InputField&gt;();</span><br><span class="line">input.text = <span class="string">&quot;123&quot;</span>;<span class="comment">//设置文本</span></span><br></pre></td></tr></table></figure><h4 id="监听事件的两种方式-1"><a href="#监听事件的两种方式-1" class="headerlink" title="监听事件的两种方式"></a>监听事件的两种方式</h4><p>InputFiled有两种事件监听</p><p>On Value Changed：当文本框中内容改变时，就会调用</p><p>On End edit：当文本框内容结束编辑后调用</p><blockquote><p>只要焦点不再文本框内，都算结束输入</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">InputField input = <span class="keyword">this</span>.GetComponent&lt;InputField&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//内容每次改变时调用</span></span><br><span class="line">input.onValueChanged.AddListener((str)=&gt;&#123;</span><br><span class="line">   print(<span class="string">&quot;代码监听&quot;</span>); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结束编辑后调用</span></span><br><span class="line">input.OnEndEdit.AddListener((str)=&gt;&#123;</span><br><span class="line">   print(<span class="string">&quot;代码监听&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="示例：通过点击改名按钮完成改名"><a href="#示例：通过点击改名按钮完成改名" class="headerlink" title="示例：通过点击改名按钮完成改名"></a>示例：通过点击改名按钮完成改名</h4><p><a href="https://www.taikr.com/course/1203/task/39580/show">https://www.taikr.com/course/1203/task/39580/show</a></p><h3 id="Slider滑动条"><a href="#Slider滑动条" class="headerlink" title="Slider滑动条"></a>Slider滑动条</h3><p>Slider是滑动条组件，用于UGUI中<strong>处理滑动条相关</strong>交互的组件</p><p>默认创建的Slider是由4组对象组成</p><blockquote><p>父对象 Slider上挂载了Slider组件</p><p>子对象 Background挂载了Image，用于显示背景图</p><p>Fill Area和 Handle Slide Area都是空物体，只是为了设置锚点范围，真正显示图片的是它们各自的子对象</p><p>Fill 挂载了Image，用于显示填充进度图</p><p>Handle挂载了Image，用于显示滑动块</p></blockquote><h4 id="Slider参数"><a href="#Slider参数" class="headerlink" title="Slider参数"></a>Slider参数</h4><p>参数面板如图</p><p><img src="Unity-UGUI/image-20220527163611216.png" alt="image-20220527163611216" style="zoom:150%;" /></p><ul><li>FillRect：关联用于填充进度条的图像</li></ul><blockquote><p>默认关联Fill</p></blockquote><ul><li>Handle Rect：关联用于滑动的滑动块图像</li></ul><blockquote><p>默认关联Handle</p></blockquote><ul><li><strong>Direction</strong>：滑动条值增加的方向</li></ul><blockquote><p>默认从左到右增加</p></blockquote><ul><li><p><strong>Min Value、Max Value</strong>：设置滑动条在底端和顶端的最小值和最大值</p></li><li><p><strong>Whole Numbers</strong>：是否约束为整数值变化</p></li></ul><blockquote><p>开启后，滑动条的值只能在整数进行变化</p></blockquote><ul><li><strong>Value</strong>：当前滑动条代表的数值</li><li><strong>On Value Changed：滑动条值改变时执行的函数</strong></li></ul><h4 id="代码控制-6"><a href="#代码控制-6" class="headerlink" title="代码控制"></a>代码控制</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Slider s = <span class="keyword">this</span>.GetComponent&lt;Slider&gt;();</span><br><span class="line">s.<span class="keyword">value</span>;<span class="comment">//得到当前滑动块的值</span></span><br></pre></td></tr></table></figure><h4 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h4><p>Slider控件监听函数需要float参数</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Slider s = <span class="keyword">this</span>.GetComponent&lt;Slider&gt;();</span><br><span class="line">s.onValueChanged.AddListener(()=&gt;&#123;</span><br><span class="line">    print(<span class="string">&quot;代码监听&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="示例：通过滑动条控制音量大小"><a href="#示例：通过滑动条控制音量大小" class="headerlink" title="示例：通过滑动条控制音量大小"></a>示例：通过滑动条控制音量大小</h4><hr><h3 id="Scrollbar滚动条"><a href="#Scrollbar滚动条" class="headerlink" title="Scrollbar滚动条"></a>Scrollbar滚动条</h3><p>Scrollbar是滚动条组件，是UGUI中<strong>用于处理滚动条相关</strong>的组件</p><p>默认是由2组对象组成</p><blockquote><p>父对象Scrollbar对象依附了Scrollbar组件，还有显示滑块的Image组件</p><p>子对象Sliding Area对象是空物体。设置了锚点范围</p><p>真正的底图是依附在Sliding Area的子对象 Handle对象上</p><p>一般情况下我们不会单独使用滚动条，都是配合ScrollView来使用</p></blockquote><h4 id="Scrollbar参数"><a href="#Scrollbar参数" class="headerlink" title="Scrollbar参数"></a>Scrollbar参数</h4><p>参数面板如图</p><p><img src="Unity-UGUI/image-20220528150359235.png" alt="image-20220528150359235" style="zoom:150%;" /></p><ul><li>Handle Rect：关联滚动条底图对象</li><li><strong>Direction</strong>：滚动条滚动的方向</li><li><strong>Value</strong>：程序运行时，滚动条的初始位置(0~1)</li><li><strong>Size</strong>：滚动块占滚动条的大小比例(0~1)</li><li>Number Of Steps：设置滚动条可以滚动多少次</li></ul><blockquote><p>初始值为0，滚动时比较平滑。若将其设置为10，则表示将滚动条平均分为10等分，每次滚动10分之一</p></blockquote><h4 id="代码控制-7"><a href="#代码控制-7" class="headerlink" title="代码控制"></a>代码控制</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Scrollbar sb = <span class="keyword">this</span>.GetComponent&lt;Scrollbar&gt;();</span><br><span class="line"><span class="comment">//一般只能通过代码控制value 和 size的值</span></span><br><span class="line">sb.<span class="keyword">value</span>;</span><br><span class="line">sb.size;</span><br></pre></td></tr></table></figure><h4 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Scrollbar sb = <span class="keyword">this</span>.GetComponent&lt;Scrollbar&gt;();</span><br><span class="line"></span><br><span class="line">sb.OnValueChanged.AddListener((v)=&gt;&#123;</span><br><span class="line">    print(<span class="string">&quot;代码监听&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="Scorll-View滚动视图"><a href="#Scorll-View滚动视图" class="headerlink" title="Scorll View滚动视图"></a>Scorll View滚动视图</h3><p>ScorllView是滚动视图组件，是UGUI中<strong>处理滚动视图相关</strong>的组件</p><p>默认创建的ScrollView是由4组对象构成</p><blockquote><p>父对象ScrollView上依附了ScorllRect组件，和一个用于显示背景图的Image</p><p>子对象</p><p>1、Viewport对象，其子对象Content用来控制滚动视图的范围和内容显示(必须保留)</p><p>2、Scrollbar Horizontal，水平滚动条(可选)</p><p>3、Scrollbar Vertical，竖直滚动条(可选)</p></blockquote><h4 id="Scorll-View参数"><a href="#Scorll-View参数" class="headerlink" title="Scorll View参数"></a>Scorll View参数</h4><p>参数面板如图</p><p><img src="Unity-UGUI/image-20220528152154300.png" alt="image-20220528152154300" style="zoom:150%;" /></p><ul><li><strong>Content</strong>：用于关联<strong>滚动视图实际所能显示的内容范围</strong>对象</li></ul><blockquote><p>该参数会默认关联Viewport下的Content</p><p>它的范围就是滚动视图的容量范围，不是滚动视图的视口范围</p><p>若它的范围增大，则可以通过滑动滚动条，看到原本视口以外的东西</p><p>它会作为所有对象的父对象存在，Scroll View当中所有的视图都会放在它下面</p></blockquote><ul><li><strong>Horizontal &amp; Vertical</strong>：启用水平拖动 和 竖直拖动</li></ul><blockquote><p>默认都是开启状态。这里要注意的是</p><p>不管开启与否，都不会影响滚动条的存在，它只是限制了滚动条的作用</p></blockquote><ul><li><strong>Movement Type</strong>：滚动视图元素的运动类型</li></ul><blockquote><p>默认为<strong>Elastic</strong>(常用)：回弹效果，当滚出边缘后，会弹回边界</p><p><strong>Clamped</strong>：夹紧效果，始终限制在范围内，没有回弹效果</p></blockquote><ul><li><strong>Inertia</strong>：移动惯性，拖动时会有一个惯性效果</li></ul><blockquote><p>默认开启，通过Deceleration Rate来控制减速效果，0没有惯性，1不会停</p></blockquote><ul><li><strong>Scroll Sensitivity</strong>：鼠标中间控制滚动条的灵敏度</li></ul><blockquote><p>默认值为1，但实际体验效果偏慢，可以将值改为5较为合适</p></blockquote><ul><li><strong>Viewport</strong>：关联滚动视图<strong>内容视口</strong>对象</li></ul><blockquote><p>Viewport是用来控制滚动视图的视口，改变它的大小，可以改变视口大小</p><p>可以将Viewport理解为杯子的杯口，杯口多大，我们看到的东西就只有多大</p><p>而Content则是杯子的容量，表示实际上可以装多少东西</p></blockquote><ul><li>Horizontal &amp; Vertical Scrollbar：用于关联水平和竖直滚动条</li></ul><blockquote><p>若当前游戏不需要滚动条，可以直接删除Horizontal &amp; Vertical Scrollbar对象，并在参数中将其置空</p><p>最后调整Spacing参数，调整视口和滚动条的间距</p></blockquote><ul><li><strong>Visbility</strong>：根据Content的大小，来判断是否要隐藏滚动条</li></ul><blockquote><p>默认为Auto Hide And Expand View，</p><p>即当Content大于Viewport时，滚动条会自动出现，并会自动扩展Viewport</p><p>即当Content小于Viewport时，滚动条会自动消失</p><p>1、parmenent：始终显示滚动条，当Content小于Viewport时，滚动条也会显示，一般不常用</p><p>2、Auto Hide：自动隐藏滚动条，但不会拓展Viewport</p></blockquote><ul><li><strong>Spacing</strong>：滚动条和视口之间的间隔</li></ul><blockquote><p>默认值为-3，表示滚动条和视口之间有重叠</p></blockquote><h4 id="代码控制-8"><a href="#代码控制-8" class="headerlink" title="代码控制"></a>代码控制</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一般是通过Scorll View来得到Content，然后再视图窗口中进行动态创建对象</span></span><br><span class="line"></span><br><span class="line">ScrollRect sr = <span class="keyword">this</span>.GetComponent&lt;ScrollRect&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//改变内容的大小，具体可以拖动多少，都是根据它的尺寸来的</span></span><br><span class="line">sr.content.sizeDelta = <span class="keyword">new</span> Vetor(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//改变位置，范围是0~1</span></span><br><span class="line">sr.normalizedPosition = <span class="keyword">new</span> Vector2(<span class="number">0</span>,<span class="number">0.5f</span>);</span><br></pre></td></tr></table></figure><h4 id="监听事件-1"><a href="#监听事件-1" class="headerlink" title="监听事件"></a>监听事件</h4><p>监听函数的<strong>参数类型为Vector2</strong>，代表当前x、y方向上移动的位置</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sr.OnValueChanged.AddListener((ver)=&gt;)&#123;</span><br><span class="line">    print(ver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p>一般用Scorll View来制作<strong>背包、商店、排行榜</strong>等功能</p><p>而我们动态创建的对象，都需要放到Content下面</p><hr><h3 id="Dropdown下拉列表"><a href="#Dropdown下拉列表" class="headerlink" title="Dropdown下拉列表"></a>Dropdown下拉列表</h3><p>Dropdown是UGUI中<strong>用于处理下拉列表</strong>相关的组件</p><p>默认创建的Dropdown是由4组对象组成</p><blockquote><p>父对象Dropdown上依附了Dropdowm组件和一个显示背景的Image组件</p><p>子对象</p><p>1、Lable对象上依附了Text组件，用来显示当前选项描述</p><p>2、Arrow对象上依附了Image组件，用来显示向下的箭头图片</p><p>3、Template对象默认失活，依附了Scroll Rect组件，用来表示下拉列表选单</p></blockquote><h4 id="Dropdowm相关参数"><a href="#Dropdowm相关参数" class="headerlink" title="Dropdowm相关参数"></a>Dropdowm相关参数</h4><p>参数面板如图</p><p><img src="Unity-UGUI/image-20220528162227059.png" alt="image-20220528162227059" style="zoom:150%;" /></p><ul><li>Template：关联下拉列表对象</li><li>Caption Text：关联显示当前选择内容的文本组件</li><li>Caption Image：关联显示当前选择内容的图片组件</li></ul><blockquote><p>下拉列表除了关联文字，也还可以关联图片</p><p>当我们在这关联图片后，下拉列表就能关联到图片</p></blockquote><ul><li><strong>Value</strong>：当前所选项的索引值</li></ul><blockquote><p>若当前列表选中的是OptionA，则索引值为0，类似于数组下标</p></blockquote><ul><li>Alpha Fada Speed：下拉列表窗口时的过渡速度</li><li><strong>Options</strong>：存在的选项列表</li></ul><blockquote><p>通过修改其中的文本，就能修改下拉列表时的内容</p></blockquote><hr><h2 id="图集制作"><a href="#图集制作" class="headerlink" title="图集制作"></a>图集制作</h2><p>UGUI和NGUI使用上最大的不同 就是NGUI在<strong>使用前需要打图集</strong>，而UGUI可以之后再打图集</p><p>打图集的目的就是为了<strong>减少DrawCall 提高性能</strong></p><h3 id="Unity中自带的打图集功能"><a href="#Unity中自带的打图集功能" class="headerlink" title="Unity中自带的打图集功能"></a>Unity中自带的打图集功能</h3><p>Unity中默认的打包图集功能是关闭的，需要在</p><img src="/blog/Unity-UGUI/image-20220601213251796.png" class="" title="image-20220601213251796"><p>Edit-&gt;Project Setting-&gt;Editor中寻找到<strong>Sprite Packer</strong></p><blockquote><p>参数如下</p><p>默认为Disabled：不会打包图集</p><p>Enabled For Bulids(Legacy Sprite Packer)：仅在构建时打包图集，编辑模式下不能打包图集</p><p>Always Enabled(Legacy Sprite Packer)：任何时候都能打包图集</p><p>其中(Legacy Sprite Packer)代表传统模式，它多了一个设置图片间隔的参数</p><ul><li>Padding Power：数字参数代表小图之间的间隔像素，为2的n次方</li></ul></blockquote><h3 id="Unity图集注意事项"><a href="#Unity图集注意事项" class="headerlink" title="Unity图集注意事项"></a>Unity图集注意事项</h3><p><strong>创建图集</strong>时需要注意Unity2020中Sprite Atals被拆分到了2D中</p><img src="/blog/Unity-UGUI/image-20220601213857765.png" class="" title="image-20220601213857765"><p>Sprite Atlas参数面板如下</p><p><img src="Unity-UGUI/image-20220601214059378.png" alt="image-20220601214059378" style="zoom:150%;" /></p><ul><li>Allow Rotation：打图集时是否会自动旋转角度</li></ul><blockquote><p>若有一大一小两张图片，在打图集时，为了节约性能，可能会将大图进行旋转到合适的角度进行打包。</p><p>但是在制作UI时不建议勾选，因为它在UI中的表现会将UI也一起旋转</p></blockquote><ul><li>Tight Packing：制作UI图集时也不建议勾选</li></ul>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>栈：如何实现浏览器的前进和后退功能？</title>
      <link href="blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E6%A0%88/"/>
      <url>blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="如何理解“栈”"><a href="#如何理解“栈”" class="headerlink" title="如何理解“栈”"></a>如何理解“栈”</h3><p>栈最大的特点就是<strong>先进后出，后进先出</strong></p><blockquote><p>先存放的数据后取出，后存放的数据先取出</p></blockquote><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E6%A0%88/%E6%A0%88.jpg" class=""><p>从栈的操作特性上看，<strong>栈是一种“操作受限”的线性表</strong>，<strong>只允许在一端插入和删除</strong>数据。</p><p>虽然链表和数组能够代替栈，但<strong>特定的数据结构是对应特定场景的抽象</strong>，数组和链表暴露了太多的操作接口，使用时比较不可控。</p><p><strong>使用场景</strong>：</p><p>当某个数据集合<strong>只涉及在一端插入和删除数据</strong>，<strong>并且满足后进先出、先进后出的特性</strong>，我们就应该首先想到栈</p><h3 id="如何实现一个“栈”"><a href="#如何实现一个“栈”" class="headerlink" title="如何实现一个“栈”"></a>如何实现一个“栈”</h3><p>栈主要包含两个操作，入栈和出栈，也就是在<strong>栈顶插入一个数据</strong>和 从<strong>栈顶删除一个数据</strong>。</p><ul><li>用数组实现的栈叫做<strong>顺序栈</strong></li><li>用链表实现的栈，我们叫作<strong>链式栈</strong></li></ul><p>不管是顺序栈还是链式栈，存储数据只需要一个大小为n的数组</p><p>在出栈和入栈过程中，只需要一两个临时遍历存储空间，所以<strong>空间复杂度是0(1)</strong></p><h3 id="栈的应用场景"><a href="#栈的应用场景" class="headerlink" title="栈的应用场景"></a>栈的应用场景</h3><h4 id="栈在函数调用中的应用"><a href="#栈在函数调用中的应用" class="headerlink" title="栈在函数调用中的应用"></a><strong>栈在函数调用中的应用</strong></h4><p>操作系统给每个线程分配了一块独立的内存空间，这块内存被组织成“栈”这种结构, 用来<strong>存储函数调用时的临时变量</strong>。</p><p><strong>每进入一个函数，就会将临时变量作为一个栈帧入栈，当被调用函数执行完成，返回之后，将这个函数对应的栈帧出栈</strong></p><p>以下是代码的执行过程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">1</span>; </span><br><span class="line">   <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">   ret = add(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">   res = a + ret;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, res);</span><br><span class="line">   reuturn <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">   sum = x + y;</span><br><span class="line">   <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E6%A0%88/%E6%A0%88%E5%9C%A8%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.jpg" class=""><h4 id="栈在表达式求值中的应用"><a href="#栈在表达式求值中的应用" class="headerlink" title="栈在表达式求值中的应用"></a>栈在表达式求值中的应用</h4><p>对于表达式求值，比如算术表达式：3+5*8-6</p><p>实际上，编译器是通过两个栈来实现的。其中<strong>一个栈保存操作数</strong>，<strong>另一个栈保存运算符</strong>。</p><p>我们从左向右遍历表达式，当遇到数字，就直接压入操作数栈；当遇到运算符</p><p>就于运算符栈的栈顶元素比较。</p><blockquote><p>如果比运算符栈顶元素的优先级高，就将当前运算符压入栈；</p><p>如果比运算符栈顶元素的优先级低或者相同，从运算符栈中取栈顶运算符，从操作数栈的栈顶取 2 个操作数，然后进行计算，再把计算完的结果压入操作数栈，继续比较。</p></blockquote><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E6%A0%88/%E6%A0%88%E5%9C%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8.jpg" class="">]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法训练营-链表</title>
      <link href="blog/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E9%93%BE%E8%A1%A8/"/>
      <url>blog/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a><a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表</a></h3><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表</p><blockquote><p>思路：遍历当前链表，依次让当前结点指向上一个结点</p><p>1、遍历链表，就要知道下一个结点的地址，而当前结点又要指向上一个结点，所以先用一个指针记录下一个结点的地址</p><p>2、头结点指向上一个结点，所以要先声明一个虚拟结点，再让头结点指向虚拟结点</p><p>3、移动头结点指针遍历链表，同时要移动虚拟结点指针，保证虚拟结点指针在头结点指针的上一个位置</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;       </span><br><span class="line">        ListNode* last = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* headPtr = head;</span><br><span class="line">        <span class="keyword">while</span>(headPtr != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">auto</span> headNext = headPtr-&gt;next; <span class="comment">//提前存放head下一个结点地址</span></span><br><span class="line">            headPtr-&gt;next = last;  <span class="comment">//头结点指向上一个结点</span></span><br><span class="line">            last = headPtr;    <span class="comment">//移动虚拟结点</span></span><br><span class="line">            headPtr = headNext;  <span class="comment">//移动头结点遍历链表</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="25-K-个一组翻转链表"><a href="#25-K-个一组翻转链表" class="headerlink" title="25. K 个一组翻转链表"></a><a href="https://leetcode.cn/problems/reverse-nodes-in-k-group/">25. K 个一组翻转链表</a></h3><p>给你链表的头节点 <code>head</code> ，每 <code>k</code> 个节点一组进行翻转，请你返回修改后的链表。</p><p><code>k</code> 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 <code>k</code> 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p><p><strong>示例 1：</strong></p><img src="/blog/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E9%93%BE%E8%A1%A8/reverse_ex1.jpg" class="" title="img"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head &#x3D; [1,2,3,4,5], k &#x3D; 2</span><br><span class="line">输出：[2,1,4,3,5]</span><br></pre></td></tr></table></figure><blockquote><p>思路：</p><p>1、分组(k个一组，也就是往后走k-1步，找到一组)。需要记录一组的开头head 和结尾 end</p><p>2、一组内部(head 到 end之间) 要反转(调用反转链表)</p><p>3、更新每组跟前一组、后一组之间的边</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法训练营-数组</title>
      <link href="blog/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E6%95%B0%E7%BB%84/"/>
      <url>blog/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数组基本练习"><a href="#数组基本练习" class="headerlink" title="数组基本练习"></a>数组基本练习</h2><h3 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26. 删除有序数组中的重复项</a></h3><p>给你一个 <strong>升序排列</strong> <strong>的数组</strong> <code>nums</code> ，请你<strong><a href="http://baike.baidu.com/item/原地算法"> 原地</a></strong> 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新<strong>长度</strong>。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。</p><blockquote><p>模型思想：过滤器思想、检查数组是否越界、在原数组上操作，让其变成”新”数组</p><p>1、原地操作数组，且保持相对顺序</p><p>2、删除重复元素，即利用条件判断筛选元素</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模型代码，只需要补全筛选元素的条件即可</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;  <span class="comment">//n表示筛选出的元素个数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;   <span class="comment">//遍历每一个元素</span></span><br><span class="line">            <span class="keyword">if</span>()&#123;       <span class="comment">//利用条件判断筛选元素</span></span><br><span class="line">                nums[n] = nums[i];  <span class="comment">//将符合条件的元素在原有数组上进行存储</span></span><br><span class="line">                n++;    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;<span class="comment">//返回筛选出的元素个数，也就是数组新长度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">//完整代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;   </span><br><span class="line">            <span class="comment">//i的范围是0~nums.size()-1，不会越界,i-1可能为-1，这会造成数组越界，所以要淡出排除i等于0的情况</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span> || nums[i] != nums[i<span class="number">-1</span>])&#123;       </span><br><span class="line">                nums[n] = nums[i]; </span><br><span class="line">                n++;    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a><a href="https://leetcode.cn/problems/move-zeroes/">283. 移动零</a></h3><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p><strong>请注意</strong> ，必须在不复制数组的情况下<strong>原地</strong>对数组进行操作。</p><blockquote><p>思路模型：过滤器模型、检擦数组是否越界</p><p>1、原地操作数组，保持非0元素的相对顺序</p><p>2、将非0元素过滤</p><p>3、将0元素填满剩余数组</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            <span class="comment">//如果当前元素非0，就将它过滤到数组开始位置</span></span><br><span class="line">            <span class="keyword">if</span>(nums[i] != <span class="number">0</span>)&#123;</span><br><span class="line">                nums[n] = nums[i];</span><br><span class="line">                n++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//非0元素从数组开始位置拍好序后,将数组的剩余位置用0填充</span></span><br><span class="line">        <span class="keyword">while</span>(n &lt; nums.size())&#123;</span><br><span class="line">            nums[n] = <span class="number">0</span>;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="88-合并两个有序数组"><a href="#88-合并两个有序数组" class="headerlink" title="88. 合并两个有序数组"></a><a href="https://leetcode.cn/problems/merge-sorted-array/">88. 合并两个有序数组</a></h3><p>给你两个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p><p>请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p><blockquote><p>思路模型：合并有序数组、数组中原始数据可能会被覆盖，所以要倒着排</p><p>1、分别记录两个数组的元素个数</p><p>2、从后往前遍历nums1</p><p>3、当其中一个数组出界。或者两个数组都没出界时，将大的元素放到nums[i]中</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="keyword">int</span> m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = m - <span class="number">1</span>;<span class="comment">//nums1中最大元素下标为m-1</span></span><br><span class="line">        <span class="keyword">int</span> j = n - <span class="number">1</span>;<span class="comment">//nums2中最大袁术下标为n-1</span></span><br><span class="line">        <span class="comment">//原始数组倒序操作，从最后一个下标开始排</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = m + n - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--)&#123;</span><br><span class="line">            <span class="comment">//当nums2中没有元素。 或 nums1,nums2中都还有元素，并且nums1元素大于nums2</span></span><br><span class="line">            <span class="keyword">if</span>(j &lt; <span class="number">0</span> || i &gt;= <span class="number">0</span> &amp;&amp; nums1[i] &gt;= nums2[j])&#123;</span><br><span class="line">                nums1[k] = nums1[i];<span class="comment">//将选出的最大元素放在原始数组的末尾</span></span><br><span class="line">                i--;<span class="comment">//nums1中还需要排序的个数减一</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                nums[k] = nums[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="设计变长数组"><a href="#设计变长数组" class="headerlink" title="设计变长数组"></a>设计变长数组</h2><p>C++中的变长数组为<strong>vector</strong></p><p>如何实现一个变长数组？</p><ul><li>支持索引和随机访问</li><li>分配多长的连续空间？</li><li>空间不够用怎么办?</li><li>空间剩余很多如何回收？</li></ul><h3 id="变长数组-resizable-array"><a href="#变长数组-resizable-array" class="headerlink" title="变长数组(resizable array)"></a>变长数组(resizable array)</h3><p>一个简易的实现方法</p><ul><li><p>初始申请一个空数组，并分别记录<strong>实际长度(size)</strong> 和<strong>容量(capacity)</strong></p></li><li><p>push back：若空间不够，则重新申请2倍大小的连续空间，拷贝到新空间，释放旧空间</p></li><li>Pop back：若<strong>空间利用率(size/capacity) 不到25%</strong>，就释放一半的空间</li></ul><blockquote><p>1、实际长度是当前数组所占的长度，而容量则是从内存中申请的数组最大长度</p><p>2、当我们往数组中添加元素时，若当前<strong>实际长度超过了容量</strong>，就重新申请2倍大小的连续空间，将原来的元素拷贝到新空间中，并释放旧空间</p><p>3、这里的释放空间阈值不能定太高，否则当我们释放空间后，剩余的空间就很少，若此时添加元素就很容易重新申请一块更大的内存</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法训练营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表（下）：如何轻松写出正确的链表代码？</title>
      <link href="blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%93%BE%E8%A1%A82/"/>
      <url>blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%93%BE%E8%A1%A82/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><h3 id="技巧一：理解指针或引用的含义"><a href="#技巧一：理解指针或引用的含义" class="headerlink" title="技巧一：理解指针或引用的含义"></a>技巧一：理解指针或引用的含义</h3><p><strong>指针也是一种变量，只不过里面存放的是其它变量的地址</strong></p><p>只要指针中存放了这个变量的地址，就指向了这个变量，就能通过指针找到这个变量</p><blockquote><p>举个例子：</p><p>p-&gt;next = q;    这行代码表示，p结点中的next指针里面存储了 q结点的地址</p><p>p-&gt;next = p-&gt;next-&gt;next; 这行代码表示，p结点的next指针中存储了p结点的下下个结点的地址</p></blockquote><h3 id="技巧二：警惕指针丢失和内存泄漏"><a href="#技巧二：警惕指针丢失和内存泄漏" class="headerlink" title="技巧二：警惕指针丢失和内存泄漏"></a>技巧二：警惕指针丢失和内存泄漏</h3><p>当我们更改链表中指针的指向时，要警惕指针丢失的问题</p><p>以单链表插入操作为例：我们希望在a、b结点中插入一个x结点</p><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%93%BE%E8%A1%A82/%E5%8D%95%E9%93%BE%E8%A1%A8%E6%8F%92%E5%85%A5.jpg" class=""><p>我们一定要<strong>先让x结点指向b结点</strong>，<strong>再让a结点指向x结点</strong>。</p><blockquote><p>这是由于b结点的地址存放在a结点处</p><p>若我们先让a结点指向x结点，那么存放在b结点的地址就被x结点地址给替代了</p><p>这样就丢失了b结点的地址，导致x结点不能指向b结点</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误写法</span></span><br><span class="line">p-&gt;next = x;<span class="comment">//p结点指向x结点，b结点地址被替代</span></span><br><span class="line">x-&gt;next = p-&gt;next;<span class="comment">//错误，这里的p结点已经指向了x结点，b结点地址已经不再是p结点的下一个结点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//正确写法</span></span><br><span class="line">x-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = x;</span><br></pre></td></tr></table></figure><p>以上两种代码写法是有着本质的区别，当我们<strong>插入结点时，一定要注意操作顺序</strong>，不要把下一个结点地址丢失了</p><p>同时，当我们在删除结点时，在C++中一定要<strong>手动释放被删除结点的内存空间</strong>，否则，可能会出现内存泄漏的问题</p><h3 id="技巧三：利用虚拟结点简化难度"><a href="#技巧三：利用虚拟结点简化难度" class="headerlink" title="技巧三：利用虚拟结点简化难度"></a>技巧三：利用虚拟结点简化难度</h3><p>当我们对链表进行删除时，其实可以发现，是利用<strong>上一个结点指向下一个结点</strong>实现的</p><p>不过要想删除链表中头结点，而头结点没有上一个结点该怎么办呢？</p><p>这时我们可以引入一个虚拟结点，让它指向链表的头结点，这样就不需要单独拎出只有头结点的情况</p><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%93%BE%E8%A1%A82/%E5%B8%A6%E5%A4%B4%E9%93%BE%E8%A1%A8.jpg" class=""><h3 id="技巧四：重点留意边界条件处理"><a href="#技巧四：重点留意边界条件处理" class="headerlink" title="技巧四：重点留意边界条件处理"></a>技巧四：重点留意边界条件处理</h3><p>我们完成链表代码的编写后要注意这几个边界问题</p><ul><li>链表为空时，代码是否正常运行</li><li>链表中只有一个头结点时，代码是否正常运行</li><li>代码在处理头结点和尾结点时，代码是否能够正常运行</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表（上）：如何实现LRU缓存淘汰算法?</title>
      <link href="blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%93%BE%E8%A1%A8/"/>
      <url>blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="链表结构"><a href="#链表结构" class="headerlink" title="链表结构"></a>链表结构</h3><p>链表常常用于和数组一起比较，我们先从它们的<strong>底层的存储结构</strong>看一下</p><ul><li><p>数组：需要一块<strong>连续的内存空间</strong>，对内存的要求较高。如果我们申请一个10MB大小的数组，若内存中没有<strong>连续的</strong>、<strong>足够大</strong>的空间时，即使剩余内存可用空间大于10MB，<strong>仍会申请失败</strong></p></li><li><p>链表：并不需要一块连续的内存空间，它通过<strong>指针</strong>讲一组<strong>零散的内存块</strong>串联起来。所以申请10MB的链表就不会有问题</p></li></ul><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E5%86%85%E5%AD%98.jpg" class=""><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><p><strong>结构</strong>：</p><p>链表是通过<strong>指针</strong>讲一组零散的内存块串联在一起。其中，我们把<strong>内存块</strong>成为链表的“<strong>结点</strong>”。</p><p>一个结点除了<strong>存储数据</strong>之外，还需要<strong>记录下一个结点的地址</strong>。</p><blockquote><p>所以，一个结点是由一个<strong>数据域</strong>和一个<strong>指针域</strong>构成</p></blockquote><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%93%BE%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8.jpg" class=""><p>其中，我们一般将链表中的第一个结点叫做<strong>头结点</strong>，它是整条链表的<strong>入口</strong>，有了它，我们就能遍历得到整条链表</p><p>我们又将最后一个结点叫做<strong>尾结点</strong>，它指向一个<strong>空地址NULL</strong>，表示整条链表的<strong>出口</strong>，也就是结束链表的遍历</p><p><strong>插入和删除</strong>：</p><p>与数组一样，链表也支持数据的查找、插入和删除操作</p><p>当我们在链表中插入或删除一个数据，并不需要连续的移动其它结点，因为链表中的存储空间本身就不是连续的。所以，<strong>链表在插入和删除数据方便特别迅速</strong>，它的时间复杂度为O(1)</p><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E6%8F%92%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4.jpg" class=""><p>不过，正因为链表的存储空间不是连续的，所以它想要访问第k个元素，就需要从头结点开始，依次遍历链表，直到找到第k个元素为止。时间复杂度为O(n)</p><blockquote><p>可以将链表想象成一列队伍，指针方向就是队伍的面朝向，队伍中的人只能看见面前的人</p></blockquote><h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4><p><strong>循环链表是一种特殊的单链表</strong>。它跟单链表唯一的区别就是，<strong>循环链表尾结点指向了头节点</strong>。</p><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%93%BE%E8%A1%A8/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.jpg" class=""><blockquote><p>从图中也可以看出来，它像一个环一样，首位相连，所以叫”循环”链表</p></blockquote><p><strong>优点</strong>：</p><p>从链尾到链头比较方便，当要处理数据具有<strong>环形结构</strong>特点时，就特别适合循环链表。比如<strong>约瑟夫问题</strong></p><h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4><p>在单链表的基础上，增加了一个前驱指针prev。也就是同时具有<strong>后继指针next</strong> 和 <strong>前驱指针prev</strong>的结点构成的链表</p><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%93%BE%E8%A1%A8/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.jpg" class=""><p>从图中也可以知道，当我们存储同样的数据时，<strong>双向链表要比单链表占用更多的内存空间</strong>。</p><p>但它的好处是<strong>支持双向遍历，更加的灵活</strong></p><h3 id="链表的删除操作"><a href="#链表的删除操作" class="headerlink" title="链表的删除操作"></a>链表的删除操作</h3><p>在实际的应用当中，从链表中删除数据，无非就是两种情况。</p><ul><li><strong>删除结点中 “值等于某个定值” 的结点</strong></li><li><strong>删除给定指针指向的结点</strong></li></ul><blockquote><p>对于第一种情况，无论是单链表还是双向链表，都需要从头结点开始遍历，直到找到定值的结点为止</p><p>但对于第二种情况，若使用单链表的情况下，还是需要从头开始遍历链表，寻找要删除结点的前驱结点，直到p-&gt;next = q 为止。这才说明p 是 q的前驱结点。</p><p>而若使用双向链表的话就不需要从头开始遍历链表。因为当前结点已经存储了上一个结点的地址</p></blockquote><p>其实除了插入和删除操作有优势之外，对于一个<strong>有序链表</strong>，双向链表的<strong>按值查询效率</strong>也比单链表要高</p><p>因为双向链表每次都可以<strong>从中间开始查找目标值p</strong></p><p>若当前值大于p则再次向前查找，否则可以从后面区间查找。这也是<strong>二分法</strong>的思想</p><blockquote><p>所以，尽管双向链表更加耗费内存，但在实际开发中也是用的更广泛。这也是<strong>空间换时间</strong>的设计思想</p></blockquote><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%93%BE%E8%A1%A8/%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.jpg" class=""><h3 id="链表和数组"><a href="#链表和数组" class="headerlink" title="链表和数组"></a>链表和数组</h3><p>正因为内存存储的区别，它们的<strong>插入、删除、随机访问操作</strong>的时间复杂度正好相反</p><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E9%93%BE%E8%A1%A8/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.jpg" class=""><p><strong>数组优点</strong>：</p><ul><li>简单易用，在实现上使用的是<strong>连续的内存空间</strong>，可以借助<strong>CPU的缓存机制</strong>，<strong>预读数组中的数据</strong>，所以<strong>访问效率更高</strong>。</li><li>而链表在内存中并不是连续存储的，所以对CPU缓存不友好，没有办法有效预读</li></ul><p><strong>数组缺点</strong>：</p><ul><li><strong>大小固定</strong>，一经声明就要<strong>占用整块的连续内存空间</strong>，且<strong>不能动态扩容</strong>。若数组声明过大，则会可能出现<strong>内存不足</strong>的情况。若数组声明过小，则只能<strong>重新申请一块更大的内存</strong>，然后将原数组再拷贝进去，这个过程非常耗时。</li><li>而<strong>链表本身则没有大小的限制</strong>，天然的<strong>支持动态扩容</strong></li></ul><blockquote><p>虽然C++中的vector容器是支持动态扩容的，但这个动态扩容并不是我们所理解的在原有数组的基础上添加新的空间，而是从新分配一块更大的内存，再进行数据拷贝，这一过程十分的耗时</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>如果你的内存使用条件十分的刻苦，则应该考虑数组，因为链表中会多存一个指针域，占用的内存会翻倍，而且再C++中，频繁的对链表进行插入和删除、多余的结点还需要程序员手动的释放</li></ul><h3 id="LRU缓存淘汰算法"><a href="#LRU缓存淘汰算法" class="headerlink" title="LRU缓存淘汰算法"></a>LRU缓存淘汰算法</h3><p>首先让我们来了解一下，什么是<strong>LRU缓存淘汰算法</strong></p><p>它会根据数据的历史访问记录来进行淘汰数据，其核心思想是“<strong>如果数据最近被访问过，那么将来被访问的几率也更高</strong>”</p><ul><li><strong>新数据插入到链表头部</strong></li><li><strong>每当缓存数据被访问，则该数据移动到链表的头部</strong></li><li><strong>当链表空间不足时，将链表尾部的数据丢弃</strong></li></ul><h4 id="基于链表实现LRU缓存淘汰算法"><a href="#基于链表实现LRU缓存淘汰算法" class="headerlink" title="基于链表实现LRU缓存淘汰算法"></a>基于链表实现LRU缓存淘汰算法</h4><p>思路：</p><p>我们维护一个<strong>有序</strong>单链表，越靠近链表尾部的结点越早访问。当有一个新的数据被访问时，我们从头开始遍历链表。</p><ul><li>若此数据之前<strong>已经被缓存在链表</strong>中了，那么我们就<strong>遍历得到这个数据对应的结点</strong>，<strong>将它从原来的位置删除</strong>，然后<strong>插入到链表的头部</strong></li><li>若此<strong>数据没有缓存在链表</strong>中，且此时<strong>缓存未满</strong>，则可以将此结点<strong>直接插入到链表的头部</strong>。若此时的<strong>缓存已满</strong>，则可以<strong>删除链表尾结点</strong>，再<strong>将新结点插入链表头部</strong></li></ul><blockquote><p>此时不管缓存有没有满，都需要遍历一次链表，所以基于链表思路实现的LRU的缓存访问复杂度尾O(n)</p><p>但实际上，还可以继续优化这个实现思路，比如引入散列表来记录每个数据的位置，将缓存访问的时间复杂度降到O(1)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
      <url>blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h3><p>数组(Array) 是一种<strong>线性表数据结构</strong>。它用一组<strong>连续的内存空间</strong>，来存储一组<strong>相同类型的数据</strong></p><h4 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h4><p>线性表就是数据排列像一条线一样的结构。每个线性表上的数据最多只有<strong>前和后</strong>两个方法。</p><p><strong>数组、链表、队列、栈</strong>等也是线性数据结构</p><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E7%BA%BF%E6%80%A7%E8%A1%A8.jpg" class=""><p>而与之相对立的是<strong>非线性表</strong>，如<strong>二叉树、堆、图</strong>等</p><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A1%A8.jpg" class=""><h3 id="数组的随机访问"><a href="#数组的随机访问" class="headerlink" title="数组的随机访问"></a>数组的随机访问</h3><p>因为数组是用一组<strong>连续的内存空间</strong>，来存放一组<strong>相同类型的数据</strong>。所以保证了数组的<strong>随机访问</strong></p><blockquote><p>但为了保证数组空间的连续性，当我们<strong>插入</strong>和<strong>删除</strong>数据时，只能对大量的数据进行移动</p><p>而不能直接删除或插入一块内存，这样的话数据空间就不连续</p></blockquote><p>编译器会给每个内存单元分配一个地址，通过地址来访问内存中的数据。</p><p>当编译器要<strong>随机访问</strong>数组中的某个元素时，他会通过<strong>寻址公式</strong>，计算出该元素的内存地址，然后访问</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//base_address 是数组首地址。data_type_size 是当前类型所占字节</span></span><br><span class="line">a[i]_address = base_address + i * data_type_size;</span><br></pre></td></tr></table></figure><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98.jpg" class=""><h3 id="低效的插入和删除"><a href="#低效的插入和删除" class="headerlink" title="低效的插入和删除"></a>低效的插入和删除</h3><p>数组<strong>适合查找</strong>，但查找的时间复杂度并不是O(1)。即便是排好序的数组，你用二分查找，时间复杂度也是 O(logn)</p><blockquote><p>所以，对比链表，数组查找的最大优点在于，<strong>根据下标随机访问的时间复杂度为O(1)</strong></p></blockquote><h4 id="低效的插入"><a href="#低效的插入" class="headerlink" title="低效的插入"></a>低效的插入</h4><p>假设数组长度为 <strong>n</strong>，当我们往数组中插入元素时</p><p>若插入在数组元素<strong>末尾</strong>，那就不需要移动数据，这时的时间复杂度为O(1)</p><p>若插入在数组元素的<strong>开头</strong>，那就需要<strong>将所有元素都依次后移一位</strong>，这时的时间复杂度为O(n)</p><p>由于插入的效率低下，所以我们得通过一些方法来提高插入的效率</p><blockquote><p>假设有一个数组，<strong>仅是用于存放数据的集合</strong>，数组中的数据没有任何规律。</p><p>当我们将要某个元素插入到第k个位置时，可以先将第k个位置的元素放到数组末尾，再将目标元素插入到第k个位置，这样就避免了大规模的数据后移。时间复杂度为O(1)。</p></blockquote><p>假设数组 a[10] 中存储了如下 5 个元素：a，b，c，d，e。</p><p>我们现在需要将元素 x 插入到第 3 个位置。我们只需要将 c 放入到 a[5]，将 a[2] 赋值为 x 即可。最后，数组中的元素如下： a，b，x，d，e，c。</p><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%8F%92%E5%85%A5%E6%8A%80%E5%B7%A7.jpg" class=""><h4 id="低效的删除"><a href="#低效的删除" class="headerlink" title="低效的删除"></a>低效的删除</h4><p>删除操作和插入类型，<strong>当我们要删除第k个位置的数据时，为了内存的连续性，就要将大量的数据向前移动，否则内存就不连续了</strong></p><p>不过实际上，再某些特殊场景下，我们可以<strong>将多次删除的操作集中在一起</strong>。这样就不需要每次删除一个元素都频繁的移动数据</p><p>数组 a[10] 中存储了 8 个元素：a，b，c，d，e，f，g，h。现在，我们要依次删除 a，b，c 三个元素。</p><img src="/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%88%A0%E9%99%A4%E6%8A%80%E5%B7%A7.jpg" class=""><blockquote><p>按照常规的流程来看，当我们依次删除a，b，c三个元素时，后面的数据就要依次往前移动三次</p><p>其实我们可以先记录下当前需要删除的数据，但先不进行数据前移</p><p>当我们的数组内存空间不足时，再根据之前记录所需要删除的数据，执行一次真正的删除操作，这样就大大减少了删除操作导致的数据搬移。</p><p>这也是JVM垃圾回收算法的核心思想</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp-智能指针-侯捷</title>
      <link href="blog/Cpp-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88-%E4%BE%AF%E6%8D%B7/"/>
      <url>blog/Cpp-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88-%E4%BE%AF%E6%8D%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="关于智能指针"><a href="#关于智能指针" class="headerlink" title="关于智能指针"></a>关于智能指针</h2><p>设计一个Class，让它的行为像一个指针</p><p>智能指针是对普通指针进行了一层封装，<strong>普通指针所允许的操作，智能指针都能使用</strong></p><p>底层代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">shared_ptr</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//*运算符重载</span></span><br><span class="line">    T&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> *px;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//-&gt;运算符重载</span></span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> px;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造函数初始化列表,用于接收普通指针</span></span><br><span class="line">    <span class="built_in">shared_ptr</span>(T* p) : px(p) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* px;<span class="comment">//声明一个T类型的指针</span></span><br><span class="line">    <span class="keyword">long</span>* pn;<span class="comment">//声明一个长整型的数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span>&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">shared_ptr</span>&lt;Foo&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> Foo)</span></span>;<span class="comment">//智能指针初始化，并指向Foo</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++面向对象_侯捷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp-转换函数-侯捷</title>
      <link href="blog/Cpp-%E8%BD%AC%E6%8D%A2%E5%87%BD%E6%95%B0-%E4%BE%AF%E6%8D%B7/"/>
      <url>blog/Cpp-%E8%BD%AC%E6%8D%A2%E5%87%BD%E6%95%B0-%E4%BE%AF%E6%8D%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="转换函数"><a href="#转换函数" class="headerlink" title="转换函数"></a>转换函数</h2><p>将一个类A的对象，转换为其它的类型。或将其它类型的对象，转换为类A的类型</p><blockquote><p>就比如将class A的对象转为double类型，或将double类型的对象，转换为class A的类型</p></blockquote><h3 id="转出去"><a href="#转出去" class="headerlink" title="转出去"></a>转出去</h3><p><strong>示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fraction</span> &#123;</span><span class="comment">//分数类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Fraction(<span class="keyword">int</span> num, <span class="keyword">int</span> den = <span class="number">1</span>) : m_numerator(num), m_denominator(den) &#123;&#125;</span><br><span class="line">    <span class="comment">//转换函数，可以将Fraction 转换为double，该函数不需要参数，也没有返回类型，函数名就类型</span></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>)(m_numerator / m_denominator);<span class="comment">//分子除以分母用double类型返回</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_numerator;<span class="comment">//分子</span></span><br><span class="line">    <span class="keyword">int</span> m_denominator;<span class="comment">//分母 </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Fraction <span class="title">f</span><span class="params">(<span class="number">3</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">4</span> + f;<span class="comment">//调用operator double()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>什么情况下会调用转换函数：</p><p>当我们用对象进行算术运算时，编译器会先查看类中是否有对应的算术运算重载，若未找到对应的算术运算重载，就会调用转换函数operator double()</p><p>当我们使用一个分数类的对象时，其实就是调用分子除以分母的结果，也就是一个double类型的值，所以通过转换函数operator double()，将Fraction类型 转换为double类型</p></blockquote><h3 id="转进来"><a href="#转进来" class="headerlink" title="转进来"></a>转进来</h3><p><strong>示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fraction</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//分母具有默认值，在传递实参的时候可以只传递分子。4也就是4/1</span></span><br><span class="line">    Fraction(<span class="keyword">int</span> num, <span class="keyword">int</span> den = <span class="number">1</span>) : m_numerator(num), m_denominator(den)&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Fraction <span class="keyword">operator</span>+(<span class="keyword">const</span> Fraction&amp; f)&#123;</span><br><span class="line">        Fraction temp;</span><br><span class="line">        temp.m_numerator = <span class="keyword">this</span>-&gt;m_numerator + f.m_numerator;</span><br><span class="line">        temp.m_denominator = <span class="keyword">this</span>-&gt;m_denominator + f.m_denominator;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_numerator;<span class="comment">//分子</span></span><br><span class="line">    <span class="keyword">int</span> m_denominator;<span class="comment">//分母 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Fraction <span class="title">f</span><span class="params">(<span class="number">3</span>,<span class="number">5</span>)</span></span>;</span><br><span class="line">    Fraction d2 = f+<span class="number">4</span>;<span class="comment">//调用operator+(),其中编译器会隐式的通过构造函数将4转换为Fraction类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="explict"><a href="#explict" class="headerlink" title="explict"></a>explict</h2><p>构造函数前加上explict，编译器就不会通过构造函数 将其它类型的对象转换为类类型的对象</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Cpp面经</title>
      <link href="blog/Cpp%E9%9D%A2%E7%BB%8F/"/>
      <url>blog/Cpp%E9%9D%A2%E7%BB%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-基础语法"><a href="#C-基础语法" class="headerlink" title="C++ 基础语法"></a>C++ 基础语法</h1><h2 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h2><h3 id="为什么需要内存对齐"><a href="#为什么需要内存对齐" class="headerlink" title="为什么需要内存对齐"></a>为什么需要内存对齐</h3><ul><li>因为大多数处理器并不是按照字节块来存取内存，而是2个字节，4个字节，甚至更多的字节为单位来存取内存</li><li>如果没有内存对齐机制，假如有一个int类型的变量存放在地址为1的连续4个字节地址中。当处理器去取数据时，它会先从<strong>0地址开始读取4个字节</strong>，然后<strong>剔除</strong>不想要的字节，<strong>再从4地址开始，读取4个字节</strong>，再<strong>剔除</strong>不想要的字节，最后再将<strong>剩余数据合并</strong></li></ul><p><strong>总结</strong>：所以内存对齐后可以<strong>增加我们访问数据时的效率</strong></p><img src="/blog/Cpp%E9%9D%A2%E7%BB%8F/image-20220302121741889.png" class="" title="image-20220302121741889"><h3 id="内存对齐的规则"><a href="#内存对齐的规则" class="headerlink" title="内存对齐的规则"></a>内存对齐的规则</h3><ul><li>存储在结构体中的成员，第一个成员地址和结构体地址相同</li><li>结构体的大小等于最大成员对齐的<strong>整数倍</strong></li></ul><p>比如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;s所占字节大小：&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(s) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为16</span></span><br></pre></td></tr></table></figure><h2 id="指针和引用的区别"><a href="#指针和引用的区别" class="headerlink" title="指针和引用的区别"></a>指针和引用的区别</h2><ul><li>指针是一个<strong>变量</strong>，里面存放的是<strong>地址</strong><ul><li>而引用则跟原来的变量实质上是同一个东西，它只是原变量的<strong>别名</strong></li></ul></li><li>指针可以有<strong>多级</strong><ul><li>而引用只有<strong>一级</strong></li></ul></li><li>指针的<strong>声明</strong>和<strong>定义</strong>可以<strong>分开</strong>执行，并且可以设置为<strong>空指针</strong><ul><li>而引用在声明的时候必须进行初始化，并且不能为NULL</li></ul></li><li>指针在初始化后可以改变指向<ul><li>而引用初始化后不能改变</li></ul></li><li><p>对指针使用取地址符(&amp;) 得到的是<strong>指针原本</strong>的地址</p><ul><li>而引用得到的是<strong>引用所指变量</strong>的地址</li></ul></li><li><p>当把指针作为参数传递时，形参和实参是两个<strong>不同的变量</strong></p><ul><li>而引用作为参数传递时，形参和实参 实质上是<strong>同一个变量</strong></li></ul></li></ul><p>注意：</p><p>在编译器中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">int</span> &amp;b = a;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">int</span>* <span class="keyword">const</span> b = &amp;a;</span><br></pre></td></tr></table></figure><h2 id="传递函数参数时，什么时候用指针，什么时候用引用"><a href="#传递函数参数时，什么时候用指针，什么时候用引用" class="headerlink" title="传递函数参数时，什么时候用指针，什么时候用引用"></a>传递函数参数时，什么时候用指针，什么时候用引用</h2><ul><li>需要返回函数局部变量的<strong>内存</strong>时，使用<strong>指针</strong>。此时用引用是没有意义的</li><li>对<strong>栈空间大小比较敏感</strong>时(比如递归)，使用<strong>引用</strong>。因为它不需要创建临时变量，开销更小</li><li><strong>类对象作为参数传递时</strong>，使用引用。这时C++类对象传递的标准方式</li></ul><h2 id="堆和栈的区别"><a href="#堆和栈的区别" class="headerlink" title="堆和栈的区别"></a>堆和栈的区别</h2><ul><li>首先是<strong>申请方式不同</strong><ul><li>栈是系统自动分配</li><li>堆是自己申请和释放</li></ul></li><li>然后<strong>申请大小限制不同</strong><ul><li>栈是向<strong>栈底</strong>拓展，栈顶和栈底是之前预设好的，大小固定</li><li>堆是向<strong>高地址</strong>拓展，是不连续的内存区域，大小可以灵活调整</li></ul></li><li>最后<strong>申请效率不同</strong><ul><li>栈是由系统分配，速度快，不会产生碎片</li><li>堆是由程序员分配，速度慢，频繁的new/delete会产生大量的碎片</li></ul></li></ul><h2 id="struct和class的区别"><a href="#struct和class的区别" class="headerlink" title="struct和class的区别"></a>struct和class的区别</h2><p><strong>相同点</strong>：</p><ul><li>两者都拥有成员函数，公有和私有部分</li><li>所以class可以完成的工作，struct同样可以完成</li></ul><p><strong>不同点</strong>：</p><ul><li>class的访问<strong>修饰符默认是私有</strong>的，而<strong>struct默认是公有</strong>的</li><li>并且在继承方面，class默认是私有继承，而struct默认是公有继承</li></ul><p><strong>引申</strong>：<strong>C++</strong>和C的struct<strong>区别</strong></p><ul><li>C语言中：struct 是<strong>自定义</strong>数据类型，<strong>没有</strong>访问权限的设置，只是一些变量的集合体，而且成员中不允许有<strong>函数</strong></li><li>而C++中：struct 是<strong>抽象</strong>数据类型，<strong>增加了访问权限</strong>的设置，<strong>支持成员函数</strong>的定义，并且还可以实现继承和多态的操作</li></ul><h2 id="C-和-C语言的区别"><a href="#C-和-C语言的区别" class="headerlink" title="C++ 和 C语言的区别"></a>C++ 和 C语言的区别</h2><ul><li><p>C++ 的<strong>内存分配运算符</strong>是 <strong>new</strong>和<strong>delete</strong></p><ul><li>而C语言中是<strong>malloc</strong>和<strong>free</strong></li></ul></li><li><p>C++ 中<strong>可以有函数重载</strong></p><ul><li>而C语言<strong>不允许</strong></li></ul></li><li><p>C++ 中<strong>新增了引用的概念</strong></p><ul><li>而C语言中只有<strong>值</strong>和<strong>指针</strong>的概念</li></ul></li><li><p>C++ 中的<strong>控制输入输出</strong>的是<strong>iostream类</strong></p><ul><li>而C语言是<strong>stdio函数库</strong></li></ul></li></ul><h2 id="new-delete-与-malloc-free的异同"><a href="#new-delete-与-malloc-free的异同" class="headerlink" title="new / delete 与 malloc / free的异同"></a>new / delete 与 malloc / free的异同</h2><p>相同点</p><ul><li>都可以<strong>用于内存的动态申请与释放</strong></li></ul><p>不同点</p><ul><li><p>new/delete 是<strong>C++运算符</strong>，</p><ul><li>而malloc / free是<strong>C/C++的标准库函数</strong></li></ul></li><li><p>new会<strong>自动计算要分配内存空间大小</strong></p><ul><li>而malloc需要<strong>使用显示指定内存大小</strong></li></ul></li><li><p>new/delete 在分配动态申请内存的过程中，<strong>会</strong>调用到构造函数和析构函数</p><ul><li>而malloc / free 只会<strong>分配</strong>和<strong>回收</strong>内存空间，并<strong>不会</strong>调用构造和析构函数</li></ul></li><li><p>new内存分配成功时，返回的<strong>对象类型是指针</strong>，<strong>不需要类型转换</strong>，所以它是<strong>类型安全</strong>的</p><ul><li>malloc 则是<strong>返回void</strong>，需要<strong>通过强制类型转换成我们需要的类型</strong>，所以它<strong>类型不安全</strong></li></ul></li></ul><h2 id="new和delete是如何实现的？"><a href="#new和delete是如何实现的？" class="headerlink" title="new和delete是如何实现的？"></a>new和delete是如何实现的？</h2><p><strong>new运算符</strong></p><ul><li>首先 <strong>new</strong> 会调用<strong>operator new</strong> 函数，<strong>分配</strong>一块足够大的内存空间</li><li>然后 编译器会<strong>运行相应的构造函数进行初始化对象</strong></li><li>最后 <strong>返回一个指向该对象的指针</strong></li></ul><p><strong>delect</strong> 运算符</p><ul><li>首先 对<strong>指针指向的对象</strong>调用析构函数</li><li>然后调用<strong>operator delete</strong>函数<strong>释放内存空间</strong></li></ul><h2 id="C-中为什么还需要new-delete呢？直接用-malloc-free不好吗？"><a href="#C-中为什么还需要new-delete呢？直接用-malloc-free不好吗？" class="headerlink" title="C++中为什么还需要new/delete呢？直接用 malloc/free不好吗？"></a>C++中为什么还需要new/delete呢？直接用 malloc/free不好吗？</h2><ul><li>虽然两者都是用来申请内存和回收内存的</li><li>但在对<strong>非基本数据类型</strong>的<strong>对象</strong>使用时，对象的创建时需要构造函数，销毁时需要析构函数。而<strong>malloc/free 并没有这个功能</strong>，所以new/delete是必须的</li></ul><h2 id="常量指针和指针常量的区别"><a href="#常量指针和指针常量的区别" class="headerlink" title="常量指针和指针常量的区别"></a>常量指针和指针常量的区别</h2><ul><li><strong>指向常量</strong>的指针被称为<strong>常量指针</strong>，由于指针指向一个常量，所以常量指针<strong>不能改变</strong>其<strong>对象的值</strong>，写作const int *p<ul><li>底层const：const<strong>修饰的变量所指对象是一个常量</strong></li></ul></li><li><strong>指针本身是常量</strong> 就被称为<strong>指针常量</strong>，所以指针内的地址不能被改变，写作 int *const p;<ul><li>顶层const：const修饰的变量<strong>本身</strong>是一个常量</li></ul></li></ul><h2 id="define宏定义和const的区别"><a href="#define宏定义和const的区别" class="headerlink" title="define宏定义和const的区别"></a>define宏定义和const的区别</h2><p>编译阶段</p><ul><li>define是在编译的<strong>预处理</strong>阶段起作用<ul><li>而const是在编译、运行的时候起作用</li></ul></li></ul><p>安全性</p><ul><li>define只做<strong>替换</strong>，不做类型检查和计算，一般用一个大括号包含著全部内容，不然容易出错<ul><li>const常量有数据类型，编译器会对其进行类型安全检查</li></ul></li></ul><p>内存占用</p><ul><li>define只是将<strong>宏名称进行替换</strong>，在内存中会产生<strong>多份</strong>相同的备份<ul><li>而const在程序运行中只有一份备份</li></ul></li><li>宏定义的数据<strong>没有分配内存空间</strong>，只是插入替换<ul><li>而const定义的变量 只是值不能改变，但要分配内存空间</li></ul></li></ul><h2 id="内联函数和宏定义的区别"><a href="#内联函数和宏定义的区别" class="headerlink" title="内联函数和宏定义的区别"></a>内联函数和宏定义的区别</h2><ul><li>首先 宏定义在<strong>预处理</strong>阶段起作用，只做简单的<strong>字符串替换</strong>，没有返回值<ul><li>而 内联函数在<strong>编译</strong>阶段起作用，进行<strong>参数类型检查</strong>，<strong>有返回值</strong></li></ul></li><li>然后 内联函数在<strong>编译</strong>时直接<strong>将函数代码嵌入到目标代码中</strong>，省去了函数调用的开销，从而提高执行效率，并且可以实现重载</li><li>最后 编译器会对内联函数进行类型检测、语法判断等，而宏没有</li></ul><h2 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h2><p><strong>浅拷贝</strong></p><ul><li>首先 浅拷贝只是拷贝了一个<strong>指针</strong>，并<strong>没有新开辟一块地址</strong></li><li>所以 就导致了新对象拷贝过来的指针和原对象的指针<strong>指向同一块地址</strong></li><li>最后 就会造成<strong>资源重复释放的错误</strong></li></ul><p><strong>深拷贝</strong></p><ul><li>而深拷贝则是<strong>新开辟了一个地址</strong>，让新对象的<strong>指针指向新开辟的空间</strong></li><li>这样即使原对象被析构掉，也不会影响到新对象所得到的值</li></ul><h2 id="数组和指针"><a href="#数组和指针" class="headerlink" title="数组和指针"></a>数组和指针</h2><ul><li>首先 用sizeof计算数组，得到的是<strong>整个数组</strong>的字节数，而指针则是该<strong>指针变量</strong>的字节数</li><li>然后 一般在使用到<strong>数组名</strong>的地方，编译器会自动的将其<strong>替换</strong>为一个<strong>指向数组首元素</strong>的<strong>指针</strong></li><li>比如 向函数传参时，如果传递的<strong>实参</strong>是一个<strong>数组</strong>，那么<strong>形参</strong>就用<strong>指针</strong>来接收数组的<strong>首地址</strong></li><li>最后 在使用下标时，都是<strong>原地址加下标值</strong>，不过<strong>数组首元素地址是固定</strong>的，而<strong>指针原地址不固定</strong></li></ul><h2 id="C-中重载、重写的区别"><a href="#C-中重载、重写的区别" class="headerlink" title="C++中重载、重写的区别"></a>C++中重载、重写的区别</h2><ol><li>重载</li></ol><ul><li>首先 <strong>同一范围定义</strong>中的<strong>同名函数</strong>才存在重载关系</li><li>其主要特点是，函数名相同，参数类型和数目不同。</li><li>不能仅仅依靠<strong>返回值不同</strong>来区分函数。并且是否重载与<strong>虚函数无关</strong></li></ul><ol><li>重写</li></ol><ul><li>然后 重写是指 在<strong>子类中重写父类的同名函数</strong></li><li>而 <strong>父类函数必须是虚函数</strong></li><li>并且子类函数的<strong>返回值类型</strong>、<strong>参数类型</strong>以及<strong>参数个数</strong>，都要与<strong>父类虚函数相同</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp-虚函数与多态-侯捷</title>
      <link href="blog/Cpp-%E8%99%9A%E5%87%BD%E6%95%B0%E4%B8%8E%E5%A4%9A%E6%80%81-%E4%BE%AF%E6%8D%B7/"/>
      <url>blog/Cpp-%E8%99%9A%E5%87%BD%E6%95%B0%E4%B8%8E%E5%A4%9A%E6%80%81-%E4%BE%AF%E6%8D%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="课程回顾"><a href="#课程回顾" class="headerlink" title="课程回顾"></a>课程回顾</h2><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">List_node_base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    _List_node_base* _M_next;</span><br><span class="line">_List_node_base* _M_prev;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">List_node</span> :</span> <span class="keyword">public</span> _List_node_base</span><br><span class="line">&#123;</span><br><span class="line">_Tp _M_data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>子类的对象中包含了父类的成员，在内存中的图形如下</p></blockquote><img src="/blog/Cpp-%E8%99%9A%E5%87%BD%E6%95%B0%E4%B8%8E%E5%A4%9A%E6%80%81-%E4%BE%AF%E6%8D%B7/image-20220507115119627.png" class="" title="image-20220507115119627"><h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><p><strong>在任何一个成员函数之前加上virtual 关键字</strong>，它就成为了虚函数</p><ul><li>非虚函数：如果<strong>不希望</strong>子类对父类的函数进行覆盖，那就将父类的成员函数写成非虚函数</li><li>虚函数：<strong>希望子类对父类的函数进行覆盖</strong>。并且父类的函数中有默认定义，当子类不调用时使用</li><li>纯虚函数：<strong>子类必须对父类的函数进行覆盖</strong>。父类的函数中没有默认定义，所以子类必须覆盖</li></ul><blockquote><p>在继承的关系中，父类的数据和函数都能被子类继承</p><p>父类的数据被子类继承后占用子类的内存空间</p><p>但函数继承却不是从内存的角度理解，而是子类继承了父类函数的”<strong>调用权</strong>“</p></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">( )</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;<span class="comment">//绘画，每个子类都必须对其进行覆盖，所以用纯虚函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; msg)</span></span>;<span class="comment">//报错，后续报错内容可能需要子类覆盖，所以用虚函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">objectID</span><span class="params">( )</span> <span class="keyword">const</span></span>;<span class="comment">//编号，不需要子类覆盖，所有用非虚函数定义</span></span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span> <span class="keyword">public</span> Shape &#123; ... &#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ellipse</span>:</span> <span class="keyword">public</span> Shape &#123; ... &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++面向对象_侯捷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合与继承</title>
      <link href="blog/Cpp-%E7%BB%84%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF-%E4%BE%AF%E6%8D%B7/"/>
      <url>blog/Cpp-%E7%BB%84%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF-%E4%BE%AF%E6%8D%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><p>在C++中，若一个类中的成员是指针，并且指向另外一个类。那么两者就属于委托关系</p><p><strong>示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">....</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    B* b;<span class="comment">//类型为B的指针，它指向B这个类</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>&#123;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>两者形成委托关系之后，就可以通过指针在任意的时间去调用class B</p></blockquote><img src="/blog/Cpp-%E7%BB%84%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF-%E4%BE%AF%E6%8D%B7/image-20220507111853629.png" class="" title="image-20220507111853629"><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">List_node_base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    _List_node_base* _M_next;</span><br><span class="line">_List_node_base* _M_prev;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">List_node</span> :</span> <span class="keyword">public</span> _List_node_base</span><br><span class="line">&#123;</span><br><span class="line">_Tp _M_data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>语法：</strong></p><p><code>class B : public A</code></p><p><strong>内存角度：</strong></p><img src="/blog/Cpp-%E7%BB%84%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF-%E4%BE%AF%E6%8D%B7/image-20220507113011597.png" class="" title="image-20220507113011597"><blockquote><p>子类的对象中包含了父类的成员</p><p>所以，构造函数是由内而外的。当我们创建子类对象时，会先调用父类的默认构造，再构造子类</p><p>析构函数是而外而内。先析构子类，然后再析构父类</p></blockquote><p><strong>注意：</strong></p><p><strong>父类的析构函数必须是虚函数</strong>，否则析构函数就不会由外而内</p>]]></content>
      
      
      <categories>
          
          <category> C++面向对象_侯捷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>games101笔记</title>
      <link href="blog/games101%E7%AC%94%E8%AE%B0/"/>
      <url>blog/games101%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数学基础"><a href="#数学基础" class="headerlink" title="数学基础"></a>数学基础</h2><h3 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h3><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220304211010236.png" class="" title="image-20220304211010236"><p><strong>单位向量的计算方法</strong>：</p><p>向量/向量的模长</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220304212202619.png" class="" title="image-20220304212202619"><p><strong>向量求和</strong></p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220304212302182.png" class="" title="image-20220304212302182"><p><strong>使用直角坐标描述向量</strong></p><p>认为向量永远从原点(0,0)开始，然后沿着X轴，有一些单位向量往右走，以及一些单位向量沿着Y轴，向上走</p><p>那么就可以用几个X加上几个Y来表示这个向量</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220304213002693.png" class="" title="image-20220304213002693"><p>注意：在图形学上，向量默认是往下写，是列向量</p><h4 id="向量的点乘"><a href="#向量的点乘" class="headerlink" title="向量的点乘"></a><strong>向量的点乘</strong></h4><ul><li>向量的点乘最终得到的结果是一个<strong>数</strong></li></ul><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220304213523423.png" class=""><ul><li>点乘可以快速得到两个向量的<strong>夹角</strong></li></ul><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220304214115299.png" class="" title="image-20220304214115299"><ul><li>尤其是当两个向量都为<strong>方向向量</strong>时最为方便</li></ul><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220304214148791.png" class="" title="image-20220304214148791"><p>在<strong>直角坐标系</strong>中，两个向量进行<strong>点乘</strong>更为方便</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220304214430433.png" class="" title="image-20220304214430433"><p><strong>投影</strong></p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220304215313954.png" class="" title="image-20220304215313954"><p><strong>a</strong>,<strong>b</strong>是两个向量，当有一束光垂直着向量<strong>a</strong>照射过来，那么向量<strong>b</strong>将会投出一个阴影在向量<strong>a</strong>上。</p><p>而投出阴影的这一段，就被称为向量<strong>b</strong>在向量<strong>a</strong>上的投影</p><ul><li>由于向量<strong>b</strong>投影在向量<strong>a</strong>上，那么该<strong>投影一定是沿着向量a方向</strong>。</li></ul><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220304215849895.png" class="" title="image-20220304215849895"><ul><li>所以只要求出k的值，就能得到向量<strong>b</strong>的投影</li></ul><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220304220034056.png" class="" title="image-20220304220034056"><ul><li>算出投影后 可以把该向量进行<strong>垂直与平行的分解</strong></li></ul><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220304220935323.png" class="" title="image-20220304220935323"><p><strong>判断两个向量的方向和接近程度</strong></p><ul><li><p>如果两个向量的点乘结果是<strong>正数</strong>，那么他们的方向<strong>基本一致</strong>，结果越接近1，就离得越近</p></li><li><p>如果两个向量的点乘结果是<strong>0</strong>，那么他们<strong>互相垂直</strong></p></li><li><p>如果两个向量的点乘结果是<strong>负数</strong>，那么他们的方向<strong>基本相反</strong>，结果越接近-1，就离得越远</p></li></ul><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220304222701553.png" class="" title="image-20220304222701553"><p><strong>总结</strong>：</p><ul><li>点乘最大的作用可以<strong>获得两个向量的夹角</strong></li><li>可以获取<strong>一个向量投影到另一个向量上的情况</strong></li><li><strong>判断两个向量的方向和接近程度</strong></li></ul><h4 id="向量的叉乘"><a href="#向量的叉乘" class="headerlink" title="向量的叉乘"></a>向量的叉乘</h4><p>概念：两个不同的向量叉乘后，会得出另一个<strong>向量</strong>，而这个向量必须垂直于原本的两个向量</p><blockquote><p>就是说两个向量叉乘后，得到了一个垂直于这两个向量的新向量</p></blockquote><ul><li>新向量一定是处于另一个平面</li></ul><p>通过右手螺旋定则判断新向量的方向</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220304224117776.png" class="" title="image-20220304224117776"><ul><li><strong>a</strong>叉乘<strong>b</strong>，就是从<strong>a</strong>旋转到<strong>b</strong>方向，拇指对应的方向就是新向量的方向</li><li>而<strong>b</strong>叉乘<strong>a</strong>，就是从<strong>b</strong>旋转到<strong>a</strong>方向，所以叉乘并不满足交换律</li></ul><p>作用：</p><p>可以用叉乘建立一个三维空间直角坐标系</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220304224441816.png" class="" title="image-20220304224441816"><p>在笛卡尔坐标系下的向量叉乘</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220305230223210.png" class="" title="image-20220305230223210"><p>也可以把叉乘表示成矩阵形式</p><p>把向量<strong>a</strong>写成对应的一个矩阵，再去乘以对应的向量<strong>b</strong></p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220305230855071.png" class="" title="image-20220305230855071"><p><strong>作用</strong>：</p><p>1、<strong>判断一个向量在另一个向量的左或者右侧</strong></p><p>假设有两个向量<strong>a</strong>，<strong>b</strong>，通过两个向量的点乘就能判断向量<strong>b</strong>在<strong>a</strong>的左侧还是右侧</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220305232620455.png" class="" title="image-20220305232620455"><ul><li>如果向量<strong>a</strong>乘以向量<strong>b</strong>，得到的<strong>z是正数</strong>，就说明<strong>b在a的左侧</strong>。反之，若z是负数，说明<strong>b在a的右侧</strong></li></ul><p>2、判断一个点，是否在三角形内部</p><p>假设有A,B,C三个点构成的向量，由逆时针排列</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220305234450395.png" class="" title="image-20220305234450395"><ol><li>先看向量<strong>AB</strong>和<strong>AP</strong>，其叉乘结果向外，所以<strong>P点在AB的左侧</strong></li><li>做上述相同操作，用<strong>BC</strong>叉乘<strong>BP</strong>，得到<strong>P点仍在BC左侧</strong></li><li>最后用<strong>CA</strong>叉乘<strong>CP</strong>,得到<strong>P</strong>点依然在<strong>CA左侧</strong></li></ol><p>结论：</p><p>只要<strong>P点在三角形内部</strong>。就一定会在三条边的<strong>左边</strong>或者<strong>右边</strong></p><p>定义3D坐标系</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220306000024580.png" class="" title="image-20220306000024580"><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><p><strong>用来表示位置的变换</strong></p><h4 id="矩阵计算"><a href="#矩阵计算" class="headerlink" title="矩阵计算"></a><strong>矩阵计算</strong></h4><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220420223016770.png" class="" title="image-20220420222957423"><blockquote><ol><li>3×2的矩阵 乘以 2×4的矩阵，最后得到3×4的矩阵</li><li>如何确定矩阵中的元素，如新矩阵中的2行4列的值26。其实就是将第一个矩阵中的第2行和第二个矩阵中的第四列进行一个点积，就能得到新矩阵的值</li></ol></blockquote><p>总结：需要计算第几行第几列的值，就去找旧矩阵中的第几行和第几列，将两者的向量进行点积，得到的结果就是新矩阵中的值</p><h4 id="矩阵性质"><a href="#矩阵性质" class="headerlink" title="矩阵性质"></a><strong>矩阵性质</strong></h4><ul><li><p>矩阵的乘积不具备交换律</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220420224631934.png" class="" title="image-20220420224631934"></li><li><p>但具备结合律和分配律</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220420224655015.png" class="" title="image-20220420224655015"></li></ul><p><strong>矩阵和向量相乘</strong></p><p>向量可以看成(m×1)的矩阵，只要改矩阵为(? × m)，就可以实现矩阵和向量相乘</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220420225138992.png" class="" title="image-20220420225138992"><p>通过该矩阵乘以(x,y)向量，就能按y轴进行对称操作</p><p><strong>矩阵的转置</strong></p><p>就是将矩阵原本的行列进行互换</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220420225604441.png" class="" title="image-20220420225604441"><p>注意：</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220420225742688.png" class="" title="image-20220420225742688"><blockquote><p>如果要对两个相乘的矩阵进行转置，就相当于先对后一个矩阵转置，再乘以前一个矩阵转置</p></blockquote><p><strong>单位矩阵</strong></p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220420225932456.png" class="" title="image-20220420225932456"><blockquote><p>单位矩阵，只有对角线上有非零元素</p></blockquote><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220420230138801.png" class="" title="image-20220420230138801"><blockquote><p>若两个矩阵相乘，得到一个单位矩阵，说明两个矩阵互逆</p></blockquote><hr><p><strong>向量点乘和叉乘写成矩阵形式</strong></p><p>点乘写成矩阵</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220420230656135.png" class="" title="image-20220420230656135"><blockquote><p>a向量乘b向量，可以写成a转置乘b。即若a原本为列向量，转置后变为行向量。1行3列乘3行一列，就能得到一行一列，也就是一个数</p></blockquote><p>叉乘写成矩阵</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220420231250963.png" class="" title="image-20220420231250963"><h2 id="Transformation-变换"><a href="#Transformation-变换" class="headerlink" title="Transformation(变换)"></a>Transformation(变换)</h2><p><strong>课程回顾</strong></p><ul><li>向量点乘</li></ul><blockquote><p>向量点乘的结果是一个数，可以用来判断另一个物体位置的前后</p><p>点乘结果为正，另一个物体在前方</p><p>点乘结果为负，另一个物体在后方</p></blockquote><ul><li>向量叉乘</li></ul><blockquote><p> 向量叉乘结果是一个新向量，可以用来判断另一个物体的相对左右关系</p><p>若新向量的结果大于0，根据右手定则判断，则另一个物体在左边</p><p>若新向量的结果小于0，根据右手定则判断，则另一个物体在右边</p></blockquote><ul><li>矩阵</li></ul><blockquote><p>用来表示位置的变换</p></blockquote><h3 id="2D-变换"><a href="#2D-变换" class="headerlink" title="2D 变换"></a>2D 变换</h3><h4 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h4><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220506220710135.png" class="" title="image-20220506220710135"><blockquote><p>如果将一个图片进行缩放，就是将其的x、y 坐标缩放s 倍。在数学上的形式就是：</p><p>x’ = sx;</p><p>y’ = sy;</p><p>若将这两个式子写成矩阵形式：</p></blockquote><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220506223318676.png" class="" title="image-20220506223318676"><blockquote><p>第一个矩阵是2行1列，第三个矩阵也是是2行一列，所以第二个矩阵就是2行2列，多出的用0补齐</p><p>这样的话也能满足</p><p>x‘ 是一行一列，它等于(s,0)向量和(x,y)向量的点乘，也就是sx</p><p>y’ 是二行一列，它等于(0,s)向量和(x,y)向量的点乘，也就是sy</p><p>所以这里的[s,0,0,s] 对角阵矩阵就被称为<strong>缩放矩阵</strong>，当s 等于0.5时，就对应着图像会缩放0.5倍</p></blockquote><p><strong>x、y不等比缩放</strong></p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220506224848203.png" class="" title="image-20220506224848203"><blockquote><p>对于x，y不等比缩放的情况，只需要将对角阵矩阵中的s对应修改就可以</p></blockquote><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220506225016005.png" class="" title="image-20220506225016005"><h4 id="对称"><a href="#对称" class="headerlink" title="对称"></a><strong>对称</strong></h4><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220506225212749.png" class="" title="image-20220506225212749"><blockquote><p>图片相对于y轴进行反转，就能得到相对于y轴的对称图形，数学形式表示如下</p><p>x’ = -x</p><p>y’ = y</p><p>若写成矩阵形式则表示如下</p></blockquote><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220506225840974.png" class="" title="image-20220506225840974"><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220506225943927.png" class="" title="image-20220506225943927"><blockquote><p>相当于拖着图片的上面那条边，向右沿着水平方向拖拽，图片发生形变。</p><p>由于是沿着水平方向拖拽，所以图片的y轴并没有发生改变</p><p>就能先得到y‘ = y</p><p>然后分析x轴，图片处于x轴坐标上的这条边位置变化为 0，而只有上面的边平移了a</p><p>也就是y = 0时 x轴变化为0，y = 1时 x变化为a，则水平方向移动了ay</p><p>所以能得到x’ = x + ay</p><p>用矩阵表示如下</p></blockquote><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220506231928622.png" class="" title="image-20220506231928622"><h4 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h4><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220506232414740.png" class="" title="image-20220506232414740"><blockquote><p>当我们不说其它条件时，就是默认绕着<strong>原点</strong>(0,0)进行<strong>逆时针旋转</strong></p><p> 图像旋转后，原本(1,0)的点，变成了(cosθ,sinθ)</p><p>再通过矩阵的计算，可以得到旋转后的矩阵</p><p>cosθ -sinθ</p><p>sinθ cosθ</p></blockquote><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220608203553268.png" class="" title="image-20220608203553268"><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220608203705822.png" class="" title="image-20220608203705822"><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>上述的变换都可以写成x’ = ax + by      y‘ = cx + dy的形式</p><p>矩阵形式如下</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220608204735340.png" class="" title="image-20220608204735340"><blockquote><p>如果我们可以把变换写成 一个矩阵去乘以一个输入的坐标，可以得到输出的坐标</p><p>那我们就将这种变换称为线性变换 </p><p>x‘ = M x</p><p>注意：这里需要用相同维度的矩阵去乘以该变量</p></blockquote><h3 id="齐次坐标"><a href="#齐次坐标" class="headerlink" title="齐次坐标"></a>齐次坐标</h3><p>当我们遇到一种特殊的变换时，就需要用到齐次坐标的概念</p><h4 id="平移变换"><a href="#平移变换" class="headerlink" title="平移变换"></a>平移变换</h4><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220608205900064.png" class="" title="image-20220608205900064"><blockquote><p>当图片进行平移时，数学形式的表示如下</p><p>x’ = x + tx</p><p>y’ = y + ty</p></blockquote><p>而平移变换的矩阵形式如下</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220608210045660.png" class="" title="image-20220608210045660"><p>说明了<strong>平移矩阵并不属于线性变换</strong>，所以引入了齐次坐标来解决这个问题</p><h4 id="齐次坐标-1"><a href="#齐次坐标-1" class="headerlink" title="齐次坐标"></a>齐次坐标</h4><p>引入齐次坐标的目的就是为了<strong>将变换都能写成矩阵乘以向量的形式</strong></p><p>将二维的点或者向量，增加一个维度</p><ul><li><p>用(x,y,1)来表示二维的点</p></li><li><p>用(x,y,0)来表示二维的向量</p></li></ul><p>通过齐次坐标将平移写成了矩阵乘以向量的形式</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220608211035843.png" class="" title="image-20220608211035843"><blockquote><p>注意：这里为什么要将向量和点进行区别对待</p><p>因为向量具有平移不变性，将一个向量平移到另一个地方，本质上还是那个向量</p></blockquote><p>在齐次坐标下，有以下概念</p><ul><li>向量 + 向量 = 向量</li><li>点 - 点 = 向量</li><li>点 + 向量 = 点</li><li>点 + 点 = 这两个点的中点</li></ul><h4 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h4><p>对于任何的一种变换若能写成<strong>线性变换加上平移</strong>，那么我们称之为仿射变换</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220608211919859.png" class="" title="image-20220608211919859"><p>而所有的仿射变换，都能够写成齐次坐标的形式</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220608211949391.png" class="" title="image-20220608211949391"><blockquote><p>如果我们用齐次坐标去表示二维的仿射变换</p><p>那么<strong>它的最后一行，一定是(0 0 1)</strong></p><p>平移的坐标一定是写在<strong>最后一列的头两个数</strong></p><p>然后剩余左边的<strong>2 × 2矩阵是 原来线性变换矩阵的值</strong></p></blockquote><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220608212353485.png" class="" title="image-20220608212353485"><p><strong>注意：</strong>只有用齐次坐标表示二维的仿射变换它的矩阵最后一行才是(0 0 1)</p><h3 id="其它变换"><a href="#其它变换" class="headerlink" title="其它变换"></a>其它变换</h3><h4 id="逆变换"><a href="#逆变换" class="headerlink" title="逆变换"></a>逆变换</h4><p>将一个操作的变换反过来，就被称为逆变换</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220608212826148.png" class="" title="image-20220608212826148"><blockquote><p>逆变换在数学上所对应的<strong>乘以该变换的逆矩阵</strong></p><p><strong>一个矩阵乘以它的逆矩阵一定等于单位矩阵</strong></p></blockquote><h4 id="组合变换"><a href="#组合变换" class="headerlink" title="组合变换"></a>组合变换</h4><ul><li>复杂的变换可以通过简单的变换得到</li><li>变换过程种的先后顺序非常重要，会影响到变换结果</li></ul><p>假设，我们想要将得到下图</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220608213248486.png" class="" title="image-20220608213248486"><p>若是先平移再进行旋转，则不能得到目标结果</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220608213322952.png" class="" title="image-20220608213322952"><p>若是<strong>先旋转再平移</strong>，则能够得到目标结果</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220608213355040.png" class="" title="image-20220608213355040"><blockquote><p>虽说上述两种方法做的单个事情一样，但组合后的顺序不一样，则得到的结果也不一样。</p><p>这个可以通过矩阵的乘法理解，变换就是在<strong>某个向量前乘以一个矩阵</strong>，若再变换一次，就再从前面乘以一个矩阵。</p><p>若矩阵相乘的顺序改变了，它不满足交换律，所以结果也改变了</p></blockquote><p><strong>组合矩阵的计算顺序</strong></p><p>当一个向量前面乘了多个矩阵，它会依次<strong>从右到左</strong>开始计算</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220608214039269.png" class="" title="image-20220608214039269"><p>  <strong>变换的分解</strong></p><p>若我们不以原点进行旋转，而是以c点进行旋转，我们可以先将c点移动到原点上，再进行旋转，之后再平移回去</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220608215600276.png" class="" title="image-20220608215600276"><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220608215740179.png" class="" title="image-20220608215740179"><h3 id="3D-变换"><a href="#3D-变换" class="headerlink" title="3D 变换"></a>3D 变换</h3><p>3D变换就是在2D变化的基础上增加了一个维度，与2D变换类似</p><p>3D 点 = (x,y,z,1)</p><p>3D 向量=(x,y,z,0)</p><p>三维空间中的齐次坐标表示仿射变换</p><img src="/blog/games101%E7%AC%94%E8%AE%B0/image-20220608220635005.png" class="" title="image-20220608220635005"><blockquote><p>规律和二维类型</p><p>最后一行是(0 0 0 1)</p><p>最后一列的头三个数表示</p><p>左边剩下的3×3矩阵就是三维空间中的线性变换</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 图形学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> games101 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>static</title>
      <link href="blog/static/"/>
      <url>blog/static/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="静态成员变量"><a href="#静态成员变量" class="headerlink" title="静态成员变量"></a>静态成员变量</h2><p>在成员变量前，加上<strong>static</strong>关键字，那么它就会变成了静态成员变量，就<strong>不再属于栈上某个对象</strong>上的数据。而是存放静态常量区当中</p><blockquote><p>当我们创建多个对象时，每个对象都会在内存中创建相应的成员变量</p><p>而非静态成员变量只有一份，并且不在对象的内存中创建</p></blockquote><img src="/blog/static/image-20220503101214836.png" class="" title="image-20220503101214836"><h2 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h2><p>在成员函数前，加上static关键字。它就变成了静态成员函数。</p><blockquote><p>成员函数和静态成员函数都不在对象的内存中创建，不会因为创建多个对象而创建多个函数</p><p>静态成员函数没有this指针，所以不能访问对象上的非静态成员变量</p></blockquote><img src="/blog/static/image-20220503101132364.png" class="" title="image-20220503101132364"><ul><li>通过<strong>类名</strong>直接调用静态成员函数</li><li>通过<strong>对象</strong>调用</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++面向对象_侯捷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this指针总结</title>
      <link href="blog/this%E6%8C%87%E9%92%88/"/>
      <url>blog/this%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(<span class="keyword">int</span> a, <span class="keyword">char</span> b) :m_age(a), m_sex(b) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAge</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> m_age&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSex</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> m_sex&#125;;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_age;</span><br><span class="line">    <span class="keyword">char</span> m_sex</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>,<span class="string">&#x27;男&#x27;</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test01();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="什么是this指针"><a href="#什么是this指针" class="headerlink" title="什么是this指针"></a>什么是this指针</h2><p>this指针是一种代称，它<strong>隐含</strong>在每个<strong>非静态成员函数</strong>内，它指向的是<strong>被调用成员函数所在的对象内存空间</strong></p><ul><li>this指针不需要定义，也不能定义，它能在成员函数中<strong>直接使用</strong></li></ul><blockquote><p>比如，在上述代码中构造函数 Person(int a, char b)，实际上是<strong>Person(this,int a, char b)</strong></p><p>也就是创建了一块名为p1的内存，然后this指向p1的起始位置，并且分配了4个字节的空间给m_age，1个字节的空间给m_sex</p><p>所以即使当形参与成员变量同名，也能清除的区分</p></blockquote><img src="/blog/this%E6%8C%87%E9%92%88/image-20220501211752269.png" class=""><h2 id="this指针的作用"><a href="#this指针的作用" class="headerlink" title="this指针的作用"></a>this指针的作用</h2><p>对象和成员函数之间，就是通过this指针连接的</p><img src="/blog/this%E6%8C%87%E9%92%88/image-20220503094001878.png" class="" title="image-20220503094001878"><blockquote><p>c1.real() 实际上是 complex::real(&amp;c1)</p><p>该过程就是因为成员函数中隐含了this指针，而c1又将地址放入了this指针当中。</p><p>所以，通过对象传入的地址不同，成员函数能够通过this指针，准确的调用其中的数据</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 深入理解C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈、堆以及内存管理</title>
      <link href="blog/%E6%A0%88%E3%80%81%E5%A0%86%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>blog/%E6%A0%88%E3%80%81%E5%A0%86%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="栈-stack"><a href="#栈-stack" class="headerlink" title="栈(stack)"></a>栈(stack)</h2><p><strong>定义</strong>：</p><p>存在于某个<strong>作用域</strong>中的一块内存空间，一般<strong>定义的程序块</strong>运行时才存在</p><ul><li><strong>局部变量</strong></li><li><strong>函数参数</strong></li><li><strong>非static对象</strong></li></ul><p><strong>生命周期：</strong></p><p>栈的生命周期在<strong>作用域内</strong>，<strong>离开作用域</strong>后栈内的空间就会被<strong>自动清理</strong></p><blockquote><p>在对象前加上 static，就能将该对象的作用域提升到全局，这样它只有在程序结束时才会被清理</p></blockquote><hr><h2 id="什么是堆-Heap"><a href="#什么是堆-Heap" class="headerlink" title="什么是堆(Heap)"></a>什么是堆(Heap)</h2><p><strong>定义：</strong></p><p>由<strong>操作系统提供</strong>的一块内存空间，堆内的对象是<strong>动态分配</strong>的，而且要<strong>手动销毁</strong></p><ul><li>利用 <strong>new</strong> 创建对象。<strong>delete</strong> 销毁对象</li></ul><p><strong>生命周期：</strong></p><p>堆的生命周期和程序相同，若不及时用delete 清理堆中的内容，就会造成内存泄漏</p><blockquote><p><strong>内存泄漏</strong>：就是对该块内存失去控制</p><p>假设：void test(){Complex* p = new Complex；}</p><p>当作用域结束后，p所指的堆中的对象仍然存在，但指针p的生命周期却结束了</p><p>那就再也没有机会清理堆中的对象了</p><p>所以：指针p被清理之前，先delete堆中的对象</p></blockquote><hr><h2 id="new的内部操作"><a href="#new的内部操作" class="headerlink" title="new的内部操作"></a>new的内部操作</h2><p>当我们使用new 去创建任何一个对象的时候，都会<strong>先分配空间</strong>，再<strong>调用指针</strong>。编译器会将new分解成三个步骤</p><ol><li><strong>分配内存</strong>。通过调用<strong>operator new</strong> 在堆中分配一块内存空间，该函数在内部实际上会调用<strong>malloc()</strong></li><li>转型。将<strong>void指针</strong>类型<strong>转换</strong>为<strong>类指针</strong>类型</li><li><strong>构造函数</strong>。通过指针调用构造函数</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设：</span></span><br><span class="line">Complex* pc = <span class="keyword">new</span> Complex(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译器会将new分解成三个步骤</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、分配内存。</span></span><br><span class="line"><span class="keyword">void</span>* mem = <span class="keyword">operator</span> <span class="keyword">new</span>( <span class="keyword">sizeof</span>(Complex) );</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、转型</span></span><br><span class="line">pc = <span class="keyword">static_cast</span>&lt;Complex*&gt;(men);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、构造函数</span></span><br><span class="line">pc-&gt;Complex::Complex(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/blog/%E6%A0%88%E3%80%81%E5%A0%86%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/image-20220501170621562.png" class=""><blockquote><p>Complex* pc = new Complex(1,2)</p><p>就是在堆中开辟一个空间</p><p>然后用指针pc在空间中进行构造函数</p></blockquote><h2 id="delete的内部操作"><a href="#delete的内部操作" class="headerlink" title="delete的内部操作"></a>delete的内部操作</h2><p>使用delete时，它会<strong>先调用析构函数</strong>，然后<strong>再释放内存</strong></p><ol><li><strong>调用析构函数</strong>。<strong>删除对象内存中指针所指的数据</strong></li><li><strong>释放内存</strong>。通过调用<strong>operator delete()</strong> 函数，它内部会调用<strong>free()</strong>函数去<strong>删除对象本身</strong></li></ol><blockquote><p>注意：</p><p>析构函数清理的是对象内存中指针所指的数据，并不会清理对象本身</p><p>而operator delete 才是释放对象本身的内存</p></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> pc;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译器会转换为下面的步骤</span></span><br><span class="line">Complex::~Complex(pc);<span class="comment">//析构函数</span></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pc)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="new-一定要搭配-delete"><a href="#new-一定要搭配-delete" class="headerlink" title="new[] 一定要搭配 delete[]"></a>new[] 一定要搭配 delete[]</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String* p = <span class="keyword">new</span> String[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><blockquote><p>因为String类型中存放的是一个指针，若此时只用delete，就会造成内存泄漏</p><p>若使用的是delete，那么系统就不知道内存中有一个数组，它只会调用一次析构函数去删除String中的数据。之后调用operator delete()函数清理堆中内存时，还有其它的String没有析构，所以就会造成内存泄漏。</p><p>但若使用的是delete[],它就会调用多次析构函数。此时再清理堆中的内存，就不会造成内存泄漏</p></blockquote><img src="/blog/%E6%A0%88%E3%80%81%E5%A0%86%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/image-20220502224104827.png" class="" title="image-20220502224104827"><p><strong>总结：</strong></p><ul><li>如果通过new[ ]创建的对象内有<strong>指针</strong>，那就必须使用delete[]</li><li>若不使用delete[]，那么泄漏的内存不是堆中内存的对象本身，而是<strong>对象中指针所指的数据</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++面向对象_侯捷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp-三大函数-侯捷</title>
      <link href="blog/Cpp-%E4%B8%89%E5%A4%A7%E5%87%BD%E6%95%B0-%E4%BE%AF%E6%8D%B7/"/>
      <url>blog/Cpp-%E4%B8%89%E5%A4%A7%E5%87%BD%E6%95%B0-%E4%BE%AF%E6%8D%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="三大函数：拷贝构造、拷贝赋值、析构"><a href="#三大函数：拷贝构造、拷贝赋值、析构" class="headerlink" title="三大函数：拷贝构造、拷贝赋值、析构"></a>三大函数：拷贝构造、拷贝赋值、析构</h2><p>字符串的本质：</p><blockquote><p>一般来说，字符串内只有一个<strong>指针</strong></p><p>当<strong>字符串初始化</strong>时，才会<strong>创建一个变量来存放字符本身</strong>，然后指针指向该变量。</p></blockquote><p><strong>手写String示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    String(<span class="keyword">const</span> <span class="keyword">char</span>* cstr = <span class="number">0</span>);<span class="comment">//String的默认构造函数</span></span><br><span class="line">    String(<span class="keyword">const</span> String&amp; str);<span class="comment">//拷贝构造，接收String对象</span></span><br><span class="line"><span class="built_in">string</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> String&amp; str);<span class="comment">//拷贝赋值</span></span><br><span class="line">    ~String();<span class="comment">//析构</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">char</span>* <span class="title">get_c_str</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> m_data;&#125;<span class="comment">//函数体内不改变data，函数名后面加const</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* m_data;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//构造函数声明在类外</span></span><br><span class="line"><span class="keyword">inline</span></span><br><span class="line">String:: String(<span class="keyword">const</span> <span class="keyword">char</span>* cstr = <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cstr)&#123;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(cstr)+<span class="number">1</span>];<span class="comment">//strlen()获取传入字符的长度</span></span><br><span class="line">        <span class="built_in">strcpy</span>(m_data,cstr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//字符串未指定初值，为空字符串</span></span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1</span>];</span><br><span class="line">        *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line"><span class="keyword">inline</span></span><br><span class="line">String::String(<span class="keyword">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">m_data = <span class="keyword">new</span> <span class="keyword">char</span>[ <span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span> ];<span class="comment">//在堆中申请空间</span></span><br><span class="line"><span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝赋值</span></span><br><span class="line"><span class="keyword">inline</span></span><br><span class="line">String&amp; String::<span class="keyword">operator</span>=(<span class="keyword">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;str)<span class="comment">//检测自我赋值，</span></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">delete</span>[] m_data;</span><br><span class="line">m_data = <span class="keyword">new</span> <span class="keyword">char</span>[ <span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span> ];</span><br><span class="line"><span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span></span><br><span class="line">String:: ~String()&#123;</span><br><span class="line">    <span class="keyword">delete</span>[] m_data; <span class="comment">//删除存放字符的变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">String <span class="title">s1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">s2</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">s3</span><span class="params">(s2)</span></span>;<span class="comment">//调用拷贝构造函数</span></span><br><span class="line">    String s3 = s2;<span class="comment">//调用拷贝赋值函数</span></span><br><span class="line">    </span><br><span class="line">    String* p = <span class="keyword">new</span> String(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="拷贝构造"><a href="#拷贝构造" class="headerlink" title="拷贝构造"></a>拷贝构造</h3><p>当类的成员中<strong>包含指针</strong>，那么就必须<strong>重写拷贝构造函数</strong>，在堆区申请空间。否则就会产生<strong>两个指针指向同一块内存区域</strong>的问题，这也就是<strong>深浅拷贝</strong>问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span></span><br><span class="line">String::String(<span class="keyword">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">m_data = <span class="keyword">new</span> <span class="keyword">char</span>[ <span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span> ];<span class="comment">//在堆中申请空间</span></span><br><span class="line"><span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>浅拷贝</strong>：编译器调用了默认的拷贝构造函数</p><ul><li>首先 浅拷贝只是拷贝了一个<strong>指针</strong>，并<strong>没有新开辟一块地址</strong></li><li>所以 就导致了新对象拷贝过来的指针和原对象的指针<strong>指向同一块地址</strong></li><li>最后 就会造成<strong>资源重复释放的错误</strong></li></ul><p><strong>深拷贝</strong>：<strong>重写拷贝构造函数</strong>，在<strong>堆区申请空间</strong></p><ul><li>而深拷贝则是在<strong>堆区新开辟了一个内容空间</strong>，让新对象的<strong>指针指向新开辟的空间</strong></li><li>这样即使原对象被析构掉，也不会影响到新对象所得到的值</li></ul><h3 id="拷贝赋值"><a href="#拷贝赋值" class="headerlink" title="拷贝赋值"></a>拷贝赋值</h3><p>若存在a = b，则会调用拷贝赋值操作</p><ul><li>首先 清理a的内存空间</li><li>然后 根据b的内存空间大小，给a分配相同的空间</li><li>最后 将b中的数据拷贝到a中</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span></span><br><span class="line">String&amp; String::<span class="keyword">operator</span>=(<span class="keyword">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;str)<span class="comment">//检测自我赋值</span></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">delete</span>[] m_data;</span><br><span class="line">m_data = <span class="keyword">new</span> <span class="keyword">char</span>[ <span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span> ];</span><br><span class="line"><span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>检测自我赋值很关键，若真的存在两个对象的指针指向同一块内存，那么就直接返回</p><p>否则后续将会产生不确定性</p></blockquote><img src="/blog/Cpp-%E4%B8%89%E5%A4%A7%E5%87%BD%E6%95%B0-%E4%BE%AF%E6%8D%B7/image-20220429145226508.png" class="" title="image-20220429145226508">]]></content>
      
      
      <categories>
          
          <category> C++面向对象_侯捷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="blog/%E7%AE%97%E6%B3%95/"/>
      <url>blog/%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><img src="/blog/%E7%AE%97%E6%B3%95/image-20220429164520442.png" class="" title="image-20220429164520442"><blockquote><p>head-&gt;next 是<strong>根据head指针域的地址访问下一个节点</strong></p><p>也就能通过 head-&gt;next-&gt;val 访问下一个节点的数据</p><p>还能通过 head-&gt;next-&gt;next 根据下一个节点的指针域地址访问下下个节点</p></blockquote><h2 id="基本技能"><a href="#基本技能" class="headerlink" title="基本技能"></a>基本技能</h2><p>链表相关的核心点。遇到链表相关题型，最好能够画出来</p><ul><li>dummy node 虚拟节点</li></ul><blockquote><p>当涉及到头节点可能被删除的问题，就需要引入一个虚拟节点，作为整个链表的虚拟头结点</p><p>而指向虚拟头结点的指针就可以认为是连接整个链表的“针”</p></blockquote><ul><li>快慢指针</li><li>插入一个节点到排序链表</li><li>从链表中移除一个节点</li><li>反转链表</li></ul><blockquote><p>元素位置不变，完成链表指向的反转</p></blockquote><ul><li>合并两个链表</li><li>找到链表的中间节点</li></ul><h2 id="常见题型"><a href="#常见题型" class="headerlink" title="常见题型"></a>常见题型</h2><h3 id="83-删除排序链表中的重复元素"><a href="#83-删除排序链表中的重复元素" class="headerlink" title="83. 删除排序链表中的重复元素"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">83. 删除排序链表中的重复元素</a></h3><p>给定一个已排序的链表的头 <code>head</code> ，删除所有重复的元素，使每个元素只能出现一次，返回已经排序的链表</p><blockquote><p>思路：</p><p>由于链表已经排好序，所以可以比较两个相邻的节点，然后指向相同节点的后一个节点。</p><p>这样就能保证在删除重复元素时，还能使每个元素出现一次</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span><span class="comment">//定义链表节点的结构体</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span>)&#123;<span class="comment">//链表为空</span></span><br><span class="line">            <span class="keyword">return</span> head;    <span class="comment">//直接返回空表</span></span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;val == cur-&gt;next-&gt;val)&#123;</span><br><span class="line">                ListNode* temp = cur-&gt;next;</span><br><span class="line">                cur-&gt;next = cur-&gt;next-&gt;next;<span class="comment">//删除节点后，伴随着指针下一个节点的变化</span></span><br><span class="line">                <span class="keyword">delete</span> temp;<span class="comment">//手动删除内存</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cur = cur-&gt;next;<span class="comment">//遍历链表</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="82-删除排序链表中的重复元素-II"><a href="#82-删除排序链表中的重复元素-II" class="headerlink" title="82. 删除排序链表中的重复元素 II"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/">82. 删除排序链表中的重复元素 II</a></h3><p>给定一个已排序的链表的头 <code>head</code> ， <em>删除原始链表中所有重复数字的节点，只留下不同的数字</em> 。返回 <em>已排序的链表</em> 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span><span class="comment">//定义链表节点的结构体</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//当链表的节点个数小于2，就不会发生删除节点的操作，所以直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);<span class="comment">//虚拟节点</span></span><br><span class="line">        dummyHead-&gt;next = head;<span class="comment">//虚拟节点指向头结点，充当虚拟头节点</span></span><br><span class="line">        ListNode* cur = dummyHead;<span class="comment">//指向虚拟头结点的头指针</span></span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next &amp;&amp; cur-&gt;next-&gt;next)&#123;<span class="comment">//存在两个相邻的节点</span></span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;next-&gt;val == cur-&gt;next-&gt;next-&gt;val)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = cur-&gt;next-&gt;val;<span class="comment">//记录链表中出现的重复数字</span></span><br><span class="line">                <span class="keyword">while</span>(cur-&gt;next &amp;&amp; cur-&gt;next-&gt;val ==x)&#123; <span class="comment">//当头指针的下一个节点存在并且该值是重复数字</span></span><br><span class="line">                    ListNode* temp = cur-&gt;next;</span><br><span class="line">                    cur-&gt;next = cur-&gt;next-&gt;next;<span class="comment">//删除该链表</span></span><br><span class="line">                    <span class="keyword">delete</span> temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cur = cur-&gt;next;<span class="comment">//b</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        head = dummyHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dummyHead;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a><a href="https://leetcode-cn.com/problems/reverse-linked-list/">206. 反转链表</a></h3><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><blockquote><p>思路：</p><p>通过修改节点的指向操作，来达到反转链表的目标。图片如下</p></blockquote><img src="/blog/%E7%AE%97%E6%B3%95/image-20220503230847048.png" class="" title="image-20220503230847048"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span><span class="comment">//定义链表节点的结构体</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//双指针        </span></span><br><span class="line">        ListNode* cur = <span class="literal">NULL</span>;<span class="comment">//存放上一个节点的指针</span></span><br><span class="line">        ListNode* pre = head;<span class="comment">//定义遍历指针，用来结束遍历</span></span><br><span class="line">        <span class="keyword">while</span>(pre != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            ListNode* temp = pre-&gt;next;<span class="comment">//存放下一个节点的指针，以免找不到后续链表</span></span><br><span class="line">            pre-&gt;next = cur;<span class="comment">//当前指针指向上一个节点</span></span><br><span class="line">            cur = pre;<span class="comment">//移动上一个节点指针，更新需要被连接的上一个节点地址</span></span><br><span class="line">            pre = temp;         <span class="comment">//移动当前指针，更新当前节点的地址</span></span><br><span class="line">        &#125;</span><br><span class="line">        head = cur;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="92-反转链表-II"><a href="#92-反转链表-II" class="headerlink" title="92. 反转链表 II"></a><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">92. 反转链表 II</a></h3><p>给你单链表的头指针 head 和两个整数 left 和 right ，其中 left &lt;= right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 。</p><blockquote><p>思路：</p><p>1、由于是反转链表子区间，所以必须要记录该区间的<strong>前驱节点</strong>和<strong>后继节点</strong></p><p>2、链表子区间从链表中移除，就变成了反转整个子区间链表问题。所以还要记录<strong>left</strong>和<strong>righ</strong>节点</p><p>3、最后用前驱节点指向left节点，right节点指向后继节点</p></blockquote><img src="/blog/%E7%AE%97%E6%B3%95/image-20220506160317656.png" class="" title="image-20220506160317656"><img src="/blog/%E7%AE%97%E6%B3%95/image-20220506161151458.png" class="" title="image-20220506161151458"><img src="/blog/%E7%AE%97%E6%B3%95/image-20220506161202698.png" class="" title="image-20220506161202698"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span><span class="comment">//定义链表节点的结构体</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left == right)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、头节点可能改变，添加虚拟头节点</span></span><br><span class="line">        ListNode* dummyNode = <span class="keyword">new</span> ListNode(<span class="number">0</span>);        </span><br><span class="line">        dummyNode-&gt;next = head;</span><br><span class="line">        <span class="keyword">auto</span> pre = dummyNode;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2、找到left的前驱节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; left - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            pre = pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> leftNode = pre-&gt;next;<span class="comment">//得到left节点</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3、找到right的后继节点</span></span><br><span class="line">        <span class="keyword">auto</span> rightNode = pre;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; right - left + <span class="number">1</span>;i++)&#123;</span><br><span class="line">            rightNode = rightNode-&gt;next;<span class="comment">//得到了right节点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> cur = rightNode-&gt;next;<span class="comment">//得到right的后继节点</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4、切断需要反转的链表</span></span><br><span class="line">        pre-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        rightNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5、同206题，反转链表的子区间</span></span><br><span class="line">        ListNode* h = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* leftPtr = leftNode;</span><br><span class="line">        <span class="keyword">while</span>(leftPtr != <span class="literal">NULL</span> )&#123;          </span><br><span class="line">            <span class="keyword">auto</span> temp = leftPtr-&gt;next;</span><br><span class="line">           leftPtr-&gt;next = h;</span><br><span class="line">            h = leftPtr;</span><br><span class="line">            leftPtr = temp;           </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//6、连接已经完成反转的链表子区间</span></span><br><span class="line">        pre-&gt;next = rightNode;</span><br><span class="line">        leftNode-&gt;next = cur;                </span><br><span class="line">        <span class="keyword">return</span> dummyNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="25-K-个一组翻转链表"><a href="#25-K-个一组翻转链表" class="headerlink" title="25. K 个一组翻转链表"></a><a href="https://leetcode.cn/problems/reverse-nodes-in-k-group/">25. K 个一组翻转链表</a></h3><p>给你链表的头节点 <code>head</code> ，每 <code>k</code> 个节点一组进行翻转，请你返回修改后的链表。</p><img src="/blog/%E7%AE%97%E6%B3%95/image-20220608151244183.png" class="" title="image-20220608151244183"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head &#x3D; [1,2,3,4,5], k &#x3D; 2</span><br><span class="line">输出：[2,1,4,3,5]</span><br></pre></td></tr></table></figure><blockquote><p>方法：递归</p><p>思路：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *int val;</span></span><br><span class="line"><span class="comment"> *struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseKGroup</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="comment">//1、设置尾结点,将头结点和尾结点当作一组</span></span><br><span class="line">        ListNode* tail = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            <span class="comment">//如果不足k时，到达了链表尾，则直接返回，不进行翻转</span></span><br><span class="line">            <span class="keyword">if</span>(tail == <span class="literal">NULL</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> head;</span><br><span class="line">            &#125;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2、设置反转所需的当前结点和上一个结点</span></span><br><span class="line">        ListNode* per = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(cur != tail)&#123;</span><br><span class="line">            ListNode* temp  = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3、反转后head变为了尾结点，用来连接下一组</span></span><br><span class="line">        head-&gt;next = reverseKGroup(tail,k);</span><br><span class="line">        <span class="keyword">return</span> pre;<span class="comment">//全部反转完毕后，pre就是头结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21. 合并两个有序链表"></a><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">21. 合并两个有序链表</a></h3><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><blockquote><p>思路：</p><p>1、需要添加一个虚拟头节点，用来确定合并后升序链表的头节点</p><p>2、在两个链表都不为空的情况下，不断比较list1链表和list2链表当中的最小元素，然后通过cur指针将两个链表连接起来</p><p>3、最后当有一个链表为空时，就可以直接连接到另外一个链表</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span><span class="comment">//定义链表节点的结构体</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* list1, ListNode* list2)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//1、虚拟头节点</span></span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode* cur = dummyHead;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(list1 &amp;&amp; list2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(list1-&gt;val &lt; list2-&gt;val)&#123;</span><br><span class="line">                cur-&gt;next = list1;</span><br><span class="line">                list1 = list1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cur-&gt;next = list2;</span><br><span class="line">                list2 = list2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//有一个链表全部合并后将会退出循环，这时就可以将另一个链表直接连到后面</span></span><br><span class="line">        cur-&gt;next = list1 == <span class="literal">nullptr</span> ? list2 : list1;   <span class="comment">//如果list1链表为空，那就直接连接到list2链表，反之则连接到list1</span></span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="876-链表的中间结点"><a href="#876-链表的中间结点" class="headerlink" title="876. 链表的中间结点"></a><a href="https://leetcode.cn/problems/middle-of-the-linked-list/">876. 链表的中间结点</a></h3><p>给定一个头结点为 <code>head</code> 的非空单链表，返回链表的中间结点。</p><p>如果有两个中间结点，则返回第二个中间结点。</p><blockquote><p>思路：通过快指针fast 和慢指针slow一起遍历链表</p><p>1、slow一次走一步，fast一次走两步</p><p>2、当fast到达链表末尾时，slow必然位于中间</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="86-分隔链表"><a href="#86-分隔链表" class="headerlink" title="86. 分隔链表"></a><a href="https://leetcode-cn.com/problems/partition-list/">86. 分隔链表</a></h3><p>给你一个链表的头节点 head 和一个特定值 x ，请你对链表进行分隔，使得所有 <strong>小于</strong> x 的节点都出现在 <strong>大于或等于</strong> x 的节点之前。</p><p>你应当 保留 两个分区中每个节点的初始相对位置。</p><blockquote><p>思路1：找到第一个大于等于x的节点 往它前面按顺序插入后面碰到的小于x的节点</p><p>1、利用虚拟头结点确定头节点的位置</p><p>2、利用指向虚拟头结点的链表指针进行移动</p><p>3、将合适的”边界”节点设置为哨兵</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x),next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">partition</span><span class="params">(ListNode* head, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、设置虚拟头节点</span></span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode* h = dummyHead;</span><br><span class="line">        dummyHead-&gt;next = head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、找到第一个大于或等于x的节点，特定节点之后所有的节点都会插入到前面</span></span><br><span class="line">        <span class="keyword">while</span>(h-&gt;next &amp;&amp; h-&gt;next-&gt;val &lt; x)&#123;</span><br><span class="line">            h = h-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3、哨兵p是插入节点的前驱节点，会随着节点的插入而改变。q是插入节点的后继节点</span></span><br><span class="line">        <span class="keyword">auto</span> p = h;</span><br><span class="line">        <span class="keyword">auto</span> q = h-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、链表指针h移动,将小于x的节点插入到哨兵p，q之间</span></span><br><span class="line">        <span class="keyword">while</span>(h-&gt;next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(h-&gt;next-&gt;val &lt; x)&#123;</span><br><span class="line">                <span class="keyword">auto</span> temp = h-&gt;next-&gt;next;<span class="comment">//插入之前要先记录后面节点的地址</span></span><br><span class="line">                p-&gt;next = h-&gt;next;<span class="comment">//哨兵p指向该节点</span></span><br><span class="line">                h-&gt;next-&gt;next = q; <span class="comment">//该节点指向哨兵q。这两步就完成了节点的插入</span></span><br><span class="line">                p = p-&gt;next;<span class="comment">//移动哨兵p，方便插入新节点</span></span><br><span class="line">                h-&gt;next = temp;<span class="comment">//将链表连接到下一个节点</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                h = h-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>思路二：以特定值x为分界，通过两个虚拟节点，依次将小于x的节点重新连成一个链表l1，又将大于或等于x的节点连成另外一个链表l2。最后链表l1 连接到链表l2即可</p><p>1、分别创建虚拟节点dummyHead1、dummyHead2和指向他们的指针dh1、dh2</p><p>2、创建指向链表头节点的移动指针h。</p><p>3、移动指针h遍历链表，将小于x 的结点用dh1连接成新链表。将大于或等于x 的结点用dh2连接成另一条新链表。h遍历完链表后，就将它以x为分界一分为二。</p><p>4、最后再将两条排序好的链表合二为一，返回dummyHead1指向的节点即可</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">partition</span><span class="params">(ListNode* head, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、虚拟节点</span></span><br><span class="line">        ListNode* dummyHead1 = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode* dh1 = dummyHead1;</span><br><span class="line">        </span><br><span class="line">        ListNode* dummyHead2 = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode* dh2 = dummyHead2;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//2、移动指针</span></span><br><span class="line">        <span class="keyword">auto</span> h = head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、移动指针遍历链表</span></span><br><span class="line">        <span class="keyword">while</span>(h)&#123;</span><br><span class="line">            <span class="keyword">if</span>(h-&gt;val &lt; x)&#123;</span><br><span class="line">                dh1-&gt;next = h;</span><br><span class="line">                dh1 = dh1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                dh2-&gt;next = h;</span><br><span class="line">                dh2 = dh2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            h = h-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//4、合并链表</span></span><br><span class="line">        dh1-&gt;next = dummyHead2-&gt;next; <span class="comment">//让dh1链表的尾节点指向dh2链表的头节点</span></span><br><span class="line">        dh2-&gt;next = <span class="literal">NULL</span>;<span class="comment">//dh2链表的尾节点置空，断开与原链表的连接</span></span><br><span class="line">        <span class="keyword">return</span> dummyHead1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li><p>方法1效率低，占用内存低</p></li><li><p>方法2效率高，占用内存高</p></li></ul><h3 id="148-排序链表"><a href="#148-排序链表" class="headerlink" title="148. 排序链表"></a><a href="https://leetcode.cn/problems/sort-list/">148. 排序链表</a></h3><p>在 <code>O(n log n)</code> 时间复杂度和常数级空间复杂度下，对链表进行排序。请将其按 <strong>升序</strong> 排列并返回 <strong>排序后的链表</strong></p><blockquote><p>思路：时间复杂度是 O(n log n) 的排序算法包括<strong>归并排序</strong>、<strong>堆排序</strong>和<strong>快速排序</strong>（快速排序的最差时间复杂度是 O(n^2)，其中最适合链表的排序算法是<strong>归并排序</strong></p><p>1、通过快慢指针，找到链表的中点，以中点为界，将链表拆分成两个子链表</p><p>2、对两个子链表分别排序</p><p>3、将排完序后的子链表合并</p></blockquote><h3 id="143-重排链表"><a href="#143-重排链表" class="headerlink" title="143. 重排链表"></a><a href="https://leetcode.cn/problems/reorder-list/">143. 重排链表</a></h3><p>给定一个单链表 L 的头节点 head ，单链表 L 表示为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L0 → L1 → … → Ln - 1 → Ln</span><br></pre></td></tr></table></figure><p>请将其重新排列后变为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …</span><br></pre></td></tr></table></figure><blockquote><p>思路：目标链表是原链表的左边和反转后的右边串起来的结果</p><p>找中点+反转后半部分+合并前后两部分</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode* head)</span> </span>&#123;       </span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* mid = middleNode(head);<span class="comment">//找中点</span></span><br><span class="line">        </span><br><span class="line">        ListNode* l1 = head;        <span class="comment">//链表1</span></span><br><span class="line">        ListNode* l2 = mid-&gt;next;   <span class="comment">//链表2</span></span><br><span class="line">        mid-&gt;next = <span class="literal">NULL</span>;   <span class="comment">//断开中点</span></span><br><span class="line">        </span><br><span class="line">        l2 = reverseList(l2);   <span class="comment">//反转l2链表，并更新头结点</span></span><br><span class="line"></span><br><span class="line">        mergeList(l1,l2);   <span class="comment">//合并l1和反转后的l2</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1、快慢指针找中点</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast-&gt;next !=<span class="literal">NULL</span> &amp;&amp; fast-&gt;next-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;               </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、反转l2链表</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">        ListNode* per = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            ListNode* temp = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = per;</span><br><span class="line">            per = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> per; <span class="comment">//返回当前链表头结点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、合并链表</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mergeList</span><span class="params">(ListNode* l1, ListNode* l2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="literal">NULL</span> &amp;&amp; l2 != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="comment">//记录原链表l1下个地址</span></span><br><span class="line">            ListNode* l1_temp = l1-&gt;next;</span><br><span class="line">            <span class="comment">//记录原链表l2下个地址         </span></span><br><span class="line">            ListNode* l2_tmep = l2-&gt;next;</span><br><span class="line"></span><br><span class="line">            l1-&gt;next = l2;</span><br><span class="line">            l1 = l1_temp;</span><br><span class="line"></span><br><span class="line">            l2-&gt;next = l1;</span><br><span class="line">            l2 = l2_tmep;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a><a href="https://leetcode.cn/problems/linked-list-cycle/">141. 环形链表</a></h3><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p><blockquote><p>思路：通过快慢指针的方法来判断，若链表中没有环，则快指针一定在慢指针前面。若有环，则它们一定会在某一时刻相遇</p><p>细节：这里的慢指针要在head，而快指针要在head-&gt;next</p><p>若快慢指针都在head，则一开始就相遇了，会直接退出while循环</p><p>1、先判断链表为空的情况</p><p>2、设置快慢指针</p><p>3、当快慢指针不相等，如果快指针提前为空了，说了链表已经“跑完”，则不为环形链表。否则将继续“跑下去”，直到相遇为止</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//若链表为空，或只有一个结点，则不可能有环</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* fast = head-&gt;next;<span class="comment">//快指针</span></span><br><span class="line">        ListNode* slow = head;<span class="comment">//慢指针</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(slow != fast)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast == <span class="literal">NULL</span> || fast-&gt;next == <span class="literal">NULL</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="BM7-链表中环的入口结点"><a href="#BM7-链表中环的入口结点" class="headerlink" title="BM7 链表中环的入口结点"></a><a href="https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4?tpId=295&amp;tqId=23449&amp;ru=/exam/oj&amp;qru=/ta/format-top101/question-ranking&amp;sourceUrl=%2Fexam%2Foj">BM7 链表中环的入口结点</a></h3><p>给一个长度为n链表，若其中包含环，请找出该链表的环的入口结点，否则，返回null。</p><blockquote><p>方法：快慢指针</p><p>思路：</p><p>1、先判断链表是否为空</p><p>2、判断链表有没有环</p><p>3、用慢指针接收，没有环，则直接返回空。若有环，则记录慢指针的位置</p><p>4、将快指针回到头结点，让快慢指针同时移动一个结点，直到相遇时就能找到入口</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//判断有没有环，返回相遇的地方</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123; </span><br><span class="line">        <span class="comment">//先判断链表为空的情况</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">//快慢双指针</span></span><br><span class="line">        ListNode* fast = head; </span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        <span class="comment">//如果没环快指针会先到链表尾</span></span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>)&#123; </span><br><span class="line">            <span class="comment">//快指针移动两步</span></span><br><span class="line">            fast = fast-&gt;next-&gt;next; </span><br><span class="line">            <span class="comment">//慢指针移动一步</span></span><br><span class="line">            slow = slow-&gt;next; </span><br><span class="line">            <span class="comment">//相遇则有环</span></span><br><span class="line">            <span class="keyword">if</span>(fast == slow) </span><br><span class="line">                <span class="comment">//返回相遇的地方</span></span><br><span class="line">                <span class="keyword">return</span> slow; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//到末尾则没有环</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">ListNode* <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">        ListNode* slow = hasCycle(pHead);</span><br><span class="line">        <span class="comment">//没有环</span></span><br><span class="line">        <span class="keyword">if</span>(slow == <span class="literal">NULL</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">//快指针回到表头</span></span><br><span class="line">        ListNode* fast = pHead; </span><br><span class="line">        <span class="comment">//再次相遇即是环入口</span></span><br><span class="line">        <span class="keyword">while</span>(fast != slow)&#123; </span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="剑指-Offer-22-链表中倒数第k个节点"><a href="#剑指-Offer-22-链表中倒数第k个节点" class="headerlink" title="剑指 Offer 22. 链表中倒数第k个节点"></a><a href="https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/">剑指 Offer 22. 链表中倒数第k个节点</a></h3><p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。</p><blockquote><p>思路：</p><p>1、先遍历出链表的总长度n</p><p>2、若链表长度n小于k，则返回空</p><p>3、通过n-k找到倒数第k个结点</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">FindKthToTail</span><span class="params">(ListNode* pHead, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、算出链表n的长度</span></span><br><span class="line">        ListNode* tail = pHead;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(tail != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(n &lt; k)&#123;    <span class="comment">//若链表长度小于倒数第k个结点，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2、通过n-k找到倒数第k个结点的</span></span><br><span class="line">        ListNode* cur = pHead;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - k; i++)&#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="BM9-删除链表的倒数第n个节点"><a href="#BM9-删除链表的倒数第n个节点" class="headerlink" title="BM9 删除链表的倒数第n个节点"></a>BM9 删除链表的倒数第n个节点</h3><p>给定一个链表，删除链表的倒数第 n 个节点并返回链表的头指针</p><blockquote><p>思路：</p><p>1、要考虑可能会删除头节点，所以引入虚拟节点</p><p>2、遍历链表，求出链表的长度len</p><p>3、以len - n为条件开始遍历，就能定位到倒数第n个节点的前一个结点</p><p>4、最后用倒数第n个结点的前一个结点指向后一个结点，然后返回虚拟头节点的下一个结点</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1、可能会删除头结点，所以引入虚拟结点</span></span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummyHead-&gt;next = head;</span><br><span class="line">        ListNode* tail = dummyHead;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2、遍历链表的长度</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;<span class="comment">//</span></span><br><span class="line">        <span class="keyword">while</span>(tail != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            len++;</span><br><span class="line">            tail = tail-&gt;next;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3、移动到要删除结点的前一个结点</span></span><br><span class="line">        tail = dummyHead;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len - n; i++)&#123;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* temp = tail-&gt;next-&gt;next;    <span class="comment">//记录要删除结点的后一个结点</span></span><br><span class="line">        tail-&gt;next = temp;</span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142. 环形链表 II</a></h3><p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em></p><h3 id="234-回文链表"><a href="#234-回文链表" class="headerlink" title="234. 回文链表"></a><a href="https://leetcode.cn/problems/palindrome-linked-list/">234. 回文链表</a></h3><p>给你一个单链表的头节点 <code>head</code> ，请你判断该链表是否为回文链表。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><blockquote><p>思路：快慢指针。将链表后半部分反转，然后依次和前半部分比较</p><p>1、找到链表的中点</p><p>2、反转链表后半部分</p><p>3、判断是否回文</p><p>4、返回结果</p><p>这里需要注意</p><p>当原链表为偶数，那么断开后的链表长度一样，则可能是回文链表。</p><p>当原链表为奇数时，那么后半部分链表必然比前半部分多一个结点，则肯定不是回文链表</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1、找中点</span></span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast-&gt;next != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、反转后半部分链表</span></span><br><span class="line">        ListNode* cur = slow-&gt;next;</span><br><span class="line">        ListNode* per = <span class="literal">NULL</span>;       </span><br><span class="line">        slow-&gt;next = <span class="literal">NULL</span>;    <span class="comment">//断开中点</span></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            ListNode* temp = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = per;</span><br><span class="line">            per = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、比较两个链表，判断是否回文        </span></span><br><span class="line">        ListNode* l1 = head;</span><br><span class="line">        ListNode* l2 = per;</span><br><span class="line">        <span class="keyword">bool</span> result = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//l2的长度一定大于或等于l1</span></span><br><span class="line">        <span class="keyword">while</span>(result &amp;&amp; l2 != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1-&gt;val != l2-&gt;val)&#123;</span><br><span class="line">                result = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            l1 = l1-&gt;next;</span><br><span class="line">            l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><h3 id="155-最小栈"><a href="#155-最小栈" class="headerlink" title="155. 最小栈"></a><a href="https://leetcode.cn/problems/min-stack/">155. 最小栈</a></h3><p>设计一个支持 <code>push</code> ，<code>pop</code> ，<code>top</code> 操作，并能在常数时间内检索到最小元素的栈。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> &#123;</span></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; x_stack;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; min_stack;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MinStack() &#123;</span><br><span class="line">        min_stack.push(INT_MAX);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        x_stack.push(x);</span><br><span class="line">        min_stack.push(min(min_stack.top(), x));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        x_stack.pop();</span><br><span class="line">        min_stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x_stack.top();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> min_stack.top();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h1><h2 id="常见二进制操作"><a href="#常见二进制操作" class="headerlink" title="常见二进制操作"></a>常见二进制操作</h2><p>使用<strong>位运算符</strong>来对二进制进行操作</p><ol><li>任何数和 0 做异或运算，结果仍然是原来的数，即 a^0 = a</li><li>任何数和其自身做异或运算，结果是 0，即 a^a = 0</li><li>异或运算满足交换律和结合律，即 a^b^a = b^a^a = b^(a^a) = b^0 = b</li></ol><h3 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136. 只出现一次的数字"></a><a href="https://leetcode.cn/problems/single-number/">136. 只出现一次的数字</a></h3><p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp_操作符重载_侯捷</title>
      <link href="blog/Cpp-%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD-%E4%BE%AF%E6%8D%B7/"/>
      <url>blog/Cpp-%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD-%E4%BE%AF%E6%8D%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="课程回顾"><a href="#课程回顾" class="headerlink" title="课程回顾"></a>课程回顾</h2><p>在编写C++程序中，尽量要遵循以下规范</p><ul><li>对于构造函数，应使用<strong>初始化列表</strong>的形式进行初始化。该方法<strong>效率更高，速度更快</strong></li><li>数据都应该以Private的形式进行存储</li><li>若成员函数的作用，仅用于返回作用，那么<strong>函数名后面加上const</strong></li><li>当<strong>返回值不是局部变量</strong>时，可以用<strong>引用</strong>来接收函数的返回值</li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">complex</span> (<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>): re (r), im (i) &#123; &#125;<span class="comment">//用初始化列表构造函数</span></span><br><span class="line"><span class="built_in">complex</span>&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="built_in">complex</span>&amp;);</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">real</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> re; &#125;<span class="comment">//不希望成员函数的返回值修改</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">imag</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> im; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> re, im;</span><br><span class="line"><span class="keyword">friend</span> <span class="built_in">complex</span>&amp; __doapl (<span class="built_in">complex</span>*, <span class="keyword">const</span> <span class="built_in">complex</span>&amp;); <span class="comment">//友元函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="值类型和引用类型的使用场景"><a href="#值类型和引用类型的使用场景" class="headerlink" title="值类型和引用类型的使用场景"></a><strong>值类型和引用类型的使用场景</strong></h3><ul><li>在<strong>传参</strong>时，若仅为了追求<strong>效率</strong>，我们都尽可能的以<strong>引用的方式传递</strong>。</li></ul><blockquote><p>并且我们还需要明确规范一点</p><p>若该参数我们不希望修改，即该参数在函数中仅用于赋值，那么我们就应该在引用前加上const。</p><p>若该参数我们希望修改，即通过函数修改参数内容，那么就不用在引用前加const</p><p>好处：这样就能通过const，初步判断该引用在进行传参时，是否会发生改变</p></blockquote><ul><li>引用是可以作为<strong>函数的返回值</strong></li></ul><blockquote><p>但是返回的对象不能是局部变量，因为局部变量在出函数之后就会被释放，这样对其引用就会报错</p></blockquote><hr><h2 id="操作符重载与临时对象"><a href="#操作符重载与临时对象" class="headerlink" title="操作符重载与临时对象"></a>操作符重载与临时对象</h2><p>编译器在遇到操作符后</p><p>会判断左边的变量是否对该操作符进行了定义</p><p>若定义，则该行式子就会被编译成定义过的函数</p><h3 id="成员函数中的运算符重载"><a href="#成员函数中的运算符重载" class="headerlink" title="成员函数中的运算符重载"></a>成员函数中的运算符重载</h3><p>成员函数中有this指针，所以运算符重载的<strong>返回值类型可以为引用</strong></p><p><strong>示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="built_in">complex</span>&amp;<span class="comment">//运算符重载函数返回值用引用类型，速度快，效率高</span></span><br><span class="line">__doapl(<span class="built_in">complex</span>* ths, <span class="keyword">const</span> <span class="built_in">complex</span>&amp; r)</span><br><span class="line">&#123;</span><br><span class="line">ths-&gt;re += r.re;<span class="comment">//c2的实部</span></span><br><span class="line">ths-&gt;im += r.im;<span class="comment">//c2的虚部</span></span><br><span class="line"><span class="keyword">return</span> *ths;<span class="comment">//返回c2指针所指的对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//c2在操作符左边，传入函数的this指针中，不显示</span></span><br><span class="line"><span class="comment">//c1在操作符右边，传入函数的 const complex&amp; r 参数中</span></span><br><span class="line"><span class="keyword">inline</span> <span class="built_in">complex</span>&amp;</span><br><span class="line"><span class="built_in">complex</span>::<span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="built_in">complex</span>&amp; r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> __doapl (<span class="keyword">this</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="built_in">complex</span> <span class="title">c1</span><span class="params">(<span class="number">2</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">complex</span> <span class="title">c2</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">c2 += c1;<span class="comment">//+= 被定义，所以会编译complex::operator += ()函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>运算符重载函数的返回值类型，最好使用引用类型，速度快，效率高</li></ul><blockquote><p>若出现连续赋值的情况，则运算符重载的返回值类型不能为void</p></blockquote><h3 id="非成员函数中的运算符重载"><a href="#非成员函数中的运算符重载" class="headerlink" title="非成员函数中的运算符重载"></a>非成员函数中的运算符重载</h3><p>非成员函数中没有this指针，所得的数据只能放在typename()所创建的<strong>临时变量</strong>中</p><p>当函数return后，该临时变量就会被销毁，所以该运算符重载函数的返回值类型不能为引用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="built_in">complex</span></span><br><span class="line"><span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="built_in">complex</span>&amp; x, <span class="keyword">const</span> <span class="built_in">complex</span>&amp; y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">complex</span> (real (x) + real (y), imag (x) + imag (y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="built_in">complex</span></span><br><span class="line"><span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="built_in">complex</span>&amp; x, <span class="keyword">double</span> y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">complex</span> (real (x) + y, imag (x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="built_in">complex</span></span><br><span class="line"><span class="keyword">operator</span> + (<span class="keyword">double</span> x, <span class="keyword">const</span> <span class="built_in">complex</span>&amp; y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">complex</span> (x + real (y), imag (y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++面向对象_侯捷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp_Primer要点总结</title>
      <link href="blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[TOC]</p><h1 id="第1章：开始"><a href="#第1章：开始" class="headerlink" title="第1章：开始"></a>第1章：开始</h1><h3 id="1-1-编写一个简单的C-程序"><a href="#1-1-编写一个简单的C-程序" class="headerlink" title="1.1 编写一个简单的C++程序"></a>1.1 编写一个简单的C++程序</h3><ul><li>每个C++程序必须包含<strong>一个</strong>或<strong>多个</strong>函数，其中一个必须命名为<strong>main</strong>，操作系统通过调用main来运行C++程序。</li><li>一个函数定义包括四个部分，<strong>返回值类型</strong>，<strong>函数名</strong>，<strong>形参列表</strong>，以及<strong>函数体</strong></li><li>main函数的返回类型必须是<strong>int</strong>。</li><li>main的返回值通常被用来指示状态，<strong>返回值0表示成功</strong>，非0的含义由系统定义，通常用来指出错误类型</li></ul><p><strong>程序源文件命名约定</strong></p><ul><li>不同编译器使用不同的后缀命名约定</li></ul><hr><h3 id="1-2-初识输入输出"><a href="#1-2-初识输入输出" class="headerlink" title="1.2 初识输入输出"></a>1.2 初识输入输出</h3><ul><li><p>C++并未定义任何输入输出语句，而是包含了一个全面的<strong>标准库</strong>来提供IO机制</p></li><li><p>iostream库包含了两个基础类型<strong>istream</strong>和<strong>ostream</strong>，分别表示<strong>输入流</strong>和<strong>输出流</strong></p></li></ul><p><strong>标准输入输出对象</strong></p><ul><li><strong>cin</strong>，将程序从窗口读入</li><li><strong>cout</strong>，将数据写入窗口</li><li><strong>cerr</strong>，在窗口输出警告和错误信息</li><li><strong>clog</strong>，在窗口输出程序运行日志</li></ul><p><strong>一个使用IO库的程序</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Enter two numbers:&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> v1 = <span class="number">0</span>, v2 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; v1 &gt;&gt; v2;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;This sum of&quot;</span> &lt;&lt; v1 &lt;&lt; <span class="string">&quot;and&quot;</span> &lt;&lt; v2 &lt;&lt; <span class="string">&quot;is&quot;</span> &lt;&lt; v1 + v2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>iostream是一个头文件，使用标准库的程序都必须包含头文件</li></ul><p><strong>向流写入数据</strong></p><p><code>std::cout &lt;&lt; &quot;Enter two numbers:&quot; &lt;&lt; std::endl;</code></p><ul><li><p><strong>输出运算符</strong>(<strong>&lt;&lt;</strong>)左侧对象必须是<strong>ostream对象</strong>，它会将右侧的值<strong>写入</strong>左侧ostream中，并且计算结果为<strong>写入值的ostream对象</strong></p></li><li><p><strong>endl</strong>被称为<strong>操纵符</strong>，其效果是<strong>结束当前行</strong>，并将<strong>缓冲区中的内容刷到设备中</strong></p></li></ul><p><strong>使用标准库中的名字</strong></p><ul><li>标准库定义的<strong>所有名字</strong>都在命名空间中</li><li>命名空间可以<strong>避免库中相同名字导致的冲突</strong></li></ul><p><strong>从流读取数据</strong></p><p><code>std::cin &gt;&gt; v1 &gt;&gt; v2;</code></p><ul><li><strong>输入运算符</strong>(<strong>&gt;&gt;</strong>)通过左侧的istream对象，将读入的数据存入右侧的对象中</li></ul><hr><h1 id="第2章：变量和基本数据类型"><a href="#第2章：变量和基本数据类型" class="headerlink" title="第2章：变量和基本数据类型"></a>第2章：变量和基本数据类型</h1><h2 id="2-1-基本内置数据类型"><a href="#2-1-基本内置数据类型" class="headerlink" title="2.1 基本内置数据类型"></a>2.1 基本内置数据类型</h2><p>C++的内置数据类型包括了<strong>算数类型</strong>和<strong>空类型</strong></p><h3 id="2-1-1-算术类型"><a href="#2-1-1-算术类型" class="headerlink" title="2.1.1 算术类型"></a>2.1.1 算术类型</h3><p>算数数据有两类：</p><ul><li><strong>整形</strong>（这里面包括了字符型(char)和布尔类型(T or F)）</li><li>浮点型(单精度float，双精度double)</li></ul><p>其中char占一个字节，int占四个字节</p><p><strong>注意</strong>：当使用浮点数运算时一般用<strong>double</strong>，因为float通常精度不够，而两者实际的计算代价相差无几</p><h3 id="2-1-2-类型转换"><a href="#2-1-2-类型转换" class="headerlink" title="2.1.2 类型转换"></a>2.1.2 类型转换</h3><p> 当我们将两种不同的数据类型进行运算时，程序会自动的进行类型转换</p><p>这种类型转换被称为<strong>强制类型转换</strong></p><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/QQ%E6%88%AA%E5%9B%BE20220221212915.png" class="" title="QQ截图20220221212915"><h3 id="2-1-3-字面值常量"><a href="#2-1-3-字面值常量" class="headerlink" title="2.1.3 字面值常量"></a>2.1.3 字面值常量</h3><p>字面值常量的<strong>形式和值</strong>决定了它的数据类型，我们可以通过它一眼看出值的类型</p><p>比如：看到42就知道整形，4.2是浮点型</p><p><strong>字符和字符串字面值</strong></p><p>而<strong>字符</strong>型的字面值则是由<strong>单引号</strong>括起来，如  <strong>‘a’</strong></p><p><strong>字符串</strong>的字面值则是由<strong>双引号</strong>括起来，如 <strong>“abcd”</strong></p><p><strong>注意</strong>：</p><ul><li>字符串实际上是由<strong>常量字符构成的数组</strong></li><li>编译器会在字符串的<strong>结尾添加一个空字符</strong>(‘\0’)，因此字符串的<strong>实际长度要比所含字符多一个长度</strong></li></ul><p>如：(字符串)<strong>“A”</strong> ,实际上所占两个字符，分别为本身的字符 <strong>‘A’</strong>和编译器添加的 <strong>‘\0’</strong></p><p>而字符 <strong>‘A’</strong>,实际上所占就是本身一个字符 </p><p><strong>转义序列</strong></p><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/QQ%E6%88%AA%E5%9B%BE20220221214913.png" class="" title="QQ截图20220221214913"><h2 id="2-2-变量"><a href="#2-2-变量" class="headerlink" title="2.2 变量"></a>2.2 变量</h2><p>变量的本质是一个<strong>拥有名字</strong>，可以<strong>操作</strong>的<strong>存储空间</strong>。</p><blockquote><p>可以将它理解为大型商场里的一排排<strong>”储物柜“</strong>，变量<strong>存储空间的大小</strong>就相当于<strong>”储物柜“的大小</strong>，<strong>不同的数据类型的变量</strong>就相当于<strong>不同种类的”储物柜“</strong>。</p><p>而对象则更像是一种<strong>特殊的变量</strong>，因为对象的定义就是<strong>具有某种数据类型的内存空间</strong>。</p></blockquote><h3 id="2-2-1-变量定义"><a href="#2-2-1-变量定义" class="headerlink" title="2.2.1 变量定义"></a>2.2.1 变量定义</h3><p><strong>定义与声明的区别</strong></p><p>定义语法：<code>数据类型 变量名</code></p><p>声明语法：<code>extern 数据类型 变量名</code></p><p>在C++中定义与声明是有所<strong>区别</strong></p><ul><li><p><strong>定义</strong>变量时，系统会<strong>开辟一块存储空间</strong>，然后还有一串16进制的数字来表示空间地址，我们就通过<strong>变量名</strong>代替这串数字来访问这块空间。</p><blockquote><p>可以简单理解为 我们新开了一个<strong>”储物柜“</strong>，并有着与其对应编号的钥匙。而<strong>变量名</strong>就是这个<strong>带编号的钥匙</strong>，我们可以根据钥匙的编号，找到对应的储物柜，对其进行操作</p></blockquote></li><li><p><strong>声明</strong>变量时，系统并不会开辟新空间，而是告诉编译器，这个变量已经存在了，接下来可以直接使用</p></li></ul><blockquote><p>声明变量并不是新开一个”储物柜“，而是提醒编译器，在之前已经有一个一样的”储物柜“了</p></blockquote><p>声明的作用，为了实现多个文件中的代码共享，<strong>仅定义一次变量后</strong>，可以通过<strong>多次声明在不同的文件中使用</strong></p><p>所以，我们在<strong>声明</strong>变量的时候<strong>不会为其显示初始化</strong>，因为这样就变成了<strong>定义</strong>，而失去了<strong>声明</strong>原本的意义</p><p><strong>初始值</strong></p><p>当<strong>定义变量</strong>的时候<strong>获得一个特定值</strong>，它就被<strong>初始化</strong>了</p><ul><li>初始化的值不一定要求数值型，也<strong>可以是任意复杂的表达式</strong></li><li>如果我们<strong>不显式的给出初始值</strong>，<strong>内置的数据类型</strong>变量会根据<strong>定义的位置</strong>决定<ul><li>定义在<strong>函数外</strong>的变量都会被<strong>初始化为0</strong></li><li>定义在函数内则<strong>不初始化</strong></li></ul></li></ul><p>如：<code>double price=109.99,discount=price*0.16</code></p><p><strong>初始化和赋值的区别</strong></p><p>在C++中，初始化和赋值是两种不同的操作</p><p><code>int a=1; //定义变量的时候得到了一个初值1，这是初始化</code></p><p><code>int b;//根据位置，可能初始化，也可能不初始化</code></p><p><code>b=2;//擦去原有的值，用2代替，这就是赋值</code></p><ul><li>初始化是在<strong>创建变量时给其一个初始值</strong></li><li>赋值是把<strong>当前变量的值擦除</strong>，而用一个<strong>新值代替</strong></li></ul><blockquote><p>这里要注意的是，<strong>赋值并不是把一个“柜子”里的物品移动到另外一个“柜子”</strong>,而是单独拿一份一模一样的物品<strong>拷贝</strong>过去。</p></blockquote><h3 id="2-2-2-标识符"><a href="#2-2-2-标识符" class="headerlink" title="2.2.2 标识符"></a>2.2.2 标识符</h3><p>C++标识符由<strong>字母，数字</strong>以及<strong>下划线</strong>组成，其中必须以<strong>字母或下划线</strong>开头</p><p>不能使用关键字作为标识符</p><hr><h2 id="2-3-复合类型"><a href="#2-3-复合类型" class="headerlink" title="2.3 复合类型"></a>2.3 复合类型</h2><p>一条语句是由<strong>基本数据类型</strong>和<strong>一个或多个声明</strong>符组成</p><p>基于其他类型定义的类型，<strong>指针和引用</strong>就是复合类型。<strong>引用的本质是指针常量，占用4个字节的空间</strong></p><h3 id="2-3-1-引用"><a href="#2-3-1-引用" class="headerlink" title="2.3.1 引用"></a>2.3.1 引用</h3><p>引用是为变量起<strong>另一个名字</strong>。</p><p>当我们把<strong>变量</strong>当成一个<strong>”储物柜“</strong>，<strong>变量名</strong>就是<strong>”带编号的钥匙“</strong>，而定义引用就相当于给<strong>“储物柜”</strong>再设置一个<strong>备用钥匙</strong>。</p><blockquote><p>比如：“储物柜”原本的编号是01，现在我们再给“储物柜”贴上一个“one”的标签，然后制作一个编号为“one”的钥匙，这样就可以通过两个钥匙找到同一个储物柜了</p></blockquote><p><strong>语法</strong>：</p><p><code>int a=10;</code></p><p><code>int &amp;A=a;    //A是a的另一个名字</code></p><p><code>int &amp;A;    //错误，引用必须初始化</code></p><ul><li>为引用赋值，实际上是把值赋给了<strong>与引用绑定的对象</strong></li></ul><blockquote><p>这里的意思是，我们通过<strong>备用钥匙</strong>来操作”储物柜”的存取等功能，实际对象还是<strong>原本的”储物柜“</strong></p></blockquote><p><strong>定义：</strong></p><p><strong>大部分引用</strong>的<strong>数据类型</strong>要和所绑定的变量<strong>严格匹配</strong>，并且<strong>只能绑定在变量</strong>上，不能绑定字面量等。</p><p><strong>注意</strong>：</p><ul><li>当我们<strong>定义引用</strong>时，引用的初始值就与变量<strong>绑定</strong>在一起，就<strong>不能</strong>将引用<strong>重新绑定</strong>在其他变量上。</li></ul><blockquote><p>就是说，当我们给一个<strong>“储物柜”</strong>设置一个<strong>“备用钥匙”</strong>之后，该<strong>“备用钥匙”</strong>作用于当前<strong>“储物柜”</strong>使用</p></blockquote><ul><li><strong>引用定义时就必须为其初始化</strong></li></ul><blockquote><p>我们在配置备用钥匙的时候，必须要有原本的钥匙才行</p></blockquote><ul><li><strong>强调：引用并非变量，而是将已有的变量起另外一个名字</strong></li></ul><blockquote><p>引用只是备用钥匙，而不是柜子</p></blockquote><h3 id="2-3-2-指针"><a href="#2-3-2-指针" class="headerlink" title="2.3.2 指针"></a>2.3.2 指针</h3><p><strong>指针本身就是一个变量</strong>，存放的其他变量的<strong>地址</strong>，允许对指针<strong>赋值</strong>和<strong>拷贝</strong>，可以先后指向不同变量。</p><blockquote><p>所以指针本身也是一个小柜子。只不过内部只存放其他变量的地址，也就是“柜子”的“钥匙”</p></blockquote><p><strong>获取对象地址</strong></p><p>指针存放着某个变量的<strong>地址</strong>，使用<strong>取地址符</strong>（<strong>&amp;</strong>）获取地址。</p><p><strong>语法</strong>：</p><p><code>int a=10;</code></p><p><code>int *p;</code></p><p><code>int *p=&amp;a;</code></p><p>上述这段话的意思，可以将其理解为，<strong>“将a柜子的钥匙，放到p柜子里”</strong></p><p><strong>注意</strong>：</p><ul><li>大部分指针类型要和它指向的变量类型严格匹配</li></ul><p><strong>指针值</strong></p><p>指针的值(地址)应属于下列4种状态</p><ol><li>指向一个对象（放着柜子的钥匙）</li><li>指向紧邻对象所占空间的下一个位置(放着不知道哪的钥匙)</li><li>空指针(没钥匙)</li><li>无效指针，上述之外的情况</li></ol><p>注意：</p><ul><li>尽管2，3种形式的指针有效，但它们并没有指向任何具体对象，所以此类指针<strong>不能被访问</strong></li></ul><p><strong>利用指针访问对象</strong></p><p>如果指针指向了一个对象，则运行用<strong>解引用符</strong>（<strong>*</strong>）来访问该对象</p><p><code>int a=42;</code></p><p><code>int *p=&amp;a;</code></p><p><code>cout&lt;&lt;*p //输出 42</code></p><p><strong>注意</strong>：</p><p><strong>&amp;</strong>和<strong>*</strong>的多重含义</p><p><code>int i=10;</code></p><ul><li><p>如果<strong>&amp;</strong> 跟着类型名出现，是引用    <code>int &amp;r=i;</code></p></li><li><p>如果<strong>*</strong> 跟着类型名出现，是指针    <code>int *p;</code></p></li><li><p>如果<strong>&amp;</strong> 出现在表达式中，就是取地址符    <code>p=&amp;i;</code></p></li><li><p>如果<strong>*</strong> 出现在表达式中，就是解引用符    <code>*p=i;</code></p></li></ul><p>解引用仅适用于确实指向某个对象的<strong>有效指针</strong></p><p><strong>空指针</strong></p><p>空指针不指向任何对象，在试图使用一个指针代码之前，先检查其是否为空</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p1=<span class="literal">nullptr</span>;<span class="comment">//等价于int *p1=0;</span></span><br><span class="line"><span class="keyword">int</span> *p2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *p3=<span class="literal">NULL</span>;<span class="comment">//等价于int *p1=0;</span></span><br></pre></td></tr></table></figure><p>注意：<strong>初始化所有指针</strong></p><p>如果使用了未初始化的指针，则它当前所占内存空间将被看作一个地址值，去访问一个本不存在的对象</p><p><strong>赋值和指针</strong></p><ul><li><p><strong>赋值永远改变的是等号左侧的对象</strong></p></li><li><p><strong>指针里面只能存放地址</strong></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="comment">//int *p=a;//错误 指针里面只能存放地址</span></span><br><span class="line"><span class="keyword">int</span> *p=&amp;a;<span class="comment">//正确，指针p的初始值改变，现在指向a的地址</span></span><br><span class="line">*p=<span class="number">20</span>;<span class="comment">//正确, 指针p解引用，实际改变a的值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-3-理解复合类型的声明"><a href="#2-3-3-理解复合类型的声明" class="headerlink" title="2.3.3 理解复合类型的声明"></a>2.3.3 理解复合类型的声明</h3><p><strong>指向指针的指针</strong></p><p>通过<strong>*</strong>的个数，可以区分指针的级别，<strong>**</strong>表示<strong>指向指针的指针</strong></p><blockquote><p>就是将<strong>“钥匙”</strong>到第一个指针内，然后将第一个指针的<strong>“钥匙”</strong>放到第二个指针内</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> *pi=&amp;a;<span class="comment">//将a的钥匙放入p内</span></span><br><span class="line"><span class="keyword">int</span> **ppi=&amp;pi<span class="comment">//将pi的钥匙放入ppi内</span></span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>面对复杂的语句，从<strong>右到左</strong>阅读是最简单的方法，离<strong>变量名最近的声明符对变量的类型影响最大</strong></p><hr><h2 id="2-4-const限定符"><a href="#2-4-const限定符" class="headerlink" title="2.4 const限定符"></a>2.4 const限定符</h2><p>使用关键字<strong>const</strong>对变量的类型修饰后，该变量的<strong>值不能被改变</strong>，所以<strong>const对象必须初始化</strong></p><p><strong>初始化和const</strong></p><p>注意：</p><p>上面指的值不能被改变，指的是const对象<strong>不能被赋值</strong>，它还是<strong>可以初始化</strong>和<strong>访问</strong>的。</p><blockquote><p>实际上，常量是在内存四区中的代码区，我们可以将其简单的理解为，被const修饰之后，该对象就会被到另一片区域展览，我们只有查看的权力，而不能做出修改</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">42</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci=i;<span class="comment">//正确；const初始化,将i的值拷贝给了ci(将物品i放入ci柜子后，再拿去展览)</span></span><br><span class="line"><span class="keyword">int</span> j=ci<span class="comment">//正确；将ci的值拷贝给j，并没有对ci的值进行操作(查看ci柜子的物品，将它照搬一份到j柜子，并没有对ci柜子进行操作)</span></span><br><span class="line">ci=<span class="number">10</span>；<span class="comment">//错误；因为给ci赋值的过程中，要先把原来的值擦除，但因为加了const限定，不能修改</span></span><br></pre></td></tr></table></figure><h3 id="2-4-1-const的引用"><a href="#2-4-1-const的引用" class="headerlink" title="2.4.1 const的引用"></a>2.4.1 const的引用</h3><p>可以把<strong>引用绑定到const对象</strong>上，我们称之为<strong>对常量的引用</strong></p><p>与普通引用不同的是，const引用绑定对象后就<strong>不能被修改</strong></p><blockquote><p>常量引用的本质是系统自动开辟一个<strong>临时变量</strong>，然后将临时变量<strong>初始化</strong>，最后再限定变量的<strong>值不能被修改</strong>。而常量名字其实就是临时变量的引用</p><p>我们可以常量引用理解为，新开了一个<strong>临时柜子</strong>，然后将其他柜子的物品<strong>拷贝</strong>过来，或者干脆自己放一些物品让它进行<strong>初始化</strong>操作，再给这个柜子设置一个<strong>备用钥匙</strong>，最后再给备用钥匙上贴上<strong>“标签”</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">42</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r1=i;<span class="comment">//正确,拷贝其他柜子物品放到临时柜子中做初始化</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r2=<span class="number">42</span>;<span class="comment">//正确，自己放置物品做初始化</span></span><br><span class="line"><span class="keyword">int</span> &amp;r3=<span class="number">42</span>;<span class="comment">//错误，非常量引用只是“钥匙”,不能放物品</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//系统默认执行操作</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> temp=i;<span class="comment">//系统自动开一个临时的柜子，并用复制其他柜子物品初始化，给&quot;钥匙&quot;temp贴上标签</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r1=temp;<span class="comment">//给柜子设置一个备用钥匙，并给r1钥匙贴上标签</span></span><br></pre></td></tr></table></figure><p>所以由上我们可以知道：</p><ul><li><p>初始化<strong>常量引用</strong>时运行用<strong>任意表达式</strong>作为初始值</p></li><li><p><strong>常量引用</strong>可以引用<strong>非常量的对象</strong></p></li></ul><h3 id="2-4-2-指针和const"><a href="#2-4-2-指针和const" class="headerlink" title="2.4.2 指针和const"></a>2.4.2 指针和const</h3><p><strong>指向常量的指针</strong>，就被称为<strong>常量指针</strong>，书中也叫<strong>底层const</strong>。<strong>常量指针</strong>不能用于改变<strong>其对象</strong>的值。</p><p>想要存放<strong>常量对象的地址</strong>，只能使用<strong>指向常量的指针</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> A=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* p=&amp;A;</span><br><span class="line">*p=<span class="number">20</span>;<span class="comment">//错误，指针柜中的钥匙A被const加以限制，不能对柜子A的数据进行修改</span></span><br><span class="line"> A=<span class="number">20</span>;<span class="comment">//正确，</span></span><br></pre></td></tr></table></figure><blockquote><p>因为常量指针就是为了指向常量所定义的，所以不管该对象是否为常量，都不能通过常量指针去改变对象</p></blockquote><p>注意：</p><ul><li>要想存放<strong>常量对象</strong>的地址，只能使用<strong>常量指针</strong></li><li>指针的类型必须与其所指对象保持一致，但允许<strong>指针常量指向非常量对象</strong>。</li><li><strong>指针常量</strong>仅仅是<strong>不能通过指针改变对象的值</strong>，但用<strong>其他方式改变对象的值</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> *p1=&amp;a;<span class="comment">//错误，非常量指针没有const加以限制，就导致可以对常量进行修改</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p1=&amp;a;<span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p2=&amp;b;<span class="comment">//正确，因为const限制的是指针柜中的钥匙a,而不是钥匙p</span></span><br><span class="line"></span><br><span class="line">*p2=<span class="number">30</span>;<span class="comment">//错误，因为const限制的是指针柜中的钥匙a，并没有限制原本的钥匙a</span></span><br><span class="line">b=<span class="number">20</span>;<span class="comment">//正确</span></span><br></pre></td></tr></table></figure><p><strong>指针常量</strong></p><p>当<strong>指针本身是常量</strong>时，就被称为<strong>指针常量</strong>。那么当前指针的<strong>值就不能改变</strong>，也就是指针<strong>指向的对象的地址不能变</strong>。</p><blockquote><p>也就是说，const这个警告“标签”,是贴在“指针柜”的钥匙上的</p></blockquote><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/%E6%8C%87%E9%92%88%E5%B8%B8%E9%87%8F.png" class="" title="指针常量"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> A=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> p=&amp;A;</span><br><span class="line">*p=<span class="number">20</span>;<span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> B=<span class="number">30</span>；</span><br><span class="line"> p=&amp;B;<span class="comment">//错误，指针柜所对应的钥匙被限制，不能修改指针贵的内容  </span></span><br></pre></td></tr></table></figure><p>总结：如何判断是常量指针，还是指针常量</p><p>从变量名开始，右往左读，判断const 和 * 的位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* p=&amp;a;<span class="comment">//const在前，*在后，就是常量指针</span></span><br><span class="line"><span class="keyword">int</span>* <span class="keyword">const</span> p=&amp;a;<span class="comment">//*在前 ，const在后，就是指针常量</span></span><br></pre></td></tr></table></figure><h2 id="2-5-处理类型"><a href="#2-5-处理类型" class="headerlink" title="2.5 处理类型"></a>2.5 处理类型</h2><h3 id="2-5-1-类型别名"><a href="#2-5-1-类型别名" class="headerlink" title="2.5.1 类型别名"></a>2.5.1 类型别名</h3><p>类型别名是一个名字，它是某种<strong>类型</strong>的同义词</p><p>语法：</p><p><code>typedef</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> wages;<span class="comment">//wages 是 double 的同义词</span></span><br><span class="line">wages a=<span class="number">1.0</span>;</span><br></pre></td></tr></table></figure><p>作用：</p><p>含有typedef的声明语句定义的 不是变量 而<strong>是类型别名</strong></p><p>也可以使用<strong>别名声明</strong>来实现同样的操作</p><p>语法：</p><p><code>using</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> a = <span class="keyword">int</span> ;</span><br><span class="line">a b = <span class="number">10</span>;<span class="comment">//正确，a是int的同义词 b是变量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-5-2-auto-类型说明符"><a href="#2-5-2-auto-类型说明符" class="headerlink" title="2.5.2 auto 类型说明符"></a>2.5.2 auto 类型说明符</h3><p>auto类型说明符，能让编译器通过初始值来<strong>推算变量的类型</strong>，所以auto定义的变量必须有初始值</p><p>因为一条声明语句中只能有<strong>一个基本数据类型</strong>，所以auto能在一条语句中声明<strong>多个变量</strong></p><p><strong>复合类型、常量和auto</strong></p><p>编译器会<strong>适当的改变</strong>auto类型的<strong>结果</strong> 使其更符合初始化</p><p>列如：</p><p>当引用被当作初始值时，真正参与初始化对象的是<strong>引用对象的值</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;r=i;</span><br><span class="line"><span class="keyword">auto</span> b=r;<span class="comment">//auto将推导出整型</span></span><br></pre></td></tr></table></figure><hr><h1 id="第3章：字符串、向量和数组"><a href="#第3章：字符串、向量和数组" class="headerlink" title="第3章：字符串、向量和数组"></a>第3章：字符串、向量和数组</h1><h2 id="3-1-命名空间"><a href="#3-1-命名空间" class="headerlink" title="3.1 命名空间"></a>3.1 命名空间</h2><p>我们所用到的库函数，基本上都属于命名空间std，使用<strong>using声明</strong>后，就可以<strong>直接访问命名空间的名字</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> :: <span class="built_in">std</span>;<span class="comment">//或者using namespace std;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-2-标准库类型string"><a href="#3-2-标准库类型string" class="headerlink" title="3.2 标准库类型string"></a>3.2 标准库类型string</h2><p>string表示<strong>可变长的字符序列</strong>，使用string类型必须包含string头文件(但实际使用VS编程中，不包含似乎也可以？)</p><h3 id="3-2-1-定义和初始化string对象"><a href="#3-2-1-定义和初始化string对象" class="headerlink" title="3.2.1 定义和初始化string对象"></a>3.2.1 定义和初始化string对象</h3><p><strong>string初始化</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1;<span class="comment">//默认初始化，s1是一个空字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s2=s1;<span class="comment">//将s1中的字符拷贝到s2中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s3=<span class="string">&quot;hiya&quot;</span><span class="comment">//将该字面值拷贝到s3中</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">string</span> s4(<span class="number">10</span>,<span class="string">&#x27;c&#x27;</span>)<span class="comment">//s4的内容是cccccccccc</span></span><br></pre></td></tr></table></figure><p><strong>直接初始化和拷贝初始化</strong></p><ul><li><p>如果<strong>使用</strong>等号初始化一个变量，实际上就是执行<strong>拷贝初始化</strong></p></li><li><p>如果<strong>不使用</strong>等号，则执行的直接初始化</p></li></ul><h3 id="3-2-2-string对象上的操作"><a href="#3-2-2-string对象上的操作" class="headerlink" title="3.2.2 string对象上的操作"></a>3.2.2 string对象上的操作</h3><p><strong>读写string对象</strong></p><ul><li>string读写单个对象</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> s1;<span class="comment">//初始化空字符串</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s1;<span class="comment">//从键盘上输入的内容读入s1中</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出s1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当我们输入&quot;   Hello World&quot;时，只会输出&quot;Hello&quot;</span></span><br></pre></td></tr></table></figure><ul><li>string读写多个对象</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> s1;<span class="comment">//初始化空字符串</span></span><br><span class="line"><span class="built_in">string</span> s2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s1&gt;&gt;s2;<span class="comment">//从键盘上输入的内容读入s1中</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt;s2&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//输出s1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当我们输入&quot;   Hello World&quot;时 会输出&quot;HelloWorld&quot; 中间并不会有空格</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：string对象会<strong>忽略开头的空白</strong>，并从<strong>第一个真正的字符</strong>开始读取，直到遇到<strong>下一处空白</strong>为止</p><p><strong>使用getline读取一整行</strong></p><ul><li>getline函数的<strong>参数</strong>是一个<strong>输入流</strong>和一个<strong>string对象</strong></li><li>函数从给定的输入流中读取内容，直到遇见换行符为止(<strong>换行符也读取进来</strong>),然后将内容再存入到string对象中(<strong>不存换行符</strong>)</li><li>getline只要一遇见换行符就结束，如果一开始输入的是换行符，那么就会得到一个空字符</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> line;</span><br><span class="line"><span class="keyword">while</span> (getline(<span class="built_in">cin</span>,line))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; line &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>string 的 empty和size</strong></p><h2 id="3-3-标准库类型-vector"><a href="#3-3-标准库类型-vector" class="headerlink" title="3.3 标准库类型 vector"></a>3.3 标准库类型 vector</h2><p><strong>vector</strong> 表示<strong>类型相同</strong>的对象的<strong>集合</strong>。每个对象都有一个与之对应的<strong>索引</strong>，用于<strong>访问对象</strong></p><p>注意：</p><ul><li>vector是<strong>类模板</strong>，而非类型</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所以由vector生成的类型必须包含vector中元素的类型</span></span><br><span class="line">vector&lt;<span class="built_in">int</span>&gt; a;</span><br></pre></td></tr></table></figure><ul><li>因为引用不是对象，所以vector<strong>不能容纳引用作为对象</strong></li></ul><h3 id="3-3-1-定义和初始化vector对象"><a href="#3-3-1-定义和初始化vector对象" class="headerlink" title="3.3.1 定义和初始化vector对象"></a>3.3.1 定义和初始化vector对象</h3><p><strong>定义vector对象的常用方法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;T&gt; v1;<span class="comment">//定义空的vector，潜在元素是T类型的，执行默认初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;T&gt; <span class="title">v2</span><span class="params">(v1)</span></span>;<span class="comment">//将v1中所有元素拷贝到v2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;T&gt; <span class="title">v3</span><span class="params">(n)</span></span>;<span class="comment">//v3中包含了n个元素</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;T&gt; <span class="title">v4</span><span class="params">(n,<span class="number">4</span>)</span></span>;<span class="comment">//v4中包含n个元素，每个元素的值都为4</span></span><br></pre></td></tr></table></figure><p>作用：</p><ul><li>先定义一个空的vector，然后运行时 再逐一添加元素</li><li>也可以定义vector对象时就指定元素的初始值，但对象的<strong>类型必须相同</strong></li></ul><p><strong>列表初始化vector对象</strong></p><p>用<strong>花括号</strong>括起来的0个或者多个初始元素值将被赋给vector对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v1&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;an&quot;</span>,<span class="string">&quot;the&quot;</span>&#125;;<span class="comment">//列表初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">v2</span><span class="params">(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;an&quot;</span>,<span class="string">&quot;the&quot;</span>)</span></span>;<span class="comment">//错误，是花括号，不是圆括号</span></span><br></pre></td></tr></table></figure><p><strong>值初始化</strong></p><p>概念：</p><p>一般在创建vector对象时，可以<strong>只提供元素数量</strong>，而<strong>不用给其初始化</strong>。</p><p>因为库会根据元素的<strong>类型</strong> 自动进行 <strong>值初始化</strong>操作</p><ul><li>如果是内置的数据类型，如int，那么元素的初始值就为0</li><li>如果是类 类型，如 string，那么元素就由类默认初始化</li></ul><p>列表初始化还是元素数量？</p><ul><li>圆括号：可以说提供的值是用来<strong>构造vector对象</strong>的</li><li>花括号：<strong>优先</strong>进行<strong>列表初始化操作</strong>，只有确认<strong>无法执行</strong>列表初始化后，才尝试<strong>构造对象</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v1</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">//v1有10个元素，每个元素都是0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2&#123;<span class="number">10</span>&#125;;<span class="comment">//v2有1个元素，值为10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;v3&#123;<span class="number">10</span>&#125;;<span class="comment">//v3无法进行初始化列表操作，会尝试构造对象，所以有10个默认构造的元素</span></span><br></pre></td></tr></table></figure><h3 id="3-3-2-向vector对象中添加元素"><a href="#3-3-2-向vector对象中添加元素" class="headerlink" title="3.3.2 向vector对象中添加元素"></a>3.3.2 向vector对象中添加元素</h3><p>对于vector对象来说，直接初始化一般适用于三种情况</p><ol><li>初始值已知且数量少(直接赋值)</li><li>初始值是另一个vector对象的副本(拷贝)</li><li>所有元素的初始值相同(初始化列表)</li></ol><p>其他情况，一般是 创建一个<strong>空vector</strong>，然后再利用成员函数<strong>push_back</strong>向其添加元素</p><p><strong>push_back</strong>：负责把一个<strong>值</strong> 当成vector对象的<strong>尾元素 **</strong>压倒尾端**</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;<span class="comment">//创建空vector对象</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;num)<span class="comment">//读入数据</span></span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(num);<span class="comment">//将数据依次赋予元素并压入栈中</span></span><br><span class="line">sum++;<span class="comment">//计算容器中目前的元素</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sum; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;v1中的值为：&quot;</span> &lt;&lt; v1[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-迭代器"><a href="#3-4-迭代器" class="headerlink" title="3.4 迭代器"></a>3.4 迭代器</h2><p>与指针类似，迭代器提供了对象的<strong>间接</strong>访问。其<strong>对象是</strong>容器中的<strong>元素</strong>或者string对象中的<strong>字符</strong></p><p>作用：</p><p>使用迭代器可以<strong>间接访问某个元素</strong>，也能从<strong>一个元素移动到另外一个元素</strong></p><p>注意：</p><p>迭代器有 有效和无效之分</p><p>有效：</p><ul><li>指向某个元素</li><li>指向容器尾元素的下一个位置</li></ul><p>其余都是无效</p><h3 id="3-4-1-使用迭代器"><a href="#3-4-1-使用迭代器" class="headerlink" title="3.4.1 使用迭代器"></a>3.4.1 使用迭代器</h3><p>和指针不一样，迭代器不适用取地址符。</p><p>而是返回迭代器的<strong>begin</strong>和<strong>end</strong>成员</p><ul><li><strong>begin</strong>成员负责指向第一个元素</li><li><strong>end</strong>成员负责指向尾元素的下一个位置，即end成员如果<strong>返回空</strong>，说明已经处理完<strong>所有元素</strong></li><li>如果 容器为空，那么<strong>begin</strong>和<strong>end</strong>返回<strong>同一个迭代器</strong></li></ul><h2 id="3-5-数组"><a href="#3-5-数组" class="headerlink" title="3.5 数组"></a>3.5 数组</h2><p>数组是存放<strong>类型相同</strong>对象的<strong>容器</strong>，这些对象本身没有名字，需要通过其所在的<strong>位置</strong>访问</p><p>数组的<strong>大小</strong>是确定<strong>不变</strong>，不能随意向数组中增加元素</p><h3 id="3-5-1-定义和初始化内置数组"><a href="#3-5-1-定义和初始化内置数组" class="headerlink" title="3.5.1 定义和初始化内置数组"></a>3.5.1 定义和初始化内置数组</h3><p>数组的声明：<code>a[d]</code></p><ul><li>其中a是数组的名字，d是数组的<strong>个数</strong></li><li><p>数组元素的<strong>个数</strong>在编译时应该是<strong>已知</strong>的</p></li><li><p><strong>定义数组时必须指定它的类型</strong>，并且其元素应为<strong>对象</strong>，所以<strong>不存在引用的数组</strong></p></li></ul><p><strong>显式初始化数组元素</strong></p><ul><li>如果<strong>没有</strong>给定数组<strong>个数</strong>，那么编译器会根据<strong>初始值的数量推测</strong>出来</li><li>如果<strong>给定</strong>了数组个数，那么初始值的总数就<strong>不能超出指定大小</strong></li><li>如果数组个数<strong>大于</strong>初始值总数，那么剩下的元素会被<strong>初始化成默认值</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr1[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;<span class="comment">//编译器会自动推测数组个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr2[<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;<span class="comment">//错误，数组越界</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>arr3[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;<span class="comment">//最后的数组为&#123;1,2,3,0,0&#125;</span></span><br></pre></td></tr></table></figure><p><strong>字符数组的特殊性</strong></p><ul><li>当使用<strong>字符串</strong>对<strong>字符数组</strong>进行<strong>初始化</strong>时，字符串结尾处的<strong>空字符</strong>也会拷贝进去</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> arr1[]=&#123;<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;+&#x27;</span>&#125;;<span class="comment">//正确，列表初始化，没有空字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> arr2[]=&#123;<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;<span class="comment">//正确，列表初始化，含有显示的空字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> arr3[<span class="number">3</span>]=<span class="string">&quot;C++&quot;</span>;<span class="comment">//错误，没有多余的空间存放字符串结尾处的空字符</span></span><br></pre></td></tr></table></figure><p><strong>不允许拷贝和赋值</strong></p><ul><li>不能将数组的内容拷贝给其他数组作为初始值，也不能给其他数组赋值</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr1[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> arr2[]=a;<span class="comment">//错误，不允许将一个数组初始化其他数组</span></span><br><span class="line">arr2=arr1;<span class="comment">//错误</span></span><br></pre></td></tr></table></figure><p><strong>理解复杂的数组声明</strong></p><p>指针数组：存放指针的数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> d = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>* p1 = &amp;a;</span><br><span class="line"><span class="keyword">int</span>* p2 = &amp;b;</span><br><span class="line"><span class="keyword">int</span>* p3= &amp;c;</span><br><span class="line"><span class="keyword">int</span>* p4 = &amp;d;</span><br><span class="line"><span class="keyword">int</span>* ptr[<span class="number">4</span>] = &#123; p1,p2,p3,p4 &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p1 &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//指针所指对象的地址</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ptr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//指针所指对象的地址</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *ptr &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//指针所指对象的地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; &amp;p1 &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//0号位指针本身的地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;*ptr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//解引用0号位指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84.png" class="" title="指针数组"><p><strong>数组指针</strong>：</p><p>指向数组的指针，其<strong>数组名就是指针本身</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">4</span>] = &#123; <span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span> &#125;;<span class="comment">//定义数组</span></span><br><span class="line"><span class="keyword">int</span>(*ptr)[<span class="number">4</span>] = &amp;arr;<span class="comment">//定义指向数组的指针</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>(*ptr)[<span class="number">5</span>]=&amp;arr;<span class="comment">//错误,数组和数组指针的元素个数必须相同</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;* (*ptr) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//通过数组指针解引用访问数组的0号元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88.png" class="" title="数组指针"><p>注意：</p><ul><li><strong>数组</strong>和<strong>数组指针</strong>的元素<strong>个数</strong>必须<strong>相同</strong></li><li>可以通过<strong>数组指针解引用访问数组</strong></li></ul><p><strong>总结</strong>：</p><p>面对复杂的数组声明，应该由<strong>数组名</strong>开始然后<strong>从右往左</strong>读</p><h3 id="3-5-2-访问数组元素"><a href="#3-5-2-访问数组元素" class="headerlink" title="3.5.2 访问数组元素"></a>3.5.2 访问数组元素</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将10学生的成绩存入数组中</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line"><span class="keyword">int</span> grade;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; grade;</span><br><span class="line">arr[i] = grade;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-指针和数组"><a href="#3-5-3-指针和数组" class="headerlink" title="3.5.3 指针和数组"></a>3.5.3 指针和数组</h3><p>在C++中，使用数组的时候，编译器一般会把它<strong>转换成指针</strong></p><p><strong>本质</strong>：</p><ul><li>在使用到<strong>数组名</strong>的地方，编译器会自动的将其<strong>替换</strong>为一个<strong>指向数组首元素</strong>的<strong>指针</strong></li></ul><blockquote><p>所以，在一些情况下，数组的操作实际上是指针的操作</p></blockquote><ul><li>指针也是<strong>迭代器</strong>，vector和string支持的运算，数组的指针也全部支持</li></ul><p>特点：</p><ol><li>当数组作为一个<strong>auto</strong> 变量的初始值时，得到的推断<strong>是指针</strong>，而<strong>不是</strong>数组。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr1[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">arr2</span><span class="params">(arr1)</span></span>;<span class="comment">//arr2 是一个整型指针，指向arr1的第一个元素</span></span><br><span class="line">arr2=<span class="number">4</span>;<span class="comment">//错误，arr2 是指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//编译器内部实际上发生了以下的转换</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">arr2</span><span class="params">(&amp;arr[<span class="number">0</span>])</span></span>;<span class="comment">//所以arr2 是int* 类型</span></span><br></pre></td></tr></table></figure><ol><li>通过指针也能遍历数组中的元素，我们只需要得到数组<strong>第一个元素</strong>的指针和尾元素<strong>下一个位置</strong>的指针</li></ol><blockquote><p>在C++ 11 中引入了begin 和 end 函数，其功能与容器中的两个同名成员函数类似</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>* beg = begin(arr);<span class="comment">//指向arr首元素的指针</span></span><br><span class="line"><span class="keyword">int</span>* last = end(arr);<span class="comment">//指向arr尾元素的下一个位置指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">while</span> (beg != last) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *beg &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">beg++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>给指针加上某个整数，结果仍为指针。</p></li><li><p>两个指针<strong>相减</strong>的结果是他们之间的<strong>距离</strong>。参与运算的两个指针必须指向<strong>同一个数组</strong>当中的元素</p></li></ol><blockquote><p>如果两个指针分别指向不相关的对象，则不能比较他们。</p></blockquote><p><strong>总结</strong>：</p><ul><li>使用<strong>数组类型</strong>的对象，实际上是使用一个<strong>指向</strong>该<strong>数组首元素</strong>的<strong>指针</strong></li><li>指针也是<strong>迭代器</strong>。所以给指针加上某个整数，相当于新指针位移了改整数的位置</li></ul><h1 id="第6章：函数"><a href="#第6章：函数" class="headerlink" title="第6章：函数"></a>第6章：函数</h1><p>函数是一个<strong>有名字的代码块</strong>，我们通过调用函数执行相应代码，函数有<strong>0个</strong>或者<strong>多个</strong>参数，通常产生<strong>一个</strong>结果。</p><h2 id="6-1-函数基础"><a href="#6-1-函数基础" class="headerlink" title="6.1 函数基础"></a>6.1 函数基础</h2><p>一个函数包括以下部分：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;<span class="comment">//返回类型 函数名 0个或多个形参组成的函数体</span></span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">&#125;<span class="comment">//语句块</span></span><br></pre></td></tr></table></figure><p>函数调用完成两项工作：</p><ul><li>用实参初始化对应的形参</li><li>将控制权转移给被调函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=b;</span><br><span class="line">    b=a;</span><br><span class="line">    a=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">5</span>;</span><br><span class="line">    swap(A,B);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行函数时，实参会用<strong>字面值 </strong> <strong>隐式</strong>的定义并初始化它的形参。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">3</span>;<span class="comment">//实参隐式初始化形参</span></span><br><span class="line"><span class="keyword">int</span>b=<span class="number">5</span>;</span><br></pre></td></tr></table></figure><p><strong>形参和实参</strong></p><p>实参是形参的<strong>初始值</strong>。二者因为作用域不同，所以可以同名，但实际上是两个不同的变量</p><ul><li>形参<strong>类型</strong>和<strong>个数</strong>要与形参相匹配。(类型隐式转换也可以)</li></ul><hr><h1 id="第7章：类"><a href="#第7章：类" class="headerlink" title="第7章：类"></a>第7章：类</h1><p>在C++中，我们使用<strong>类</strong> <strong>定义</strong> <strong>自己</strong>的数据类型。通过自定义的数据类型解决更多问题</p><p>类的基本思想是<strong>数据抽象</strong>和<strong>封装</strong></p><ul><li>数据抽象是一种依赖于<strong>接口</strong>和<strong>实现</strong>分离的编程，<strong>封装</strong>实现了该步骤</li><li>封装后的类隐藏了它的实现细节，只能使用接口而无法访问实现部分</li></ul><h2 id="7-1-定义抽象数据类型"><a href="#7-1-定义抽象数据类型" class="headerlink" title="7.1 定义抽象数据类型"></a>7.1 定义抽象数据类型</h2><h3 id="7-1-1-类和对象"><a href="#7-1-1-类和对象" class="headerlink" title="7.1.1 类和对象"></a>7.1.1 类和对象</h3><p><strong>类</strong>是一种<strong>自定义</strong>数据类型的声明，而<strong>对象</strong>是类这种数据类型的一个<strong>变量</strong></p><blockquote><p>可以将类理解为图纸，而对象就是根据图纸建造起来的房间</p></blockquote><p><strong>this 指针</strong></p><blockquote><p>当对象访问成员函数时，函数内部会<strong>隐式</strong>的将 该对象的地址存放在一个名为<strong>this</strong>的<strong>常量</strong>指针内</p></blockquote><ul><li>this指针中存放的是<strong>对象地址</strong></li><li><strong>对象</strong>访问其中的成员<strong>变量</strong>使用<strong>点</strong>运算符(<strong>.</strong>)</li><li>在成员函数<strong>内部</strong>，可以<strong>直接</strong>使用对象的成员，因为任何对类成员的直接访问都被看成<strong>this指针的隐式引用</strong></li><li>this指针是一个<strong>常量</strong>指针，所以不允许改变其中保存的地址</li></ul><h3 id="7-1-4-构造函数"><a href="#7-1-4-构造函数" class="headerlink" title="7.1.4 构造函数"></a>7.1.4 构造函数</h3><p>定义：</p><p>类通过<strong>一个或几个</strong>特殊的成员函数来<strong>控制其对象的初始化</strong>过程</p><p>作用：</p><p>初始化类对象的数据成员，只要类的对象被创建，就会执行构造函数</p><p>特征：</p><ul><li>构造函数的名字和<strong>类名相同</strong></li><li><strong>没有返回值</strong></li><li>构造函数可以有参数，可以发生重载</li><li>一个类可以包含多个构造函数</li><li>构造函数不能被声明成const</li></ul><blockquote><p>const对象在构造函数完成初始化之后，才能真正取得其“常量”属性。所以const对象在初始化的过程中可以修改它的值</p></blockquote><p><strong>默认构造函数</strong></p><p>定义：</p><p>类通过一个特殊的构造函数来控制默认初始化的过程</p><p>作用：</p><p>当我们的类没有显示的定义构造函数时，编译器会隐式的定义默认构造函数</p><p>语法：</p><p>默认构造函数无需任何实参</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span>&#123;</span></span><br><span class="line">    Room()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构造函数初始值列表</strong></p><p>它负责为新创建对象的一个或多个数据成员赋初值</p><p>语法：<code>构造函数():属性1(值1),属性2(值2)...&#123;&#125;</code></p><h3 id="7-1-5-拷贝、赋值和析构"><a href="#7-1-5-拷贝、赋值和析构" class="headerlink" title="7.1.5 拷贝、赋值和析构"></a>7.1.5 拷贝、赋值和析构</h3><hr><h2 id="7-2-访问控制与封装"><a href="#7-2-访问控制与封装" class="headerlink" title="7.2 访问控制与封装"></a>7.2 访问控制与封装</h2><p> 在C++中，使用<strong>访问说明符</strong>加强类的封装性</p><p><strong>访问权限</strong>：</p><ul><li><strong>public</strong>成员定义<strong>类的接口</strong>，使得该说明符之后的成员在<strong>整个程序可以被访问</strong></li><li><strong>private</strong> 部分隐藏了类的实现细节，只有类的成员可以访问，类外不能访问</li></ul><p><strong>class</strong>和<strong>struct</strong>：</p><p>在C++中，class和struct 的唯一区别就是，两者<strong>默认的访问权限不一样</strong></p><ul><li>class 关键字默认访问权限是<strong>private</strong>，在继承时也是<strong>私有继承</strong></li><li>而struct 关键字默认访问权限是<strong>public</strong>，在继承时是<strong>公有继承</strong></li></ul><h3 id="7-2-1-友元"><a href="#7-2-1-友元" class="headerlink" title="7.2.1 友元"></a>7.2.1 友元</h3><p>类可以<strong>允许其它类或者函数访问它的非公有成员</strong>，只需要在该类或该函数前加 <strong>friend</strong> 关键字</p><p><strong>作用</strong>：</p><p><strong>在私有访问权限下，能够访问类中的成员</strong></p><p><strong>特点</strong>：</p><ul><li>友元声明只能出现在<strong>类定义的内部</strong></li><li>友元<strong>不是类成员</strong>，不受类中的访问控制权限的影响</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>封装的好处：</p><ul><li>确保代码不会无意破坏对象的状态</li><li>被封装的类的具体实现细节可以随时改变</li></ul><hr><h2 id="7-3-类的其它特性"><a href="#7-3-类的其它特性" class="headerlink" title="7.3 类的其它特性"></a>7.3 类的其它特性</h2><h3 id="7-3-1-内联函数"><a href="#7-3-1-内联函数" class="headerlink" title="7.3.1 内联函数"></a>7.3.1 内联函数</h3><p>一些<strong>规模较小</strong>的函数适合于被声明成<strong>内联函数</strong>，而类内部的<strong>成员函数</strong>是自动 <strong>inline </strong>的</p><p><strong>作用</strong>：</p><p><strong>加快程序允许时的效率</strong></p><p>特点：</p><ul><li>类内部的<strong>成员函数</strong>默认都是内联函数</li><li>也可以在<strong>类外部</strong>用 <strong>inline</strong> 关键字显示声明内联函数 </li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、将普通函数声明为内联函数</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、</span></span><br></pre></td></tr></table></figure><h1 id="第12章：动态内存"><a href="#第12章：动态内存" class="headerlink" title="第12章：动态内存"></a>第12章：动态内存</h1><p><strong>常量存储区</strong>：特殊的区域，里面存放常量</p><p><strong>静态内存</strong>：static对象在<strong>使用之前分配</strong>，在<strong>程序结束时销毁</strong></p><ol><li><strong>静态变量</strong></li><li><strong>全局变量</strong></li></ol><p><strong>栈内存</strong>：仅在<strong>定义的程序块</strong>运行时才存在</p><ol><li>保存<strong>函数内的非static对象</strong>，一般是局部变量和函数参数等</li></ol><p><strong>堆内存</strong>：堆内的对象是<strong>动态分配</strong>的，必须由程序员手动销毁</p><ol><li>利用 <strong>new</strong> 运算符创建的对象。delete 销毁对象</li></ol><p>总结：</p><ol><li>静态内存和栈内存都是由<strong>编译器自动创建和销毁</strong></li><li><strong>堆内存</strong>由程序<strong>手动创建和手动销毁</strong></li></ol><h2 id="12-1-动态内存与智能指针"><a href="#12-1-动态内存与智能指针" class="headerlink" title="12.1 动态内存与智能指针"></a>12.1 动态内存与智能指针</h2><p>C++中使用 <strong>new</strong> 运算符 在动态内存中<strong>为对象分配空间</strong>，并<strong>返回一个指向该对象的指针</strong></p><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20220324104614405.png" class="" title="image-20220324104614405"><p>使用 <strong>delete</strong> 运算符 <strong>接受一个动态对象的指针</strong>，<strong>销毁该对象</strong>，并<strong>释放与之关联的内存</strong></p><blockquote><p>由于使用动态内存很容易出现问题，当我们忘记释放内存时，就会造成内存泄漏。</p><p>所以新标准库提供了两种智能指针来动态管理对象</p></blockquote><p><strong>智能指针的作用：</strong></p><ul><li>可以<strong>自动释放所指向的对象</strong></li></ul><h3 id="12-1-1-shared-ptr类"><a href="#12-1-1-shared-ptr类" class="headerlink" title="12.1.1 shared_ptr类"></a>12.1.1 shared_ptr类</h3><p>智能指针也是<strong>模板</strong>。所以，当我们创建智能指针时，必须提供 <strong>指针可以指向的类型</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="built_in">string</span>&gt; p1;<span class="comment">//可以指向string</span></span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;&gt; p2;<span class="comment">//可以指向int的list</span></span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li>shared_ptr <strong>允许多个指针指向同一个对象</strong></li><li><strong>默认初始化</strong>的智能指针是一个空指针</li></ul><p><strong>使用方法：</strong></p><ul><li>智能指针的使用方法与普通指针类似</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//智能指针都能支持的操作</span></span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;T&gt; p;<span class="comment">//初始化一个空智能指针，可以指向类型为T的对象</span></span><br><span class="line"><span class="keyword">if</span>(p)&#123;&#125;<span class="comment">//将p作为一个判断条件，若p指向了一个对象，则为true</span></span><br><span class="line">*p;<span class="comment">//解引用p，获得它指向的对象</span></span><br><span class="line">p-&gt;mem;<span class="comment">//等价于(*p).mem</span></span><br><span class="line">p.get();<span class="comment">//返回智能指针中保存的指针。若智能指针释放了其对象，返回的指针所指向对象也就消失</span></span><br><span class="line"></span><br><span class="line">swap(p,q);<span class="comment">//交换两个智能指针中的指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//shared_ptr独有的操作</span></span><br><span class="line">make_shared&lt;T&gt;(args);<span class="comment">//返回一个shared_ptr,指向一个动态分配类型为T的对象，并用args初始化此对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;T&gt;p(q);<span class="comment">//p是 shared_ptr q的拷贝。此操作会递增q中的计数器</span></span><br></pre></td></tr></table></figure><p><strong>make_shared 函数</strong></p><p>最安全的分配和使用动态内存的方法，就是调用<strong>make_shared</strong> 标准库函数</p><p>该函数会<strong>在动态内存中分配一个对象并初始化它</strong>，<strong>返回指向此对象的shared_ptr</strong>。</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//p3指向一个值为42的int类型的shared_ptr</span></span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; p3 = make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//p4指向一个值为&quot;999&quot;的</span></span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="built_in">string</span>&gt; p4 = make_shared&lt;<span class="built_in">string</span>&gt;(<span class="number">3</span>,<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过使用auto定义一个对象来保存make_shared的结果</span></span><br><span class="line"><span class="keyword">auto</span> p5 = make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">42</span>);</span><br></pre></td></tr></table></figure><blockquote><p>当我们传递int时，make_shared<int>就会调用相应的构造函数</p><p>若不传递任何参数，对象就会进行值初始化</p></blockquote><p><strong>shared_ptr的拷贝和赋值</strong></p><p>每个shared_ptr都有一个关联的引用计数。它表示<strong>当前有多少的shared_ptr指向同一对象</strong></p><p>当增加一个shared_ptr指向同一个对象，引用计数就会递增</p><p>若shared_ptr指向了其它对象，或者被销毁时，引用计数就会递减</p><p>一旦shared_ptr的计数器变为0，它就会自动释放自己所管理的对象</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> p = make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">42</span>);</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">q</span><span class="params">(p)</span></span>;<span class="comment">//q拷贝p中的地址，与p指向同一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> r = make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">42</span>);</span><br><span class="line">r = q;<span class="comment">//将q的地址赋值给r，这样r就会跟p，q指向同一个对象，但r原来的对象没有引用者，会自动释放</span></span><br></pre></td></tr></table></figure><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20220505221922334.png" class="" title="image-20220505221922334"><p><strong>shared_ptr 自动销毁管理对象并释放内存</strong></p><p>当指向对象的最后一个shared_ptr 被销毁时，shared_ptr 类就会调用<strong>析构函数</strong>完成销毁工作，并释放内存</p><p>所以当我们需要销毁对象时，只需要销毁指向它的所有shared_ptr 就行，否则程序仍会正确允许，浪费内存</p><p><strong>使用动态生存期的资源的类</strong></p><p>程序一般出于以下三种原因使用动态内存：</p><ul><li>不知道自己需要使用多少对象</li><li>不知道所需对象的准确类型</li><li>需要在多个对象间共享数据</li></ul><p><strong>容器类</strong>是出于第一种原因而使用动态内存的典型例子</p><p>而类的<strong>拷贝构造和拷贝赋值</strong>就是出于第三种原因而使用动态内存的例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Blob&lt;<span class="built_in">string</span>&gt; b1;</span><br><span class="line">&#123;<span class="comment">//设置一个作用域</span></span><br><span class="line">    Blob&lt;<span class="built_in">string</span>&gt; b2 = &#123;<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>&#125;;</span><br><span class="line">    b1 = b2;<span class="comment">//调用拷贝赋值函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出作用域后，b2被销毁，但b1仍然指向数据</span></span><br></pre></td></tr></table></figure><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20220506110829177.png" class="" title="image-20220506110829177"><h1 id="第15章：面向对象程序设计"><a href="#第15章：面向对象程序设计" class="headerlink" title="第15章：面向对象程序设计"></a>第15章：面向对象程序设计</h1><p>核心思想是<strong>封装、继承和多态</strong></p><h2 id="15-1-OPP：概述"><a href="#15-1-OPP：概述" class="headerlink" title="15.1 OPP：概述"></a>15.1 OPP：概述</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a><strong>继承</strong></h3><p><strong>菱形继承概念</strong>：</p><p>两个派生类同时继承一个基类，并且又有某个类同时继承这个两个派生类</p><p><strong>典型的菱形继承案例</strong>：</p><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20211201085720326.png" class="" title="image-20211201085720326"><p><strong>菱形继承问题</strong>：</p><blockquote><p>在动物类中声明一个年龄</p></blockquote><p>1.羊和驼都继承了动物年龄，所以当羊驼调用年龄时，会面临来自继承羊的年龄和驼的年龄，这时会产生二义性，</p><p>2.羊驼重复继承了动物的两个年龄，会在该类中开辟两块内存空间继承同一种数据，造成空间资源浪费。</p><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20211201094336466.png" class="" title="image-20211201094336466"><p><strong>引入虚继承解决菱形继承问题</strong>：</p><p>即在派生类的继承前加上==virtual==关键字  使之变为虚继承<br>Animal类称为 虚基类</p><ul><li>使用虚继承后，内存中只有一份数据，所以子类访问原有父类的成员时，则不再具有二义性，也不会造成空间浪费</li></ul><p><strong>虚继承的内存模型结构</strong>：</p><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20211201105430191.png" class="" title="image-20211201105430191"><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20211201110516699.png" class="" title="image-20211201110516699"><blockquote><p>引入虚继承后，羊驼类不再从羊类和驼类直接继承m_Age，而是声明一个虚基类来存放m_Age</p><p>现在羊驼类只继承来自羊类和驼类vbptr(虚基类指针)</p><p>羊驼类中的vbptr(虚基类指针)会指向存放在羊类和驼类中vbtable(虚基类表)的地址</p><p>而vbtable(虚基类表)中存放的是指针偏移的字节数，羊类vbtable中是8个字节，驼类是4个字节，vbptr(虚基类指针)加上对应的字节后就能恰好指向virtual下的m_Age</p></blockquote><img src="/blog/Cpp-Primer%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/image-20211201115327378.png" class="" title="image-20211201115327378"><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>在C++中，若子类不希望直接继承父类的函数，而是希望对其进行修改，那么就可以在父类中将这些函数设置为虚函数</p><p>多态发生的条件：</p><ol><li><strong>有继承关系</strong></li><li><strong>子类重写父类中的虚函数</strong></li></ol><p>多态发生的时机：</p><p><strong>父类的指针或引用 调用一个虚函数时</strong>，将发生多态</p><h2 id="15-2-定义基类和派生类"><a href="#15-2-定义基类和派生类" class="headerlink" title="15.2 定义基类和派生类"></a>15.2 定义基类和派生类</h2><h3 id="定义基类"><a href="#定义基类" class="headerlink" title="定义基类"></a><strong>定义基类</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quote</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    Quote() = <span class="keyword">default</span>;<span class="comment">//C++ 11中的默认构造函数</span></span><br><span class="line">    Quote(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;book, <span class="keyword">double</span> sales_price) :</span><br><span class="line">    bookNo(book),price(sales_price)&#123;&#125;<span class="comment">//初始化列表</span></span><br><span class="line">    <span class="comment">//成员属性</span></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">isbn</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookNo;<span class="comment">//返回给定数量的书籍的销售总额</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">net_price</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> n)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n * price;<span class="comment">//派生类负责改写使用不同的折扣计算算法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~Quote() = <span class="keyword">default</span>;<span class="comment">//虚析构</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> bookNo;<span class="comment">//书籍编号</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">double</span> price = <span class="number">0.0</span>;<span class="comment">//代表普通状态下不打折的价格</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>若子类需要修改父类中的方法，那么就需要将该方法设置为<strong>虚函数</strong>，并在子类中进行重写</li><li>父类中通常需要定义一个<strong>虚析构函数</strong></li></ul><p><strong>成员函数和继承</strong></p><p><strong>当子类继承父类中的虚函数时，必须对其进行重写</strong>。</p><ul><li>任何<strong>构造函数之外</strong>的<strong>非静态函数</strong>，都可以是虚函数</li><li>关键字virtual 只能出现在<strong>类内部声明语句之前</strong></li><li>父类中声明一个虚函数，那么该函数在子类中隐式的也是虚函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="blog/test/"/>
      <url>blog/test/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="/blog/test/1.jpg" class="">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
